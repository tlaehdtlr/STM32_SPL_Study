
[MX]_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003764  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003820  08003820  00013820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038d8  080038d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080038d8  080038d8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038d8  080038d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038d8  080038d8  000138d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038dc  080038dc  000138dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080038e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000070  08003950  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08003950  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4e6  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df1  00000000  00000000  0002a57e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  0002c370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000750  00000000  00000000  0002cb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ba7e  00000000  00000000  0002d2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4dd  00000000  00000000  00048d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1ea1  00000000  00000000  00054243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f60e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002184  00000000  00000000  000f6134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003808 	.word	0x08003808

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08003808 	.word	0x08003808

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b089      	sub	sp, #36	; 0x24
 8000220:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000222:	240c      	movs	r4, #12
 8000224:	193b      	adds	r3, r7, r4
 8000226:	0018      	movs	r0, r3
 8000228:	2314      	movs	r3, #20
 800022a:	001a      	movs	r2, r3
 800022c:	2100      	movs	r1, #0
 800022e:	f002 fd99 	bl	8002d64 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000232:	4b31      	ldr	r3, [pc, #196]	; (80002f8 <MX_GPIO_Init+0xdc>)
 8000234:	695a      	ldr	r2, [r3, #20]
 8000236:	4b30      	ldr	r3, [pc, #192]	; (80002f8 <MX_GPIO_Init+0xdc>)
 8000238:	2180      	movs	r1, #128	; 0x80
 800023a:	0309      	lsls	r1, r1, #12
 800023c:	430a      	orrs	r2, r1
 800023e:	615a      	str	r2, [r3, #20]
 8000240:	4b2d      	ldr	r3, [pc, #180]	; (80002f8 <MX_GPIO_Init+0xdc>)
 8000242:	695a      	ldr	r2, [r3, #20]
 8000244:	2380      	movs	r3, #128	; 0x80
 8000246:	031b      	lsls	r3, r3, #12
 8000248:	4013      	ands	r3, r2
 800024a:	60bb      	str	r3, [r7, #8]
 800024c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800024e:	4b2a      	ldr	r3, [pc, #168]	; (80002f8 <MX_GPIO_Init+0xdc>)
 8000250:	695a      	ldr	r2, [r3, #20]
 8000252:	4b29      	ldr	r3, [pc, #164]	; (80002f8 <MX_GPIO_Init+0xdc>)
 8000254:	2180      	movs	r1, #128	; 0x80
 8000256:	03c9      	lsls	r1, r1, #15
 8000258:	430a      	orrs	r2, r1
 800025a:	615a      	str	r2, [r3, #20]
 800025c:	4b26      	ldr	r3, [pc, #152]	; (80002f8 <MX_GPIO_Init+0xdc>)
 800025e:	695a      	ldr	r2, [r3, #20]
 8000260:	2380      	movs	r3, #128	; 0x80
 8000262:	03db      	lsls	r3, r3, #15
 8000264:	4013      	ands	r3, r2
 8000266:	607b      	str	r3, [r7, #4]
 8000268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026a:	4b23      	ldr	r3, [pc, #140]	; (80002f8 <MX_GPIO_Init+0xdc>)
 800026c:	695a      	ldr	r2, [r3, #20]
 800026e:	4b22      	ldr	r3, [pc, #136]	; (80002f8 <MX_GPIO_Init+0xdc>)
 8000270:	2180      	movs	r1, #128	; 0x80
 8000272:	0289      	lsls	r1, r1, #10
 8000274:	430a      	orrs	r2, r1
 8000276:	615a      	str	r2, [r3, #20]
 8000278:	4b1f      	ldr	r3, [pc, #124]	; (80002f8 <MX_GPIO_Init+0xdc>)
 800027a:	695a      	ldr	r2, [r3, #20]
 800027c:	2380      	movs	r3, #128	; 0x80
 800027e:	029b      	lsls	r3, r3, #10
 8000280:	4013      	ands	r3, r2
 8000282:	603b      	str	r3, [r7, #0]
 8000284:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000286:	2390      	movs	r3, #144	; 0x90
 8000288:	05db      	lsls	r3, r3, #23
 800028a:	2200      	movs	r2, #0
 800028c:	2120      	movs	r1, #32
 800028e:	0018      	movs	r0, r3
 8000290:	f000 fe24 	bl	8000edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000294:	193b      	adds	r3, r7, r4
 8000296:	2280      	movs	r2, #128	; 0x80
 8000298:	0192      	lsls	r2, r2, #6
 800029a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800029c:	193b      	adds	r3, r7, r4
 800029e:	2284      	movs	r2, #132	; 0x84
 80002a0:	0392      	lsls	r2, r2, #14
 80002a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	2200      	movs	r2, #0
 80002a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002aa:	193b      	adds	r3, r7, r4
 80002ac:	4a13      	ldr	r2, [pc, #76]	; (80002fc <MX_GPIO_Init+0xe0>)
 80002ae:	0019      	movs	r1, r3
 80002b0:	0010      	movs	r0, r2
 80002b2:	f000 fc9b 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80002b6:	0021      	movs	r1, r4
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2220      	movs	r2, #32
 80002bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2201      	movs	r2, #1
 80002c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2200      	movs	r2, #0
 80002ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002d0:	187a      	adds	r2, r7, r1
 80002d2:	2390      	movs	r3, #144	; 0x90
 80002d4:	05db      	lsls	r3, r3, #23
 80002d6:	0011      	movs	r1, r2
 80002d8:	0018      	movs	r0, r3
 80002da:	f000 fc87 	bl	8000bec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80002de:	2200      	movs	r2, #0
 80002e0:	2100      	movs	r1, #0
 80002e2:	2007      	movs	r0, #7
 80002e4:	f000 fbd2 	bl	8000a8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80002e8:	2007      	movs	r0, #7
 80002ea:	f000 fbe4 	bl	8000ab6 <HAL_NVIC_EnableIRQ>

}
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	46bd      	mov	sp, r7
 80002f2:	b009      	add	sp, #36	; 0x24
 80002f4:	bd90      	pop	{r4, r7, pc}
 80002f6:	46c0      	nop			; (mov r8, r8)
 80002f8:	40021000 	.word	0x40021000
 80002fc:	48000800 	.word	0x48000800

08000300 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	0002      	movs	r2, r0
 8000308:	1dbb      	adds	r3, r7, #6
 800030a:	801a      	strh	r2, [r3, #0]
  if (GPIO_Pin == GPIO_PIN_13)
 800030c:	1dbb      	adds	r3, r7, #6
 800030e:	881a      	ldrh	r2, [r3, #0]
 8000310:	2380      	movs	r3, #128	; 0x80
 8000312:	019b      	lsls	r3, r3, #6
 8000314:	429a      	cmp	r2, r3
 8000316:	d105      	bne.n	8000324 <HAL_GPIO_EXTI_Callback+0x24>
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000318:	2390      	movs	r3, #144	; 0x90
 800031a:	05db      	lsls	r3, r3, #23
 800031c:	2120      	movs	r1, #32
 800031e:	0018      	movs	r0, r3
 8000320:	f000 fdf9 	bl	8000f16 <HAL_GPIO_TogglePin>
  }
}
 8000324:	46c0      	nop			; (mov r8, r8)
 8000326:	46bd      	mov	sp, r7
 8000328:	b002      	add	sp, #8
 800032a:	bd80      	pop	{r7, pc}

0800032c <_write>:
}
#endif

#if 1
int _write(int file, char* p, int len)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	60f8      	str	r0, [r7, #12]
 8000334:	60b9      	str	r1, [r7, #8]
 8000336:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit_IT(&huart3, (uint8_t *)p, len);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	b29a      	uxth	r2, r3
 800033c:	68b9      	ldr	r1, [r7, #8]
 800033e:	4b04      	ldr	r3, [pc, #16]	; (8000350 <_write+0x24>)
 8000340:	0018      	movs	r0, r3
 8000342:	f001 fc65 	bl	8001c10 <HAL_UART_Transmit_IT>
    return len;
 8000346:	687b      	ldr	r3, [r7, #4]
}
 8000348:	0018      	movs	r0, r3
 800034a:	46bd      	mov	sp, r7
 800034c:	b004      	add	sp, #16
 800034e:	bd80      	pop	{r7, pc}
 8000350:	20000118 	.word	0x20000118

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000358:	f000 fa88 	bl	800086c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035c:	f000 f814 	bl	8000388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000360:	f7ff ff5c 	bl	800021c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000364:	f000 f95e 	bl	8000624 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000368:	f000 f98c 	bl	8000684 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800036c:	2390      	movs	r3, #144	; 0x90
 800036e:	05db      	lsls	r3, r3, #23
 8000370:	2201      	movs	r2, #1
 8000372:	2120      	movs	r1, #32
 8000374:	0018      	movs	r0, r3
 8000376:	f000 fdb1 	bl	8000edc <HAL_GPIO_WritePin>
//        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//        HAL_Delay(500);
//      }
//    }
//  }
  printf("Hello dongsik \r\n");
 800037a:	4b02      	ldr	r3, [pc, #8]	; (8000384 <main+0x30>)
 800037c:	0018      	movs	r0, r3
 800037e:	f002 fd6b 	bl	8002e58 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000382:	e7fe      	b.n	8000382 <main+0x2e>
 8000384:	0800382c 	.word	0x0800382c

08000388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000388:	b590      	push	{r4, r7, lr}
 800038a:	b099      	sub	sp, #100	; 0x64
 800038c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038e:	242c      	movs	r4, #44	; 0x2c
 8000390:	193b      	adds	r3, r7, r4
 8000392:	0018      	movs	r0, r3
 8000394:	2334      	movs	r3, #52	; 0x34
 8000396:	001a      	movs	r2, r3
 8000398:	2100      	movs	r1, #0
 800039a:	f002 fce3 	bl	8002d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800039e:	231c      	movs	r3, #28
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	0018      	movs	r0, r3
 80003a4:	2310      	movs	r3, #16
 80003a6:	001a      	movs	r2, r3
 80003a8:	2100      	movs	r1, #0
 80003aa:	f002 fcdb 	bl	8002d64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003ae:	003b      	movs	r3, r7
 80003b0:	0018      	movs	r0, r3
 80003b2:	231c      	movs	r3, #28
 80003b4:	001a      	movs	r2, r3
 80003b6:	2100      	movs	r1, #0
 80003b8:	f002 fcd4 	bl	8002d64 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003bc:	0021      	movs	r1, r4
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	2201      	movs	r2, #1
 80003c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	2205      	movs	r2, #5
 80003c8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	2202      	movs	r2, #2
 80003ce:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2280      	movs	r2, #128	; 0x80
 80003d4:	0252      	lsls	r2, r2, #9
 80003d6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	22a0      	movs	r2, #160	; 0xa0
 80003dc:	0392      	lsls	r2, r2, #14
 80003de:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	2201      	movs	r2, #1
 80003e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	0018      	movs	r0, r3
 80003ea:	f000 fdcb 	bl	8000f84 <HAL_RCC_OscConfig>
 80003ee:	1e03      	subs	r3, r0, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003f2:	f000 f82d 	bl	8000450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f6:	211c      	movs	r1, #28
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	2207      	movs	r2, #7
 80003fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	2202      	movs	r2, #2
 8000402:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000404:	187b      	adds	r3, r7, r1
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2200      	movs	r2, #0
 800040e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2101      	movs	r1, #1
 8000414:	0018      	movs	r0, r3
 8000416:	f001 f93b 	bl	8001690 <HAL_RCC_ClockConfig>
 800041a:	1e03      	subs	r3, r0, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800041e:	f000 f817 	bl	8000450 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2;
 8000422:	003b      	movs	r3, r7
 8000424:	4a09      	ldr	r2, [pc, #36]	; (800044c <SystemClock_Config+0xc4>)
 8000426:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000428:	003b      	movs	r3, r7
 800042a:	2200      	movs	r2, #0
 800042c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800042e:	003b      	movs	r3, r7
 8000430:	2200      	movs	r2, #0
 8000432:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000434:	003b      	movs	r3, r7
 8000436:	0018      	movs	r0, r3
 8000438:	f001 fa96 	bl	8001968 <HAL_RCCEx_PeriphCLKConfig>
 800043c:	1e03      	subs	r3, r0, #0
 800043e:	d001      	beq.n	8000444 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000440:	f000 f806 	bl	8000450 <Error_Handler>
  }
}
 8000444:	46c0      	nop			; (mov r8, r8)
 8000446:	46bd      	mov	sp, r7
 8000448:	b019      	add	sp, #100	; 0x64
 800044a:	bd90      	pop	{r4, r7, pc}
 800044c:	00040002 	.word	0x00040002

08000450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000454:	b672      	cpsid	i
}
 8000456:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000458:	e7fe      	b.n	8000458 <Error_Handler+0x8>
	...

0800045c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000462:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <HAL_MspInit+0x44>)
 8000464:	699a      	ldr	r2, [r3, #24]
 8000466:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <HAL_MspInit+0x44>)
 8000468:	2101      	movs	r1, #1
 800046a:	430a      	orrs	r2, r1
 800046c:	619a      	str	r2, [r3, #24]
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <HAL_MspInit+0x44>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	2201      	movs	r2, #1
 8000474:	4013      	ands	r3, r2
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <HAL_MspInit+0x44>)
 800047c:	69da      	ldr	r2, [r3, #28]
 800047e:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <HAL_MspInit+0x44>)
 8000480:	2180      	movs	r1, #128	; 0x80
 8000482:	0549      	lsls	r1, r1, #21
 8000484:	430a      	orrs	r2, r1
 8000486:	61da      	str	r2, [r3, #28]
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <HAL_MspInit+0x44>)
 800048a:	69da      	ldr	r2, [r3, #28]
 800048c:	2380      	movs	r3, #128	; 0x80
 800048e:	055b      	lsls	r3, r3, #21
 8000490:	4013      	ands	r3, r2
 8000492:	603b      	str	r3, [r7, #0]
 8000494:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	b002      	add	sp, #8
 800049c:	bd80      	pop	{r7, pc}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	40021000 	.word	0x40021000

080004a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <NMI_Handler+0x4>

080004aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ae:	e7fe      	b.n	80004ae <HardFault_Handler+0x4>

080004b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004b4:	46c0      	nop			; (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}

080004ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c8:	f000 fa18 	bl	80008fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004cc:	46c0      	nop			; (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80004d6:	2380      	movs	r3, #128	; 0x80
 80004d8:	019b      	lsls	r3, r3, #6
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 fd36 	bl	8000f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80004ec:	4b03      	ldr	r3, [pc, #12]	; (80004fc <USART2_IRQHandler+0x14>)
 80004ee:	0018      	movs	r0, r3
 80004f0:	f001 fbfe 	bl	8001cf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	20000090 	.word	0x20000090

08000500 <USART3_8_IRQHandler>:

/**
  * @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_8_IRQHandler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_8_IRQn 0 */

  /* USER CODE END USART3_8_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000504:	4b03      	ldr	r3, [pc, #12]	; (8000514 <USART3_8_IRQHandler+0x14>)
 8000506:	0018      	movs	r0, r3
 8000508:	f001 fbf2 	bl	8001cf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_8_IRQn 1 */

  /* USER CODE END USART3_8_IRQn 1 */
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	20000118 	.word	0x20000118

08000518 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000524:	2300      	movs	r3, #0
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	e00a      	b.n	8000540 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800052a:	e000      	b.n	800052e <_read+0x16>
 800052c:	bf00      	nop
 800052e:	0001      	movs	r1, r0
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	1c5a      	adds	r2, r3, #1
 8000534:	60ba      	str	r2, [r7, #8]
 8000536:	b2ca      	uxtb	r2, r1
 8000538:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	3301      	adds	r3, #1
 800053e:	617b      	str	r3, [r7, #20]
 8000540:	697a      	ldr	r2, [r7, #20]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	429a      	cmp	r2, r3
 8000546:	dbf0      	blt.n	800052a <_read+0x12>
	}

return len;
 8000548:	687b      	ldr	r3, [r7, #4]
}
 800054a:	0018      	movs	r0, r3
 800054c:	46bd      	mov	sp, r7
 800054e:	b006      	add	sp, #24
 8000550:	bd80      	pop	{r7, pc}

08000552 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	b082      	sub	sp, #8
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
	return -1;
 800055a:	2301      	movs	r3, #1
 800055c:	425b      	negs	r3, r3
}
 800055e:	0018      	movs	r0, r3
 8000560:	46bd      	mov	sp, r7
 8000562:	b002      	add	sp, #8
 8000564:	bd80      	pop	{r7, pc}

08000566 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b082      	sub	sp, #8
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
 800056e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	2280      	movs	r2, #128	; 0x80
 8000574:	0192      	lsls	r2, r2, #6
 8000576:	605a      	str	r2, [r3, #4]
	return 0;
 8000578:	2300      	movs	r3, #0
}
 800057a:	0018      	movs	r0, r3
 800057c:	46bd      	mov	sp, r7
 800057e:	b002      	add	sp, #8
 8000580:	bd80      	pop	{r7, pc}

08000582 <_isatty>:

int _isatty(int file)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	b082      	sub	sp, #8
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
	return 1;
 800058a:	2301      	movs	r3, #1
}
 800058c:	0018      	movs	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	b002      	add	sp, #8
 8000592:	bd80      	pop	{r7, pc}

08000594 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
	return 0;
 80005a0:	2300      	movs	r3, #0
}
 80005a2:	0018      	movs	r0, r3
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b004      	add	sp, #16
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005b4:	4a14      	ldr	r2, [pc, #80]	; (8000608 <_sbrk+0x5c>)
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <_sbrk+0x60>)
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <_sbrk+0x64>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d102      	bne.n	80005ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <_sbrk+0x64>)
 80005ca:	4a12      	ldr	r2, [pc, #72]	; (8000614 <_sbrk+0x68>)
 80005cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <_sbrk+0x64>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	18d3      	adds	r3, r2, r3
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d207      	bcs.n	80005ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005dc:	f002 fb98 	bl	8002d10 <__errno>
 80005e0:	0003      	movs	r3, r0
 80005e2:	220c      	movs	r2, #12
 80005e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005e6:	2301      	movs	r3, #1
 80005e8:	425b      	negs	r3, r3
 80005ea:	e009      	b.n	8000600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <_sbrk+0x64>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005f2:	4b07      	ldr	r3, [pc, #28]	; (8000610 <_sbrk+0x64>)
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	18d2      	adds	r2, r2, r3
 80005fa:	4b05      	ldr	r3, [pc, #20]	; (8000610 <_sbrk+0x64>)
 80005fc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80005fe:	68fb      	ldr	r3, [r7, #12]
}
 8000600:	0018      	movs	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	b006      	add	sp, #24
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20008000 	.word	0x20008000
 800060c:	00000400 	.word	0x00000400
 8000610:	2000008c 	.word	0x2000008c
 8000614:	200001b8 	.word	0x200001b8

08000618 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800061c:	46c0      	nop			; (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_USART2_UART_Init+0x58>)
 800062a:	4a15      	ldr	r2, [pc, #84]	; (8000680 <MX_USART2_UART_Init+0x5c>)
 800062c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <MX_USART2_UART_Init+0x58>)
 8000630:	22e1      	movs	r2, #225	; 0xe1
 8000632:	0252      	lsls	r2, r2, #9
 8000634:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_USART2_UART_Init+0x58>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_USART2_UART_Init+0x58>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_USART2_UART_Init+0x58>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_USART2_UART_Init+0x58>)
 800064a:	220c      	movs	r2, #12
 800064c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <MX_USART2_UART_Init+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_USART2_UART_Init+0x58>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <MX_USART2_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_USART2_UART_Init+0x58>)
 8000662:	2200      	movs	r2, #0
 8000664:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000666:	4b05      	ldr	r3, [pc, #20]	; (800067c <MX_USART2_UART_Init+0x58>)
 8000668:	0018      	movs	r0, r3
 800066a:	f001 fa7d 	bl	8001b68 <HAL_UART_Init>
 800066e:	1e03      	subs	r3, r0, #0
 8000670:	d001      	beq.n	8000676 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000672:	f7ff feed 	bl	8000450 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000090 	.word	0x20000090
 8000680:	40004400 	.word	0x40004400

08000684 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_USART3_UART_Init+0x58>)
 800068a:	4a15      	ldr	r2, [pc, #84]	; (80006e0 <MX_USART3_UART_Init+0x5c>)
 800068c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <MX_USART3_UART_Init+0x58>)
 8000690:	22e1      	movs	r2, #225	; 0xe1
 8000692:	0252      	lsls	r2, r2, #9
 8000694:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_USART3_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_USART3_UART_Init+0x58>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_USART3_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_USART3_UART_Init+0x58>)
 80006aa:	220c      	movs	r2, #12
 80006ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_USART3_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_USART3_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_USART3_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_USART3_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <MX_USART3_UART_Init+0x58>)
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 fa4d 	bl	8001b68 <HAL_UART_Init>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80006d2:	f7ff febd 	bl	8000450 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000118 	.word	0x20000118
 80006e0:	40004800 	.word	0x40004800

080006e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b08d      	sub	sp, #52	; 0x34
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	241c      	movs	r4, #28
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	0018      	movs	r0, r3
 80006f2:	2314      	movs	r3, #20
 80006f4:	001a      	movs	r2, r3
 80006f6:	2100      	movs	r1, #0
 80006f8:	f002 fb34 	bl	8002d64 <memset>
  if(uartHandle->Instance==USART2)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a41      	ldr	r2, [pc, #260]	; (8000808 <HAL_UART_MspInit+0x124>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d13b      	bne.n	800077e <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000706:	4b41      	ldr	r3, [pc, #260]	; (800080c <HAL_UART_MspInit+0x128>)
 8000708:	69da      	ldr	r2, [r3, #28]
 800070a:	4b40      	ldr	r3, [pc, #256]	; (800080c <HAL_UART_MspInit+0x128>)
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	0289      	lsls	r1, r1, #10
 8000710:	430a      	orrs	r2, r1
 8000712:	61da      	str	r2, [r3, #28]
 8000714:	4b3d      	ldr	r3, [pc, #244]	; (800080c <HAL_UART_MspInit+0x128>)
 8000716:	69da      	ldr	r2, [r3, #28]
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	029b      	lsls	r3, r3, #10
 800071c:	4013      	ands	r3, r2
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b3a      	ldr	r3, [pc, #232]	; (800080c <HAL_UART_MspInit+0x128>)
 8000724:	695a      	ldr	r2, [r3, #20]
 8000726:	4b39      	ldr	r3, [pc, #228]	; (800080c <HAL_UART_MspInit+0x128>)
 8000728:	2180      	movs	r1, #128	; 0x80
 800072a:	0289      	lsls	r1, r1, #10
 800072c:	430a      	orrs	r2, r1
 800072e:	615a      	str	r2, [r3, #20]
 8000730:	4b36      	ldr	r3, [pc, #216]	; (800080c <HAL_UART_MspInit+0x128>)
 8000732:	695a      	ldr	r2, [r3, #20]
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	029b      	lsls	r3, r3, #10
 8000738:	4013      	ands	r3, r2
 800073a:	617b      	str	r3, [r7, #20]
 800073c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800073e:	0021      	movs	r1, r4
 8000740:	187b      	adds	r3, r7, r1
 8000742:	220c      	movs	r2, #12
 8000744:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2202      	movs	r2, #2
 800074a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2201      	movs	r2, #1
 800075c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	187a      	adds	r2, r7, r1
 8000760:	2390      	movs	r3, #144	; 0x90
 8000762:	05db      	lsls	r3, r3, #23
 8000764:	0011      	movs	r1, r2
 8000766:	0018      	movs	r0, r3
 8000768:	f000 fa40 	bl	8000bec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800076c:	2200      	movs	r2, #0
 800076e:	2100      	movs	r1, #0
 8000770:	201c      	movs	r0, #28
 8000772:	f000 f98b 	bl	8000a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000776:	201c      	movs	r0, #28
 8000778:	f000 f99d 	bl	8000ab6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800077c:	e03f      	b.n	80007fe <HAL_UART_MspInit+0x11a>
  else if(uartHandle->Instance==USART3)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a23      	ldr	r2, [pc, #140]	; (8000810 <HAL_UART_MspInit+0x12c>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d13a      	bne.n	80007fe <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000788:	4b20      	ldr	r3, [pc, #128]	; (800080c <HAL_UART_MspInit+0x128>)
 800078a:	69da      	ldr	r2, [r3, #28]
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <HAL_UART_MspInit+0x128>)
 800078e:	2180      	movs	r1, #128	; 0x80
 8000790:	02c9      	lsls	r1, r1, #11
 8000792:	430a      	orrs	r2, r1
 8000794:	61da      	str	r2, [r3, #28]
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <HAL_UART_MspInit+0x128>)
 8000798:	69da      	ldr	r2, [r3, #28]
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	02db      	lsls	r3, r3, #11
 800079e:	4013      	ands	r3, r2
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <HAL_UART_MspInit+0x128>)
 80007a6:	695a      	ldr	r2, [r3, #20]
 80007a8:	4b18      	ldr	r3, [pc, #96]	; (800080c <HAL_UART_MspInit+0x128>)
 80007aa:	2180      	movs	r1, #128	; 0x80
 80007ac:	0309      	lsls	r1, r1, #12
 80007ae:	430a      	orrs	r2, r1
 80007b0:	615a      	str	r2, [r3, #20]
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <HAL_UART_MspInit+0x128>)
 80007b4:	695a      	ldr	r2, [r3, #20]
 80007b6:	2380      	movs	r3, #128	; 0x80
 80007b8:	031b      	lsls	r3, r3, #12
 80007ba:	4013      	ands	r3, r2
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007c0:	211c      	movs	r1, #28
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	22c0      	movs	r2, #192	; 0xc0
 80007c6:	0112      	lsls	r2, r2, #4
 80007c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	2202      	movs	r2, #2
 80007ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2203      	movs	r2, #3
 80007da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2201      	movs	r2, #1
 80007e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	4a0b      	ldr	r2, [pc, #44]	; (8000814 <HAL_UART_MspInit+0x130>)
 80007e6:	0019      	movs	r1, r3
 80007e8:	0010      	movs	r0, r2
 80007ea:	f000 f9ff 	bl	8000bec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	201d      	movs	r0, #29
 80007f4:	f000 f94a 	bl	8000a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 80007f8:	201d      	movs	r0, #29
 80007fa:	f000 f95c 	bl	8000ab6 <HAL_NVIC_EnableIRQ>
}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b00d      	add	sp, #52	; 0x34
 8000804:	bd90      	pop	{r4, r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	40004400 	.word	0x40004400
 800080c:	40021000 	.word	0x40021000
 8000810:	40004800 	.word	0x40004800
 8000814:	48000800 	.word	0x48000800

08000818 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000818:	480d      	ldr	r0, [pc, #52]	; (8000850 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800081a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800081c:	f7ff fefc 	bl	8000618 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000820:	480c      	ldr	r0, [pc, #48]	; (8000854 <LoopForever+0x6>)
  ldr r1, =_edata
 8000822:	490d      	ldr	r1, [pc, #52]	; (8000858 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000824:	4a0d      	ldr	r2, [pc, #52]	; (800085c <LoopForever+0xe>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000828:	e002      	b.n	8000830 <LoopCopyDataInit>

0800082a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800082c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082e:	3304      	adds	r3, #4

08000830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000834:	d3f9      	bcc.n	800082a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000836:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000838:	4c0a      	ldr	r4, [pc, #40]	; (8000864 <LoopForever+0x16>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800083c:	e001      	b.n	8000842 <LoopFillZerobss>

0800083e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000840:	3204      	adds	r2, #4

08000842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000844:	d3fb      	bcc.n	800083e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000846:	f002 fa69 	bl	8002d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800084a:	f7ff fd83 	bl	8000354 <main>

0800084e <LoopForever>:

LoopForever:
    b LoopForever
 800084e:	e7fe      	b.n	800084e <LoopForever>
  ldr   r0, =_estack
 8000850:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000858:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800085c:	080038e0 	.word	0x080038e0
  ldr r2, =_sbss
 8000860:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000864:	200001b4 	.word	0x200001b4

08000868 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000868:	e7fe      	b.n	8000868 <ADC1_COMP_IRQHandler>
	...

0800086c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <HAL_Init+0x24>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_Init+0x24>)
 8000876:	2110      	movs	r1, #16
 8000878:	430a      	orrs	r2, r1
 800087a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800087c:	2000      	movs	r0, #0
 800087e:	f000 f809 	bl	8000894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000882:	f7ff fdeb 	bl	800045c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000886:	2300      	movs	r3, #0
}
 8000888:	0018      	movs	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	40022000 	.word	0x40022000

08000894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <HAL_InitTick+0x5c>)
 800089e:	681c      	ldr	r4, [r3, #0]
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_InitTick+0x60>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	0019      	movs	r1, r3
 80008a6:	23fa      	movs	r3, #250	; 0xfa
 80008a8:	0098      	lsls	r0, r3, #2
 80008aa:	f7ff fc2b 	bl	8000104 <__udivsi3>
 80008ae:	0003      	movs	r3, r0
 80008b0:	0019      	movs	r1, r3
 80008b2:	0020      	movs	r0, r4
 80008b4:	f7ff fc26 	bl	8000104 <__udivsi3>
 80008b8:	0003      	movs	r3, r0
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 f90b 	bl	8000ad6 <HAL_SYSTICK_Config>
 80008c0:	1e03      	subs	r3, r0, #0
 80008c2:	d001      	beq.n	80008c8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008c4:	2301      	movs	r3, #1
 80008c6:	e00f      	b.n	80008e8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b03      	cmp	r3, #3
 80008cc:	d80b      	bhi.n	80008e6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	2301      	movs	r3, #1
 80008d2:	425b      	negs	r3, r3
 80008d4:	2200      	movs	r2, #0
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 f8d8 	bl	8000a8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_InitTick+0x64>)
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008e2:	2300      	movs	r3, #0
 80008e4:	e000      	b.n	80008e8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	0018      	movs	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b003      	add	sp, #12
 80008ee:	bd90      	pop	{r4, r7, pc}
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000008 	.word	0x20000008
 80008f8:	20000004 	.word	0x20000004

080008fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_IncTick+0x1c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	001a      	movs	r2, r3
 8000906:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_IncTick+0x20>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	18d2      	adds	r2, r2, r3
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <HAL_IncTick+0x20>)
 800090e:	601a      	str	r2, [r3, #0]
}
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	20000008 	.word	0x20000008
 800091c:	200001a0 	.word	0x200001a0

08000920 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  return uwTick;
 8000924:	4b02      	ldr	r3, [pc, #8]	; (8000930 <HAL_GetTick+0x10>)
 8000926:	681b      	ldr	r3, [r3, #0]
}
 8000928:	0018      	movs	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	200001a0 	.word	0x200001a0

08000934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	0002      	movs	r2, r0
 800093c:	1dfb      	adds	r3, r7, #7
 800093e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000940:	1dfb      	adds	r3, r7, #7
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b7f      	cmp	r3, #127	; 0x7f
 8000946:	d809      	bhi.n	800095c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	001a      	movs	r2, r3
 800094e:	231f      	movs	r3, #31
 8000950:	401a      	ands	r2, r3
 8000952:	4b04      	ldr	r3, [pc, #16]	; (8000964 <__NVIC_EnableIRQ+0x30>)
 8000954:	2101      	movs	r1, #1
 8000956:	4091      	lsls	r1, r2
 8000958:	000a      	movs	r2, r1
 800095a:	601a      	str	r2, [r3, #0]
  }
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	b002      	add	sp, #8
 8000962:	bd80      	pop	{r7, pc}
 8000964:	e000e100 	.word	0xe000e100

08000968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	0002      	movs	r2, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b7f      	cmp	r3, #127	; 0x7f
 800097c:	d828      	bhi.n	80009d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800097e:	4a2f      	ldr	r2, [pc, #188]	; (8000a3c <__NVIC_SetPriority+0xd4>)
 8000980:	1dfb      	adds	r3, r7, #7
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b25b      	sxtb	r3, r3
 8000986:	089b      	lsrs	r3, r3, #2
 8000988:	33c0      	adds	r3, #192	; 0xc0
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	589b      	ldr	r3, [r3, r2]
 800098e:	1dfa      	adds	r2, r7, #7
 8000990:	7812      	ldrb	r2, [r2, #0]
 8000992:	0011      	movs	r1, r2
 8000994:	2203      	movs	r2, #3
 8000996:	400a      	ands	r2, r1
 8000998:	00d2      	lsls	r2, r2, #3
 800099a:	21ff      	movs	r1, #255	; 0xff
 800099c:	4091      	lsls	r1, r2
 800099e:	000a      	movs	r2, r1
 80009a0:	43d2      	mvns	r2, r2
 80009a2:	401a      	ands	r2, r3
 80009a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	019b      	lsls	r3, r3, #6
 80009aa:	22ff      	movs	r2, #255	; 0xff
 80009ac:	401a      	ands	r2, r3
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	0018      	movs	r0, r3
 80009b4:	2303      	movs	r3, #3
 80009b6:	4003      	ands	r3, r0
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009bc:	481f      	ldr	r0, [pc, #124]	; (8000a3c <__NVIC_SetPriority+0xd4>)
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	b25b      	sxtb	r3, r3
 80009c4:	089b      	lsrs	r3, r3, #2
 80009c6:	430a      	orrs	r2, r1
 80009c8:	33c0      	adds	r3, #192	; 0xc0
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009ce:	e031      	b.n	8000a34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d0:	4a1b      	ldr	r2, [pc, #108]	; (8000a40 <__NVIC_SetPriority+0xd8>)
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	0019      	movs	r1, r3
 80009d8:	230f      	movs	r3, #15
 80009da:	400b      	ands	r3, r1
 80009dc:	3b08      	subs	r3, #8
 80009de:	089b      	lsrs	r3, r3, #2
 80009e0:	3306      	adds	r3, #6
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	18d3      	adds	r3, r2, r3
 80009e6:	3304      	adds	r3, #4
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	1dfa      	adds	r2, r7, #7
 80009ec:	7812      	ldrb	r2, [r2, #0]
 80009ee:	0011      	movs	r1, r2
 80009f0:	2203      	movs	r2, #3
 80009f2:	400a      	ands	r2, r1
 80009f4:	00d2      	lsls	r2, r2, #3
 80009f6:	21ff      	movs	r1, #255	; 0xff
 80009f8:	4091      	lsls	r1, r2
 80009fa:	000a      	movs	r2, r1
 80009fc:	43d2      	mvns	r2, r2
 80009fe:	401a      	ands	r2, r3
 8000a00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	019b      	lsls	r3, r3, #6
 8000a06:	22ff      	movs	r2, #255	; 0xff
 8000a08:	401a      	ands	r2, r3
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	0018      	movs	r0, r3
 8000a10:	2303      	movs	r3, #3
 8000a12:	4003      	ands	r3, r0
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a18:	4809      	ldr	r0, [pc, #36]	; (8000a40 <__NVIC_SetPriority+0xd8>)
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	001c      	movs	r4, r3
 8000a20:	230f      	movs	r3, #15
 8000a22:	4023      	ands	r3, r4
 8000a24:	3b08      	subs	r3, #8
 8000a26:	089b      	lsrs	r3, r3, #2
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	3306      	adds	r3, #6
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	18c3      	adds	r3, r0, r3
 8000a30:	3304      	adds	r3, #4
 8000a32:	601a      	str	r2, [r3, #0]
}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b003      	add	sp, #12
 8000a3a:	bd90      	pop	{r4, r7, pc}
 8000a3c:	e000e100 	.word	0xe000e100
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	1e5a      	subs	r2, r3, #1
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	045b      	lsls	r3, r3, #17
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d301      	bcc.n	8000a5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e010      	b.n	8000a7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <SysTick_Config+0x44>)
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	3a01      	subs	r2, #1
 8000a62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a64:	2301      	movs	r3, #1
 8000a66:	425b      	negs	r3, r3
 8000a68:	2103      	movs	r1, #3
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f7ff ff7c 	bl	8000968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <SysTick_Config+0x44>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <SysTick_Config+0x44>)
 8000a78:	2207      	movs	r2, #7
 8000a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	0018      	movs	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b002      	add	sp, #8
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	e000e010 	.word	0xe000e010

08000a8c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	210f      	movs	r1, #15
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	1c02      	adds	r2, r0, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b25b      	sxtb	r3, r3
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f7ff ff5d 	bl	8000968 <__NVIC_SetPriority>
}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b004      	add	sp, #16
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	0002      	movs	r2, r0
 8000abe:	1dfb      	adds	r3, r7, #7
 8000ac0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	b25b      	sxtb	r3, r3
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f7ff ff33 	bl	8000934 <__NVIC_EnableIRQ>
}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b002      	add	sp, #8
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f7ff ffaf 	bl	8000a44 <SysTick_Config>
 8000ae6:	0003      	movs	r3, r0
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b002      	add	sp, #8
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2221      	movs	r2, #33	; 0x21
 8000afc:	5c9b      	ldrb	r3, [r3, r2]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d008      	beq.n	8000b16 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2204      	movs	r2, #4
 8000b08:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2220      	movs	r2, #32
 8000b0e:	2100      	movs	r1, #0
 8000b10:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e020      	b.n	8000b58 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	210e      	movs	r1, #14
 8000b22:	438a      	bics	r2, r1
 8000b24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2101      	movs	r1, #1
 8000b32:	438a      	bics	r2, r1
 8000b34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b3e:	2101      	movs	r1, #1
 8000b40:	4091      	lsls	r1, r2
 8000b42:	000a      	movs	r2, r1
 8000b44:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2221      	movs	r2, #33	; 0x21
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2220      	movs	r2, #32
 8000b52:	2100      	movs	r1, #0
 8000b54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	0018      	movs	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b002      	add	sp, #8
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b68:	210f      	movs	r1, #15
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2221      	movs	r2, #33	; 0x21
 8000b74:	5c9b      	ldrb	r3, [r3, r2]
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d006      	beq.n	8000b8a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2204      	movs	r2, #4
 8000b80:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
 8000b88:	e028      	b.n	8000bdc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	210e      	movs	r1, #14
 8000b96:	438a      	bics	r2, r1
 8000b98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	438a      	bics	r2, r1
 8000ba8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	4091      	lsls	r1, r2
 8000bb6:	000a      	movs	r2, r1
 8000bb8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2221      	movs	r2, #33	; 0x21
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2220      	movs	r2, #32
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d004      	beq.n	8000bdc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	0010      	movs	r0, r2
 8000bda:	4798      	blx	r3
    }
  }
  return status;
 8000bdc:	230f      	movs	r3, #15
 8000bde:	18fb      	adds	r3, r7, r3
 8000be0:	781b      	ldrb	r3, [r3, #0]
}
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b004      	add	sp, #16
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bfa:	e155      	b.n	8000ea8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2101      	movs	r1, #1
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	4091      	lsls	r1, r2
 8000c06:	000a      	movs	r2, r1
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d100      	bne.n	8000c14 <HAL_GPIO_Init+0x28>
 8000c12:	e146      	b.n	8000ea2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	2203      	movs	r2, #3
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d005      	beq.n	8000c2c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	2203      	movs	r2, #3
 8000c26:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d130      	bne.n	8000c8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	2203      	movs	r2, #3
 8000c38:	409a      	lsls	r2, r3
 8000c3a:	0013      	movs	r3, r2
 8000c3c:	43da      	mvns	r2, r3
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	68da      	ldr	r2, [r3, #12]
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	409a      	lsls	r2, r3
 8000c4e:	0013      	movs	r3, r2
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c62:	2201      	movs	r2, #1
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
 8000c68:	0013      	movs	r3, r2
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	091b      	lsrs	r3, r3, #4
 8000c78:	2201      	movs	r2, #1
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	409a      	lsls	r2, r3
 8000c80:	0013      	movs	r3, r2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2203      	movs	r2, #3
 8000c94:	4013      	ands	r3, r2
 8000c96:	2b03      	cmp	r3, #3
 8000c98:	d017      	beq.n	8000cca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	0013      	movs	r3, r2
 8000caa:	43da      	mvns	r2, r3
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	0013      	movs	r3, r2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	2203      	movs	r2, #3
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d123      	bne.n	8000d1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	08da      	lsrs	r2, r3, #3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	3208      	adds	r2, #8
 8000cde:	0092      	lsls	r2, r2, #2
 8000ce0:	58d3      	ldr	r3, [r2, r3]
 8000ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	2207      	movs	r2, #7
 8000ce8:	4013      	ands	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	220f      	movs	r2, #15
 8000cee:	409a      	lsls	r2, r3
 8000cf0:	0013      	movs	r3, r2
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	691a      	ldr	r2, [r3, #16]
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	2107      	movs	r1, #7
 8000d02:	400b      	ands	r3, r1
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	409a      	lsls	r2, r3
 8000d08:	0013      	movs	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	08da      	lsrs	r2, r3, #3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3208      	adds	r2, #8
 8000d18:	0092      	lsls	r2, r2, #2
 8000d1a:	6939      	ldr	r1, [r7, #16]
 8000d1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	2203      	movs	r2, #3
 8000d2a:	409a      	lsls	r2, r3
 8000d2c:	0013      	movs	r3, r2
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	401a      	ands	r2, r3
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	409a      	lsls	r2, r3
 8000d44:	0013      	movs	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	23c0      	movs	r3, #192	; 0xc0
 8000d58:	029b      	lsls	r3, r3, #10
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	d100      	bne.n	8000d60 <HAL_GPIO_Init+0x174>
 8000d5e:	e0a0      	b.n	8000ea2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d60:	4b57      	ldr	r3, [pc, #348]	; (8000ec0 <HAL_GPIO_Init+0x2d4>)
 8000d62:	699a      	ldr	r2, [r3, #24]
 8000d64:	4b56      	ldr	r3, [pc, #344]	; (8000ec0 <HAL_GPIO_Init+0x2d4>)
 8000d66:	2101      	movs	r1, #1
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	619a      	str	r2, [r3, #24]
 8000d6c:	4b54      	ldr	r3, [pc, #336]	; (8000ec0 <HAL_GPIO_Init+0x2d4>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	2201      	movs	r2, #1
 8000d72:	4013      	ands	r3, r2
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d78:	4a52      	ldr	r2, [pc, #328]	; (8000ec4 <HAL_GPIO_Init+0x2d8>)
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	089b      	lsrs	r3, r3, #2
 8000d7e:	3302      	adds	r3, #2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	589b      	ldr	r3, [r3, r2]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	2203      	movs	r2, #3
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	220f      	movs	r2, #15
 8000d90:	409a      	lsls	r2, r3
 8000d92:	0013      	movs	r3, r2
 8000d94:	43da      	mvns	r2, r3
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	2390      	movs	r3, #144	; 0x90
 8000da0:	05db      	lsls	r3, r3, #23
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d019      	beq.n	8000dda <HAL_GPIO_Init+0x1ee>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a47      	ldr	r2, [pc, #284]	; (8000ec8 <HAL_GPIO_Init+0x2dc>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d013      	beq.n	8000dd6 <HAL_GPIO_Init+0x1ea>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a46      	ldr	r2, [pc, #280]	; (8000ecc <HAL_GPIO_Init+0x2e0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d00d      	beq.n	8000dd2 <HAL_GPIO_Init+0x1e6>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a45      	ldr	r2, [pc, #276]	; (8000ed0 <HAL_GPIO_Init+0x2e4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d007      	beq.n	8000dce <HAL_GPIO_Init+0x1e2>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a44      	ldr	r2, [pc, #272]	; (8000ed4 <HAL_GPIO_Init+0x2e8>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d101      	bne.n	8000dca <HAL_GPIO_Init+0x1de>
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	e008      	b.n	8000ddc <HAL_GPIO_Init+0x1f0>
 8000dca:	2305      	movs	r3, #5
 8000dcc:	e006      	b.n	8000ddc <HAL_GPIO_Init+0x1f0>
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e004      	b.n	8000ddc <HAL_GPIO_Init+0x1f0>
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	e002      	b.n	8000ddc <HAL_GPIO_Init+0x1f0>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e000      	b.n	8000ddc <HAL_GPIO_Init+0x1f0>
 8000dda:	2300      	movs	r3, #0
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	2103      	movs	r1, #3
 8000de0:	400a      	ands	r2, r1
 8000de2:	0092      	lsls	r2, r2, #2
 8000de4:	4093      	lsls	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dec:	4935      	ldr	r1, [pc, #212]	; (8000ec4 <HAL_GPIO_Init+0x2d8>)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	089b      	lsrs	r3, r3, #2
 8000df2:	3302      	adds	r3, #2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dfa:	4b37      	ldr	r3, [pc, #220]	; (8000ed8 <HAL_GPIO_Init+0x2ec>)
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	43da      	mvns	r2, r3
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	035b      	lsls	r3, r3, #13
 8000e12:	4013      	ands	r3, r2
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e1e:	4b2e      	ldr	r3, [pc, #184]	; (8000ed8 <HAL_GPIO_Init+0x2ec>)
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e24:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <HAL_GPIO_Init+0x2ec>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	43da      	mvns	r2, r3
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	039b      	lsls	r3, r3, #14
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	d003      	beq.n	8000e48 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e48:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <HAL_GPIO_Init+0x2ec>)
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000e4e:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <HAL_GPIO_Init+0x2ec>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	43da      	mvns	r2, r3
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	2380      	movs	r3, #128	; 0x80
 8000e64:	029b      	lsls	r3, r3, #10
 8000e66:	4013      	ands	r3, r2
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_GPIO_Init+0x2ec>)
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <HAL_GPIO_Init+0x2ec>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	43da      	mvns	r2, r3
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	025b      	lsls	r3, r3, #9
 8000e90:	4013      	ands	r3, r2
 8000e92:	d003      	beq.n	8000e9c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_GPIO_Init+0x2ec>)
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	40da      	lsrs	r2, r3
 8000eb0:	1e13      	subs	r3, r2, #0
 8000eb2:	d000      	beq.n	8000eb6 <HAL_GPIO_Init+0x2ca>
 8000eb4:	e6a2      	b.n	8000bfc <HAL_GPIO_Init+0x10>
  } 
}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b006      	add	sp, #24
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010000 	.word	0x40010000
 8000ec8:	48000400 	.word	0x48000400
 8000ecc:	48000800 	.word	0x48000800
 8000ed0:	48000c00 	.word	0x48000c00
 8000ed4:	48001000 	.word	0x48001000
 8000ed8:	40010400 	.word	0x40010400

08000edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	0008      	movs	r0, r1
 8000ee6:	0011      	movs	r1, r2
 8000ee8:	1cbb      	adds	r3, r7, #2
 8000eea:	1c02      	adds	r2, r0, #0
 8000eec:	801a      	strh	r2, [r3, #0]
 8000eee:	1c7b      	adds	r3, r7, #1
 8000ef0:	1c0a      	adds	r2, r1, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ef4:	1c7b      	adds	r3, r7, #1
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d004      	beq.n	8000f06 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000efc:	1cbb      	adds	r3, r7, #2
 8000efe:	881a      	ldrh	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f04:	e003      	b.n	8000f0e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f06:	1cbb      	adds	r3, r7, #2
 8000f08:	881a      	ldrh	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b002      	add	sp, #8
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b084      	sub	sp, #16
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	000a      	movs	r2, r1
 8000f20:	1cbb      	adds	r3, r7, #2
 8000f22:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f2a:	1cbb      	adds	r3, r7, #2
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	4013      	ands	r3, r2
 8000f32:	041a      	lsls	r2, r3, #16
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	1cb9      	adds	r1, r7, #2
 8000f3a:	8809      	ldrh	r1, [r1, #0]
 8000f3c:	400b      	ands	r3, r1
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	619a      	str	r2, [r3, #24]
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b004      	add	sp, #16
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	0002      	movs	r2, r0
 8000f54:	1dbb      	adds	r3, r7, #6
 8000f56:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	1dba      	adds	r2, r7, #6
 8000f5e:	8812      	ldrh	r2, [r2, #0]
 8000f60:	4013      	ands	r3, r2
 8000f62:	d008      	beq.n	8000f76 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000f66:	1dba      	adds	r2, r7, #6
 8000f68:	8812      	ldrh	r2, [r2, #0]
 8000f6a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f6c:	1dbb      	adds	r3, r7, #6
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	0018      	movs	r0, r3
 8000f72:	f7ff f9c5 	bl	8000300 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b002      	add	sp, #8
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	40010400 	.word	0x40010400

08000f84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d102      	bne.n	8000f98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	f000 fb76 	bl	8001684 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	d100      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x20>
 8000fa2:	e08e      	b.n	80010c2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fa4:	4bc5      	ldr	r3, [pc, #788]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	220c      	movs	r2, #12
 8000faa:	4013      	ands	r3, r2
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	d00e      	beq.n	8000fce <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fb0:	4bc2      	ldr	r3, [pc, #776]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	220c      	movs	r2, #12
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	2b08      	cmp	r3, #8
 8000fba:	d117      	bne.n	8000fec <HAL_RCC_OscConfig+0x68>
 8000fbc:	4bbf      	ldr	r3, [pc, #764]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	23c0      	movs	r3, #192	; 0xc0
 8000fc2:	025b      	lsls	r3, r3, #9
 8000fc4:	401a      	ands	r2, r3
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	025b      	lsls	r3, r3, #9
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d10e      	bne.n	8000fec <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fce:	4bbb      	ldr	r3, [pc, #748]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	2380      	movs	r3, #128	; 0x80
 8000fd4:	029b      	lsls	r3, r3, #10
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	d100      	bne.n	8000fdc <HAL_RCC_OscConfig+0x58>
 8000fda:	e071      	b.n	80010c0 <HAL_RCC_OscConfig+0x13c>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d000      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x62>
 8000fe4:	e06c      	b.n	80010c0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	f000 fb4c 	bl	8001684 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d107      	bne.n	8001004 <HAL_RCC_OscConfig+0x80>
 8000ff4:	4bb1      	ldr	r3, [pc, #708]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4bb0      	ldr	r3, [pc, #704]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 8000ffa:	2180      	movs	r1, #128	; 0x80
 8000ffc:	0249      	lsls	r1, r1, #9
 8000ffe:	430a      	orrs	r2, r1
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	e02f      	b.n	8001064 <HAL_RCC_OscConfig+0xe0>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d10c      	bne.n	8001026 <HAL_RCC_OscConfig+0xa2>
 800100c:	4bab      	ldr	r3, [pc, #684]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4baa      	ldr	r3, [pc, #680]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 8001012:	49ab      	ldr	r1, [pc, #684]	; (80012c0 <HAL_RCC_OscConfig+0x33c>)
 8001014:	400a      	ands	r2, r1
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	4ba8      	ldr	r3, [pc, #672]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4ba7      	ldr	r3, [pc, #668]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 800101e:	49a9      	ldr	r1, [pc, #676]	; (80012c4 <HAL_RCC_OscConfig+0x340>)
 8001020:	400a      	ands	r2, r1
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	e01e      	b.n	8001064 <HAL_RCC_OscConfig+0xe0>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b05      	cmp	r3, #5
 800102c:	d10e      	bne.n	800104c <HAL_RCC_OscConfig+0xc8>
 800102e:	4ba3      	ldr	r3, [pc, #652]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	4ba2      	ldr	r3, [pc, #648]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	02c9      	lsls	r1, r1, #11
 8001038:	430a      	orrs	r2, r1
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	4b9f      	ldr	r3, [pc, #636]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b9e      	ldr	r3, [pc, #632]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 8001042:	2180      	movs	r1, #128	; 0x80
 8001044:	0249      	lsls	r1, r1, #9
 8001046:	430a      	orrs	r2, r1
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	e00b      	b.n	8001064 <HAL_RCC_OscConfig+0xe0>
 800104c:	4b9b      	ldr	r3, [pc, #620]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b9a      	ldr	r3, [pc, #616]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 8001052:	499b      	ldr	r1, [pc, #620]	; (80012c0 <HAL_RCC_OscConfig+0x33c>)
 8001054:	400a      	ands	r2, r1
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	4b98      	ldr	r3, [pc, #608]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b97      	ldr	r3, [pc, #604]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 800105e:	4999      	ldr	r1, [pc, #612]	; (80012c4 <HAL_RCC_OscConfig+0x340>)
 8001060:	400a      	ands	r2, r1
 8001062:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d014      	beq.n	8001096 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106c:	f7ff fc58 	bl	8000920 <HAL_GetTick>
 8001070:	0003      	movs	r3, r0
 8001072:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001074:	e008      	b.n	8001088 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001076:	f7ff fc53 	bl	8000920 <HAL_GetTick>
 800107a:	0002      	movs	r2, r0
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b64      	cmp	r3, #100	; 0x64
 8001082:	d901      	bls.n	8001088 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e2fd      	b.n	8001684 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001088:	4b8c      	ldr	r3, [pc, #560]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	029b      	lsls	r3, r3, #10
 8001090:	4013      	ands	r3, r2
 8001092:	d0f0      	beq.n	8001076 <HAL_RCC_OscConfig+0xf2>
 8001094:	e015      	b.n	80010c2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001096:	f7ff fc43 	bl	8000920 <HAL_GetTick>
 800109a:	0003      	movs	r3, r0
 800109c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a0:	f7ff fc3e 	bl	8000920 <HAL_GetTick>
 80010a4:	0002      	movs	r2, r0
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b64      	cmp	r3, #100	; 0x64
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e2e8      	b.n	8001684 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010b2:	4b82      	ldr	r3, [pc, #520]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	029b      	lsls	r3, r3, #10
 80010ba:	4013      	ands	r3, r2
 80010bc:	d1f0      	bne.n	80010a0 <HAL_RCC_OscConfig+0x11c>
 80010be:	e000      	b.n	80010c2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2202      	movs	r2, #2
 80010c8:	4013      	ands	r3, r2
 80010ca:	d100      	bne.n	80010ce <HAL_RCC_OscConfig+0x14a>
 80010cc:	e06c      	b.n	80011a8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010ce:	4b7b      	ldr	r3, [pc, #492]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	220c      	movs	r2, #12
 80010d4:	4013      	ands	r3, r2
 80010d6:	d00e      	beq.n	80010f6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010d8:	4b78      	ldr	r3, [pc, #480]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	220c      	movs	r2, #12
 80010de:	4013      	ands	r3, r2
 80010e0:	2b08      	cmp	r3, #8
 80010e2:	d11f      	bne.n	8001124 <HAL_RCC_OscConfig+0x1a0>
 80010e4:	4b75      	ldr	r3, [pc, #468]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	23c0      	movs	r3, #192	; 0xc0
 80010ea:	025b      	lsls	r3, r3, #9
 80010ec:	401a      	ands	r2, r3
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d116      	bne.n	8001124 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f6:	4b71      	ldr	r3, [pc, #452]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2202      	movs	r2, #2
 80010fc:	4013      	ands	r3, r2
 80010fe:	d005      	beq.n	800110c <HAL_RCC_OscConfig+0x188>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d001      	beq.n	800110c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e2bb      	b.n	8001684 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110c:	4b6b      	ldr	r3, [pc, #428]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	22f8      	movs	r2, #248	; 0xf8
 8001112:	4393      	bics	r3, r2
 8001114:	0019      	movs	r1, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	00da      	lsls	r2, r3, #3
 800111c:	4b67      	ldr	r3, [pc, #412]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 800111e:	430a      	orrs	r2, r1
 8001120:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001122:	e041      	b.n	80011a8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d024      	beq.n	8001176 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800112c:	4b63      	ldr	r3, [pc, #396]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b62      	ldr	r3, [pc, #392]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 8001132:	2101      	movs	r1, #1
 8001134:	430a      	orrs	r2, r1
 8001136:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001138:	f7ff fbf2 	bl	8000920 <HAL_GetTick>
 800113c:	0003      	movs	r3, r0
 800113e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001140:	e008      	b.n	8001154 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001142:	f7ff fbed 	bl	8000920 <HAL_GetTick>
 8001146:	0002      	movs	r2, r0
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e297      	b.n	8001684 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001154:	4b59      	ldr	r3, [pc, #356]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2202      	movs	r2, #2
 800115a:	4013      	ands	r3, r2
 800115c:	d0f1      	beq.n	8001142 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115e:	4b57      	ldr	r3, [pc, #348]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	22f8      	movs	r2, #248	; 0xf8
 8001164:	4393      	bics	r3, r2
 8001166:	0019      	movs	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	00da      	lsls	r2, r3, #3
 800116e:	4b53      	ldr	r3, [pc, #332]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 8001170:	430a      	orrs	r2, r1
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	e018      	b.n	80011a8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001176:	4b51      	ldr	r3, [pc, #324]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4b50      	ldr	r3, [pc, #320]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 800117c:	2101      	movs	r1, #1
 800117e:	438a      	bics	r2, r1
 8001180:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001182:	f7ff fbcd 	bl	8000920 <HAL_GetTick>
 8001186:	0003      	movs	r3, r0
 8001188:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800118c:	f7ff fbc8 	bl	8000920 <HAL_GetTick>
 8001190:	0002      	movs	r2, r0
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e272      	b.n	8001684 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119e:	4b47      	ldr	r3, [pc, #284]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2202      	movs	r2, #2
 80011a4:	4013      	ands	r3, r2
 80011a6:	d1f1      	bne.n	800118c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2208      	movs	r2, #8
 80011ae:	4013      	ands	r3, r2
 80011b0:	d036      	beq.n	8001220 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d019      	beq.n	80011ee <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ba:	4b40      	ldr	r3, [pc, #256]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 80011bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011be:	4b3f      	ldr	r3, [pc, #252]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 80011c0:	2101      	movs	r1, #1
 80011c2:	430a      	orrs	r2, r1
 80011c4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c6:	f7ff fbab 	bl	8000920 <HAL_GetTick>
 80011ca:	0003      	movs	r3, r0
 80011cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d0:	f7ff fba6 	bl	8000920 <HAL_GetTick>
 80011d4:	0002      	movs	r2, r0
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e250      	b.n	8001684 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011e2:	4b36      	ldr	r3, [pc, #216]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 80011e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e6:	2202      	movs	r2, #2
 80011e8:	4013      	ands	r3, r2
 80011ea:	d0f1      	beq.n	80011d0 <HAL_RCC_OscConfig+0x24c>
 80011ec:	e018      	b.n	8001220 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ee:	4b33      	ldr	r3, [pc, #204]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 80011f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011f2:	4b32      	ldr	r3, [pc, #200]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 80011f4:	2101      	movs	r1, #1
 80011f6:	438a      	bics	r2, r1
 80011f8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fa:	f7ff fb91 	bl	8000920 <HAL_GetTick>
 80011fe:	0003      	movs	r3, r0
 8001200:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001204:	f7ff fb8c 	bl	8000920 <HAL_GetTick>
 8001208:	0002      	movs	r2, r0
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e236      	b.n	8001684 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001216:	4b29      	ldr	r3, [pc, #164]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	2202      	movs	r2, #2
 800121c:	4013      	ands	r3, r2
 800121e:	d1f1      	bne.n	8001204 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2204      	movs	r2, #4
 8001226:	4013      	ands	r3, r2
 8001228:	d100      	bne.n	800122c <HAL_RCC_OscConfig+0x2a8>
 800122a:	e0b5      	b.n	8001398 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800122c:	201f      	movs	r0, #31
 800122e:	183b      	adds	r3, r7, r0
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001234:	4b21      	ldr	r3, [pc, #132]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 8001236:	69da      	ldr	r2, [r3, #28]
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	055b      	lsls	r3, r3, #21
 800123c:	4013      	ands	r3, r2
 800123e:	d110      	bne.n	8001262 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 8001242:	69da      	ldr	r2, [r3, #28]
 8001244:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 8001246:	2180      	movs	r1, #128	; 0x80
 8001248:	0549      	lsls	r1, r1, #21
 800124a:	430a      	orrs	r2, r1
 800124c:	61da      	str	r2, [r3, #28]
 800124e:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 8001250:	69da      	ldr	r2, [r3, #28]
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	055b      	lsls	r3, r3, #21
 8001256:	4013      	ands	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800125c:	183b      	adds	r3, r7, r0
 800125e:	2201      	movs	r2, #1
 8001260:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_RCC_OscConfig+0x344>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	2380      	movs	r3, #128	; 0x80
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4013      	ands	r3, r2
 800126c:	d11a      	bne.n	80012a4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <HAL_RCC_OscConfig+0x344>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_RCC_OscConfig+0x344>)
 8001274:	2180      	movs	r1, #128	; 0x80
 8001276:	0049      	lsls	r1, r1, #1
 8001278:	430a      	orrs	r2, r1
 800127a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800127c:	f7ff fb50 	bl	8000920 <HAL_GetTick>
 8001280:	0003      	movs	r3, r0
 8001282:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001286:	f7ff fb4b 	bl	8000920 <HAL_GetTick>
 800128a:	0002      	movs	r2, r0
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b64      	cmp	r3, #100	; 0x64
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e1f5      	b.n	8001684 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_RCC_OscConfig+0x344>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4013      	ands	r3, r2
 80012a2:	d0f0      	beq.n	8001286 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d10f      	bne.n	80012cc <HAL_RCC_OscConfig+0x348>
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 80012ae:	6a1a      	ldr	r2, [r3, #32]
 80012b0:	4b02      	ldr	r3, [pc, #8]	; (80012bc <HAL_RCC_OscConfig+0x338>)
 80012b2:	2101      	movs	r1, #1
 80012b4:	430a      	orrs	r2, r1
 80012b6:	621a      	str	r2, [r3, #32]
 80012b8:	e036      	b.n	8001328 <HAL_RCC_OscConfig+0x3a4>
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	40021000 	.word	0x40021000
 80012c0:	fffeffff 	.word	0xfffeffff
 80012c4:	fffbffff 	.word	0xfffbffff
 80012c8:	40007000 	.word	0x40007000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d10c      	bne.n	80012ee <HAL_RCC_OscConfig+0x36a>
 80012d4:	4bca      	ldr	r3, [pc, #808]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80012d6:	6a1a      	ldr	r2, [r3, #32]
 80012d8:	4bc9      	ldr	r3, [pc, #804]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80012da:	2101      	movs	r1, #1
 80012dc:	438a      	bics	r2, r1
 80012de:	621a      	str	r2, [r3, #32]
 80012e0:	4bc7      	ldr	r3, [pc, #796]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80012e2:	6a1a      	ldr	r2, [r3, #32]
 80012e4:	4bc6      	ldr	r3, [pc, #792]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80012e6:	2104      	movs	r1, #4
 80012e8:	438a      	bics	r2, r1
 80012ea:	621a      	str	r2, [r3, #32]
 80012ec:	e01c      	b.n	8001328 <HAL_RCC_OscConfig+0x3a4>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	2b05      	cmp	r3, #5
 80012f4:	d10c      	bne.n	8001310 <HAL_RCC_OscConfig+0x38c>
 80012f6:	4bc2      	ldr	r3, [pc, #776]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80012f8:	6a1a      	ldr	r2, [r3, #32]
 80012fa:	4bc1      	ldr	r3, [pc, #772]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80012fc:	2104      	movs	r1, #4
 80012fe:	430a      	orrs	r2, r1
 8001300:	621a      	str	r2, [r3, #32]
 8001302:	4bbf      	ldr	r3, [pc, #764]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 8001304:	6a1a      	ldr	r2, [r3, #32]
 8001306:	4bbe      	ldr	r3, [pc, #760]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 8001308:	2101      	movs	r1, #1
 800130a:	430a      	orrs	r2, r1
 800130c:	621a      	str	r2, [r3, #32]
 800130e:	e00b      	b.n	8001328 <HAL_RCC_OscConfig+0x3a4>
 8001310:	4bbb      	ldr	r3, [pc, #748]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 8001312:	6a1a      	ldr	r2, [r3, #32]
 8001314:	4bba      	ldr	r3, [pc, #744]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 8001316:	2101      	movs	r1, #1
 8001318:	438a      	bics	r2, r1
 800131a:	621a      	str	r2, [r3, #32]
 800131c:	4bb8      	ldr	r3, [pc, #736]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 800131e:	6a1a      	ldr	r2, [r3, #32]
 8001320:	4bb7      	ldr	r3, [pc, #732]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 8001322:	2104      	movs	r1, #4
 8001324:	438a      	bics	r2, r1
 8001326:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d014      	beq.n	800135a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001330:	f7ff faf6 	bl	8000920 <HAL_GetTick>
 8001334:	0003      	movs	r3, r0
 8001336:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001338:	e009      	b.n	800134e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800133a:	f7ff faf1 	bl	8000920 <HAL_GetTick>
 800133e:	0002      	movs	r2, r0
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	4aaf      	ldr	r2, [pc, #700]	; (8001604 <HAL_RCC_OscConfig+0x680>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e19a      	b.n	8001684 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800134e:	4bac      	ldr	r3, [pc, #688]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	2202      	movs	r2, #2
 8001354:	4013      	ands	r3, r2
 8001356:	d0f0      	beq.n	800133a <HAL_RCC_OscConfig+0x3b6>
 8001358:	e013      	b.n	8001382 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135a:	f7ff fae1 	bl	8000920 <HAL_GetTick>
 800135e:	0003      	movs	r3, r0
 8001360:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001362:	e009      	b.n	8001378 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001364:	f7ff fadc 	bl	8000920 <HAL_GetTick>
 8001368:	0002      	movs	r2, r0
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	4aa5      	ldr	r2, [pc, #660]	; (8001604 <HAL_RCC_OscConfig+0x680>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e185      	b.n	8001684 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001378:	4ba1      	ldr	r3, [pc, #644]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	2202      	movs	r2, #2
 800137e:	4013      	ands	r3, r2
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001382:	231f      	movs	r3, #31
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d105      	bne.n	8001398 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800138c:	4b9c      	ldr	r3, [pc, #624]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 800138e:	69da      	ldr	r2, [r3, #28]
 8001390:	4b9b      	ldr	r3, [pc, #620]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 8001392:	499d      	ldr	r1, [pc, #628]	; (8001608 <HAL_RCC_OscConfig+0x684>)
 8001394:	400a      	ands	r2, r1
 8001396:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2210      	movs	r2, #16
 800139e:	4013      	ands	r3, r2
 80013a0:	d063      	beq.n	800146a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d12a      	bne.n	8001400 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013aa:	4b95      	ldr	r3, [pc, #596]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80013ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ae:	4b94      	ldr	r3, [pc, #592]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80013b0:	2104      	movs	r1, #4
 80013b2:	430a      	orrs	r2, r1
 80013b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80013b6:	4b92      	ldr	r3, [pc, #584]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80013b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ba:	4b91      	ldr	r3, [pc, #580]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80013bc:	2101      	movs	r1, #1
 80013be:	430a      	orrs	r2, r1
 80013c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c2:	f7ff faad 	bl	8000920 <HAL_GetTick>
 80013c6:	0003      	movs	r3, r0
 80013c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013cc:	f7ff faa8 	bl	8000920 <HAL_GetTick>
 80013d0:	0002      	movs	r2, r0
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e152      	b.n	8001684 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013de:	4b88      	ldr	r3, [pc, #544]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80013e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e2:	2202      	movs	r2, #2
 80013e4:	4013      	ands	r3, r2
 80013e6:	d0f1      	beq.n	80013cc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013e8:	4b85      	ldr	r3, [pc, #532]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80013ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ec:	22f8      	movs	r2, #248	; 0xf8
 80013ee:	4393      	bics	r3, r2
 80013f0:	0019      	movs	r1, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	00da      	lsls	r2, r3, #3
 80013f8:	4b81      	ldr	r3, [pc, #516]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80013fa:	430a      	orrs	r2, r1
 80013fc:	635a      	str	r2, [r3, #52]	; 0x34
 80013fe:	e034      	b.n	800146a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	3305      	adds	r3, #5
 8001406:	d111      	bne.n	800142c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001408:	4b7d      	ldr	r3, [pc, #500]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 800140a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800140c:	4b7c      	ldr	r3, [pc, #496]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 800140e:	2104      	movs	r1, #4
 8001410:	438a      	bics	r2, r1
 8001412:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001414:	4b7a      	ldr	r3, [pc, #488]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 8001416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001418:	22f8      	movs	r2, #248	; 0xf8
 800141a:	4393      	bics	r3, r2
 800141c:	0019      	movs	r1, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	00da      	lsls	r2, r3, #3
 8001424:	4b76      	ldr	r3, [pc, #472]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 8001426:	430a      	orrs	r2, r1
 8001428:	635a      	str	r2, [r3, #52]	; 0x34
 800142a:	e01e      	b.n	800146a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800142c:	4b74      	ldr	r3, [pc, #464]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 800142e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001430:	4b73      	ldr	r3, [pc, #460]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 8001432:	2104      	movs	r1, #4
 8001434:	430a      	orrs	r2, r1
 8001436:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001438:	4b71      	ldr	r3, [pc, #452]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 800143a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800143c:	4b70      	ldr	r3, [pc, #448]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 800143e:	2101      	movs	r1, #1
 8001440:	438a      	bics	r2, r1
 8001442:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001444:	f7ff fa6c 	bl	8000920 <HAL_GetTick>
 8001448:	0003      	movs	r3, r0
 800144a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800144e:	f7ff fa67 	bl	8000920 <HAL_GetTick>
 8001452:	0002      	movs	r2, r0
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e111      	b.n	8001684 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001460:	4b67      	ldr	r3, [pc, #412]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 8001462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001464:	2202      	movs	r2, #2
 8001466:	4013      	ands	r3, r2
 8001468:	d1f1      	bne.n	800144e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2220      	movs	r2, #32
 8001470:	4013      	ands	r3, r2
 8001472:	d05c      	beq.n	800152e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001474:	4b62      	ldr	r3, [pc, #392]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	220c      	movs	r2, #12
 800147a:	4013      	ands	r3, r2
 800147c:	2b0c      	cmp	r3, #12
 800147e:	d00e      	beq.n	800149e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001480:	4b5f      	ldr	r3, [pc, #380]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	220c      	movs	r2, #12
 8001486:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001488:	2b08      	cmp	r3, #8
 800148a:	d114      	bne.n	80014b6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800148c:	4b5c      	ldr	r3, [pc, #368]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	23c0      	movs	r3, #192	; 0xc0
 8001492:	025b      	lsls	r3, r3, #9
 8001494:	401a      	ands	r2, r3
 8001496:	23c0      	movs	r3, #192	; 0xc0
 8001498:	025b      	lsls	r3, r3, #9
 800149a:	429a      	cmp	r2, r3
 800149c:	d10b      	bne.n	80014b6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800149e:	4b58      	ldr	r3, [pc, #352]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80014a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	029b      	lsls	r3, r3, #10
 80014a6:	4013      	ands	r3, r2
 80014a8:	d040      	beq.n	800152c <HAL_RCC_OscConfig+0x5a8>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d03c      	beq.n	800152c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e0e6      	b.n	8001684 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d01b      	beq.n	80014f6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80014be:	4b50      	ldr	r3, [pc, #320]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80014c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014c2:	4b4f      	ldr	r3, [pc, #316]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80014c4:	2180      	movs	r1, #128	; 0x80
 80014c6:	0249      	lsls	r1, r1, #9
 80014c8:	430a      	orrs	r2, r1
 80014ca:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fa28 	bl	8000920 <HAL_GetTick>
 80014d0:	0003      	movs	r3, r0
 80014d2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014d6:	f7ff fa23 	bl	8000920 <HAL_GetTick>
 80014da:	0002      	movs	r2, r0
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e0cd      	b.n	8001684 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80014e8:	4b45      	ldr	r3, [pc, #276]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80014ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	029b      	lsls	r3, r3, #10
 80014f0:	4013      	ands	r3, r2
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x552>
 80014f4:	e01b      	b.n	800152e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80014f6:	4b42      	ldr	r3, [pc, #264]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80014f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014fa:	4b41      	ldr	r3, [pc, #260]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80014fc:	4943      	ldr	r1, [pc, #268]	; (800160c <HAL_RCC_OscConfig+0x688>)
 80014fe:	400a      	ands	r2, r1
 8001500:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001502:	f7ff fa0d 	bl	8000920 <HAL_GetTick>
 8001506:	0003      	movs	r3, r0
 8001508:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800150c:	f7ff fa08 	bl	8000920 <HAL_GetTick>
 8001510:	0002      	movs	r2, r0
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e0b2      	b.n	8001684 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800151e:	4b38      	ldr	r3, [pc, #224]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 8001520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001522:	2380      	movs	r3, #128	; 0x80
 8001524:	029b      	lsls	r3, r3, #10
 8001526:	4013      	ands	r3, r2
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x588>
 800152a:	e000      	b.n	800152e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800152c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	2b00      	cmp	r3, #0
 8001534:	d100      	bne.n	8001538 <HAL_RCC_OscConfig+0x5b4>
 8001536:	e0a4      	b.n	8001682 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001538:	4b31      	ldr	r3, [pc, #196]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	220c      	movs	r2, #12
 800153e:	4013      	ands	r3, r2
 8001540:	2b08      	cmp	r3, #8
 8001542:	d100      	bne.n	8001546 <HAL_RCC_OscConfig+0x5c2>
 8001544:	e078      	b.n	8001638 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154a:	2b02      	cmp	r3, #2
 800154c:	d14c      	bne.n	80015e8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800154e:	4b2c      	ldr	r3, [pc, #176]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	4b2b      	ldr	r3, [pc, #172]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 8001554:	492e      	ldr	r1, [pc, #184]	; (8001610 <HAL_RCC_OscConfig+0x68c>)
 8001556:	400a      	ands	r2, r1
 8001558:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155a:	f7ff f9e1 	bl	8000920 <HAL_GetTick>
 800155e:	0003      	movs	r3, r0
 8001560:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001564:	f7ff f9dc 	bl	8000920 <HAL_GetTick>
 8001568:	0002      	movs	r2, r0
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e086      	b.n	8001684 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001576:	4b22      	ldr	r3, [pc, #136]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	049b      	lsls	r3, r3, #18
 800157e:	4013      	ands	r3, r2
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001582:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 8001584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001586:	220f      	movs	r2, #15
 8001588:	4393      	bics	r3, r2
 800158a:	0019      	movs	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 8001592:	430a      	orrs	r2, r1
 8001594:	62da      	str	r2, [r3, #44]	; 0x2c
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	4a1e      	ldr	r2, [pc, #120]	; (8001614 <HAL_RCC_OscConfig+0x690>)
 800159c:	4013      	ands	r3, r2
 800159e:	0019      	movs	r1, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	431a      	orrs	r2, r3
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80015ac:	430a      	orrs	r2, r1
 80015ae:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80015b6:	2180      	movs	r1, #128	; 0x80
 80015b8:	0449      	lsls	r1, r1, #17
 80015ba:	430a      	orrs	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff f9af 	bl	8000920 <HAL_GetTick>
 80015c2:	0003      	movs	r3, r0
 80015c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c8:	f7ff f9aa 	bl	8000920 <HAL_GetTick>
 80015cc:	0002      	movs	r2, r0
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e054      	b.n	8001684 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	2380      	movs	r3, #128	; 0x80
 80015e0:	049b      	lsls	r3, r3, #18
 80015e2:	4013      	ands	r3, r2
 80015e4:	d0f0      	beq.n	80015c8 <HAL_RCC_OscConfig+0x644>
 80015e6:	e04c      	b.n	8001682 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <HAL_RCC_OscConfig+0x67c>)
 80015ee:	4908      	ldr	r1, [pc, #32]	; (8001610 <HAL_RCC_OscConfig+0x68c>)
 80015f0:	400a      	ands	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff f994 	bl	8000920 <HAL_GetTick>
 80015f8:	0003      	movs	r3, r0
 80015fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015fc:	e015      	b.n	800162a <HAL_RCC_OscConfig+0x6a6>
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	40021000 	.word	0x40021000
 8001604:	00001388 	.word	0x00001388
 8001608:	efffffff 	.word	0xefffffff
 800160c:	fffeffff 	.word	0xfffeffff
 8001610:	feffffff 	.word	0xfeffffff
 8001614:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001618:	f7ff f982 	bl	8000920 <HAL_GetTick>
 800161c:	0002      	movs	r2, r0
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e02c      	b.n	8001684 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <HAL_RCC_OscConfig+0x708>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	049b      	lsls	r3, r3, #18
 8001632:	4013      	ands	r3, r2
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x694>
 8001636:	e024      	b.n	8001682 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	2b01      	cmp	r3, #1
 800163e:	d101      	bne.n	8001644 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e01f      	b.n	8001684 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <HAL_RCC_OscConfig+0x708>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800164a:	4b10      	ldr	r3, [pc, #64]	; (800168c <HAL_RCC_OscConfig+0x708>)
 800164c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	23c0      	movs	r3, #192	; 0xc0
 8001654:	025b      	lsls	r3, r3, #9
 8001656:	401a      	ands	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165c:	429a      	cmp	r2, r3
 800165e:	d10e      	bne.n	800167e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	220f      	movs	r2, #15
 8001664:	401a      	ands	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800166a:	429a      	cmp	r2, r3
 800166c:	d107      	bne.n	800167e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	23f0      	movs	r3, #240	; 0xf0
 8001672:	039b      	lsls	r3, r3, #14
 8001674:	401a      	ands	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800167a:	429a      	cmp	r2, r3
 800167c:	d001      	beq.n	8001682 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	b008      	add	sp, #32
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40021000 	.word	0x40021000

08001690 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e0bf      	b.n	8001824 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016a4:	4b61      	ldr	r3, [pc, #388]	; (800182c <HAL_RCC_ClockConfig+0x19c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2201      	movs	r2, #1
 80016aa:	4013      	ands	r3, r2
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d911      	bls.n	80016d6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b2:	4b5e      	ldr	r3, [pc, #376]	; (800182c <HAL_RCC_ClockConfig+0x19c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2201      	movs	r2, #1
 80016b8:	4393      	bics	r3, r2
 80016ba:	0019      	movs	r1, r3
 80016bc:	4b5b      	ldr	r3, [pc, #364]	; (800182c <HAL_RCC_ClockConfig+0x19c>)
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c4:	4b59      	ldr	r3, [pc, #356]	; (800182c <HAL_RCC_ClockConfig+0x19c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2201      	movs	r2, #1
 80016ca:	4013      	ands	r3, r2
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d001      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e0a6      	b.n	8001824 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2202      	movs	r2, #2
 80016dc:	4013      	ands	r3, r2
 80016de:	d015      	beq.n	800170c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2204      	movs	r2, #4
 80016e6:	4013      	ands	r3, r2
 80016e8:	d006      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80016ea:	4b51      	ldr	r3, [pc, #324]	; (8001830 <HAL_RCC_ClockConfig+0x1a0>)
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	4b50      	ldr	r3, [pc, #320]	; (8001830 <HAL_RCC_ClockConfig+0x1a0>)
 80016f0:	21e0      	movs	r1, #224	; 0xe0
 80016f2:	00c9      	lsls	r1, r1, #3
 80016f4:	430a      	orrs	r2, r1
 80016f6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f8:	4b4d      	ldr	r3, [pc, #308]	; (8001830 <HAL_RCC_ClockConfig+0x1a0>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	22f0      	movs	r2, #240	; 0xf0
 80016fe:	4393      	bics	r3, r2
 8001700:	0019      	movs	r1, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	4b4a      	ldr	r3, [pc, #296]	; (8001830 <HAL_RCC_ClockConfig+0x1a0>)
 8001708:	430a      	orrs	r2, r1
 800170a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2201      	movs	r2, #1
 8001712:	4013      	ands	r3, r2
 8001714:	d04c      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	4b44      	ldr	r3, [pc, #272]	; (8001830 <HAL_RCC_ClockConfig+0x1a0>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	029b      	lsls	r3, r3, #10
 8001726:	4013      	ands	r3, r2
 8001728:	d120      	bne.n	800176c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e07a      	b.n	8001824 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001736:	4b3e      	ldr	r3, [pc, #248]	; (8001830 <HAL_RCC_ClockConfig+0x1a0>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	049b      	lsls	r3, r3, #18
 800173e:	4013      	ands	r3, r2
 8001740:	d114      	bne.n	800176c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e06e      	b.n	8001824 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b03      	cmp	r3, #3
 800174c:	d107      	bne.n	800175e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800174e:	4b38      	ldr	r3, [pc, #224]	; (8001830 <HAL_RCC_ClockConfig+0x1a0>)
 8001750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	029b      	lsls	r3, r3, #10
 8001756:	4013      	ands	r3, r2
 8001758:	d108      	bne.n	800176c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e062      	b.n	8001824 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175e:	4b34      	ldr	r3, [pc, #208]	; (8001830 <HAL_RCC_ClockConfig+0x1a0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2202      	movs	r2, #2
 8001764:	4013      	ands	r3, r2
 8001766:	d101      	bne.n	800176c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e05b      	b.n	8001824 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800176c:	4b30      	ldr	r3, [pc, #192]	; (8001830 <HAL_RCC_ClockConfig+0x1a0>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2203      	movs	r2, #3
 8001772:	4393      	bics	r3, r2
 8001774:	0019      	movs	r1, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	4b2d      	ldr	r3, [pc, #180]	; (8001830 <HAL_RCC_ClockConfig+0x1a0>)
 800177c:	430a      	orrs	r2, r1
 800177e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001780:	f7ff f8ce 	bl	8000920 <HAL_GetTick>
 8001784:	0003      	movs	r3, r0
 8001786:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001788:	e009      	b.n	800179e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800178a:	f7ff f8c9 	bl	8000920 <HAL_GetTick>
 800178e:	0002      	movs	r2, r0
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	4a27      	ldr	r2, [pc, #156]	; (8001834 <HAL_RCC_ClockConfig+0x1a4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e042      	b.n	8001824 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179e:	4b24      	ldr	r3, [pc, #144]	; (8001830 <HAL_RCC_ClockConfig+0x1a0>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	220c      	movs	r2, #12
 80017a4:	401a      	ands	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d1ec      	bne.n	800178a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017b0:	4b1e      	ldr	r3, [pc, #120]	; (800182c <HAL_RCC_ClockConfig+0x19c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2201      	movs	r2, #1
 80017b6:	4013      	ands	r3, r2
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d211      	bcs.n	80017e2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017be:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_RCC_ClockConfig+0x19c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2201      	movs	r2, #1
 80017c4:	4393      	bics	r3, r2
 80017c6:	0019      	movs	r1, r3
 80017c8:	4b18      	ldr	r3, [pc, #96]	; (800182c <HAL_RCC_ClockConfig+0x19c>)
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d0:	4b16      	ldr	r3, [pc, #88]	; (800182c <HAL_RCC_ClockConfig+0x19c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2201      	movs	r2, #1
 80017d6:	4013      	ands	r3, r2
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d001      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e020      	b.n	8001824 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2204      	movs	r2, #4
 80017e8:	4013      	ands	r3, r2
 80017ea:	d009      	beq.n	8001800 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017ec:	4b10      	ldr	r3, [pc, #64]	; (8001830 <HAL_RCC_ClockConfig+0x1a0>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	4a11      	ldr	r2, [pc, #68]	; (8001838 <HAL_RCC_ClockConfig+0x1a8>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	0019      	movs	r1, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68da      	ldr	r2, [r3, #12]
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <HAL_RCC_ClockConfig+0x1a0>)
 80017fc:	430a      	orrs	r2, r1
 80017fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001800:	f000 f820 	bl	8001844 <HAL_RCC_GetSysClockFreq>
 8001804:	0001      	movs	r1, r0
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_RCC_ClockConfig+0x1a0>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	091b      	lsrs	r3, r3, #4
 800180c:	220f      	movs	r2, #15
 800180e:	4013      	ands	r3, r2
 8001810:	4a0a      	ldr	r2, [pc, #40]	; (800183c <HAL_RCC_ClockConfig+0x1ac>)
 8001812:	5cd3      	ldrb	r3, [r2, r3]
 8001814:	000a      	movs	r2, r1
 8001816:	40da      	lsrs	r2, r3
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RCC_ClockConfig+0x1b0>)
 800181a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800181c:	2000      	movs	r0, #0
 800181e:	f7ff f839 	bl	8000894 <HAL_InitTick>
  
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	0018      	movs	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	b004      	add	sp, #16
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40022000 	.word	0x40022000
 8001830:	40021000 	.word	0x40021000
 8001834:	00001388 	.word	0x00001388
 8001838:	fffff8ff 	.word	0xfffff8ff
 800183c:	0800383c 	.word	0x0800383c
 8001840:	20000000 	.word	0x20000000

08001844 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800185e:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	220c      	movs	r2, #12
 8001868:	4013      	ands	r3, r2
 800186a:	2b0c      	cmp	r3, #12
 800186c:	d046      	beq.n	80018fc <HAL_RCC_GetSysClockFreq+0xb8>
 800186e:	d848      	bhi.n	8001902 <HAL_RCC_GetSysClockFreq+0xbe>
 8001870:	2b04      	cmp	r3, #4
 8001872:	d002      	beq.n	800187a <HAL_RCC_GetSysClockFreq+0x36>
 8001874:	2b08      	cmp	r3, #8
 8001876:	d003      	beq.n	8001880 <HAL_RCC_GetSysClockFreq+0x3c>
 8001878:	e043      	b.n	8001902 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800187a:	4b27      	ldr	r3, [pc, #156]	; (8001918 <HAL_RCC_GetSysClockFreq+0xd4>)
 800187c:	613b      	str	r3, [r7, #16]
      break;
 800187e:	e043      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	0c9b      	lsrs	r3, r3, #18
 8001884:	220f      	movs	r2, #15
 8001886:	4013      	ands	r3, r2
 8001888:	4a24      	ldr	r2, [pc, #144]	; (800191c <HAL_RCC_GetSysClockFreq+0xd8>)
 800188a:	5cd3      	ldrb	r3, [r2, r3]
 800188c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800188e:	4b21      	ldr	r3, [pc, #132]	; (8001914 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001892:	220f      	movs	r2, #15
 8001894:	4013      	ands	r3, r2
 8001896:	4a22      	ldr	r2, [pc, #136]	; (8001920 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001898:	5cd3      	ldrb	r3, [r2, r3]
 800189a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	23c0      	movs	r3, #192	; 0xc0
 80018a0:	025b      	lsls	r3, r3, #9
 80018a2:	401a      	ands	r2, r3
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	025b      	lsls	r3, r3, #9
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d109      	bne.n	80018c0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	481a      	ldr	r0, [pc, #104]	; (8001918 <HAL_RCC_GetSysClockFreq+0xd4>)
 80018b0:	f7fe fc28 	bl	8000104 <__udivsi3>
 80018b4:	0003      	movs	r3, r0
 80018b6:	001a      	movs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4353      	muls	r3, r2
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	e01a      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	23c0      	movs	r3, #192	; 0xc0
 80018c4:	025b      	lsls	r3, r3, #9
 80018c6:	401a      	ands	r2, r3
 80018c8:	23c0      	movs	r3, #192	; 0xc0
 80018ca:	025b      	lsls	r3, r3, #9
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d109      	bne.n	80018e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018d0:	68b9      	ldr	r1, [r7, #8]
 80018d2:	4814      	ldr	r0, [pc, #80]	; (8001924 <HAL_RCC_GetSysClockFreq+0xe0>)
 80018d4:	f7fe fc16 	bl	8000104 <__udivsi3>
 80018d8:	0003      	movs	r3, r0
 80018da:	001a      	movs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4353      	muls	r3, r2
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	480c      	ldr	r0, [pc, #48]	; (8001918 <HAL_RCC_GetSysClockFreq+0xd4>)
 80018e8:	f7fe fc0c 	bl	8000104 <__udivsi3>
 80018ec:	0003      	movs	r3, r0
 80018ee:	001a      	movs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4353      	muls	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	613b      	str	r3, [r7, #16]
      break;
 80018fa:	e005      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_RCC_GetSysClockFreq+0xe0>)
 80018fe:	613b      	str	r3, [r7, #16]
      break;
 8001900:	e002      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001904:	613b      	str	r3, [r7, #16]
      break;
 8001906:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001908:	693b      	ldr	r3, [r7, #16]
}
 800190a:	0018      	movs	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	b006      	add	sp, #24
 8001910:	bd80      	pop	{r7, pc}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	40021000 	.word	0x40021000
 8001918:	007a1200 	.word	0x007a1200
 800191c:	08003854 	.word	0x08003854
 8001920:	08003864 	.word	0x08003864
 8001924:	02dc6c00 	.word	0x02dc6c00

08001928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800192c:	4b02      	ldr	r3, [pc, #8]	; (8001938 <HAL_RCC_GetHCLKFreq+0x10>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	0018      	movs	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	20000000 	.word	0x20000000

0800193c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001940:	f7ff fff2 	bl	8001928 <HAL_RCC_GetHCLKFreq>
 8001944:	0001      	movs	r1, r0
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	0a1b      	lsrs	r3, r3, #8
 800194c:	2207      	movs	r2, #7
 800194e:	4013      	ands	r3, r2
 8001950:	4a04      	ldr	r2, [pc, #16]	; (8001964 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001952:	5cd3      	ldrb	r3, [r2, r3]
 8001954:	40d9      	lsrs	r1, r3
 8001956:	000b      	movs	r3, r1
}    
 8001958:	0018      	movs	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	40021000 	.word	0x40021000
 8001964:	0800384c 	.word	0x0800384c

08001968 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	025b      	lsls	r3, r3, #9
 8001980:	4013      	ands	r3, r2
 8001982:	d100      	bne.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001984:	e08e      	b.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001986:	2017      	movs	r0, #23
 8001988:	183b      	adds	r3, r7, r0
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198e:	4b6e      	ldr	r3, [pc, #440]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001990:	69da      	ldr	r2, [r3, #28]
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	055b      	lsls	r3, r3, #21
 8001996:	4013      	ands	r3, r2
 8001998:	d110      	bne.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	4b6b      	ldr	r3, [pc, #428]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800199c:	69da      	ldr	r2, [r3, #28]
 800199e:	4b6a      	ldr	r3, [pc, #424]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019a0:	2180      	movs	r1, #128	; 0x80
 80019a2:	0549      	lsls	r1, r1, #21
 80019a4:	430a      	orrs	r2, r1
 80019a6:	61da      	str	r2, [r3, #28]
 80019a8:	4b67      	ldr	r3, [pc, #412]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019aa:	69da      	ldr	r2, [r3, #28]
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	055b      	lsls	r3, r3, #21
 80019b0:	4013      	ands	r3, r2
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b6:	183b      	adds	r3, r7, r0
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019bc:	4b63      	ldr	r3, [pc, #396]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4013      	ands	r3, r2
 80019c6:	d11a      	bne.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c8:	4b60      	ldr	r3, [pc, #384]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b5f      	ldr	r3, [pc, #380]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019ce:	2180      	movs	r1, #128	; 0x80
 80019d0:	0049      	lsls	r1, r1, #1
 80019d2:	430a      	orrs	r2, r1
 80019d4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d6:	f7fe ffa3 	bl	8000920 <HAL_GetTick>
 80019da:	0003      	movs	r3, r0
 80019dc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019de:	e008      	b.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e0:	f7fe ff9e 	bl	8000920 <HAL_GetTick>
 80019e4:	0002      	movs	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b64      	cmp	r3, #100	; 0x64
 80019ec:	d901      	bls.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e0a6      	b.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f2:	4b56      	ldr	r3, [pc, #344]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4013      	ands	r3, r2
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019fe:	4b52      	ldr	r3, [pc, #328]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a00:	6a1a      	ldr	r2, [r3, #32]
 8001a02:	23c0      	movs	r3, #192	; 0xc0
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4013      	ands	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d034      	beq.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	23c0      	movs	r3, #192	; 0xc0
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4013      	ands	r3, r2
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d02c      	beq.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a20:	4b49      	ldr	r3, [pc, #292]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	4a4a      	ldr	r2, [pc, #296]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a2a:	4b47      	ldr	r3, [pc, #284]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a2c:	6a1a      	ldr	r2, [r3, #32]
 8001a2e:	4b46      	ldr	r3, [pc, #280]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	0249      	lsls	r1, r1, #9
 8001a34:	430a      	orrs	r2, r1
 8001a36:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a38:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a3a:	6a1a      	ldr	r2, [r3, #32]
 8001a3c:	4b42      	ldr	r3, [pc, #264]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a3e:	4945      	ldr	r1, [pc, #276]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001a40:	400a      	ands	r2, r1
 8001a42:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a44:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a52:	f7fe ff65 	bl	8000920 <HAL_GetTick>
 8001a56:	0003      	movs	r3, r0
 8001a58:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a5a:	e009      	b.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5c:	f7fe ff60 	bl	8000920 <HAL_GetTick>
 8001a60:	0002      	movs	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	4a3c      	ldr	r2, [pc, #240]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e067      	b.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a70:	4b35      	ldr	r3, [pc, #212]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	2202      	movs	r2, #2
 8001a76:	4013      	ands	r3, r2
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a7a:	4b33      	ldr	r3, [pc, #204]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	4a34      	ldr	r2, [pc, #208]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	0019      	movs	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	4b2f      	ldr	r3, [pc, #188]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a8e:	2317      	movs	r3, #23
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d105      	bne.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a98:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a9a:	69da      	ldr	r2, [r3, #28]
 8001a9c:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a9e:	492f      	ldr	r1, [pc, #188]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001aa0:	400a      	ands	r2, r1
 8001aa2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d009      	beq.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001aae:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	4393      	bics	r3, r2
 8001ab6:	0019      	movs	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d009      	beq.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001acc:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	4a23      	ldr	r2, [pc, #140]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	0019      	movs	r1, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001adc:	430a      	orrs	r2, r1
 8001ade:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	02db      	lsls	r3, r3, #11
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d009      	beq.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001aec:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	4a1c      	ldr	r2, [pc, #112]	; (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	0019      	movs	r1, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691a      	ldr	r2, [r3, #16]
 8001afa:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001afc:	430a      	orrs	r2, r1
 8001afe:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2220      	movs	r2, #32
 8001b06:	4013      	ands	r3, r2
 8001b08:	d009      	beq.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	2210      	movs	r2, #16
 8001b10:	4393      	bics	r3, r2
 8001b12:	0019      	movs	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	695a      	ldr	r2, [r3, #20]
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	2380      	movs	r3, #128	; 0x80
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	4013      	ands	r3, r2
 8001b28:	d009      	beq.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	2240      	movs	r2, #64	; 0x40
 8001b30:	4393      	bics	r3, r2
 8001b32:	0019      	movs	r1, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	699a      	ldr	r2, [r3, #24]
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b006      	add	sp, #24
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40007000 	.word	0x40007000
 8001b50:	fffffcff 	.word	0xfffffcff
 8001b54:	fffeffff 	.word	0xfffeffff
 8001b58:	00001388 	.word	0x00001388
 8001b5c:	efffffff 	.word	0xefffffff
 8001b60:	fffcffff 	.word	0xfffcffff
 8001b64:	fff3ffff 	.word	0xfff3ffff

08001b68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e044      	b.n	8001c04 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d107      	bne.n	8001b92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2278      	movs	r2, #120	; 0x78
 8001b86:	2100      	movs	r1, #0
 8001b88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f7fe fda9 	bl	80006e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2224      	movs	r2, #36	; 0x24
 8001b96:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	438a      	bics	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	0018      	movs	r0, r3
 8001bac:	f000 fb9c 	bl	80022e8 <UART_SetConfig>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d101      	bne.n	8001bba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e024      	b.n	8001c04 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f000 fd77 	bl	80026b8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	490d      	ldr	r1, [pc, #52]	; (8001c0c <HAL_UART_Init+0xa4>)
 8001bd6:	400a      	ands	r2, r1
 8001bd8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	212a      	movs	r1, #42	; 0x2a
 8001be6:	438a      	bics	r2, r1
 8001be8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f000 fe0f 	bl	8002820 <UART_CheckIdleState>
 8001c02:	0003      	movs	r3, r0
}
 8001c04:	0018      	movs	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b002      	add	sp, #8
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	ffffb7ff 	.word	0xffffb7ff

08001c10 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	1dbb      	adds	r3, r7, #6
 8001c1c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c22:	2b20      	cmp	r3, #32
 8001c24:	d15b      	bne.n	8001cde <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_UART_Transmit_IT+0x24>
 8001c2c:	1dbb      	adds	r3, r7, #6
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e053      	b.n	8001ce0 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	015b      	lsls	r3, r3, #5
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d109      	bne.n	8001c58 <HAL_UART_Transmit_IT+0x48>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d105      	bne.n	8001c58 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4013      	ands	r3, r2
 8001c52:	d001      	beq.n	8001c58 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e043      	b.n	8001ce0 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1dba      	adds	r2, r7, #6
 8001c62:	2150      	movs	r1, #80	; 0x50
 8001c64:	8812      	ldrh	r2, [r2, #0]
 8001c66:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	1dba      	adds	r2, r7, #6
 8001c6c:	2152      	movs	r1, #82	; 0x52
 8001c6e:	8812      	ldrh	r2, [r2, #0]
 8001c70:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2284      	movs	r2, #132	; 0x84
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2221      	movs	r2, #33	; 0x21
 8001c84:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	015b      	lsls	r3, r3, #5
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d107      	bne.n	8001ca2 <HAL_UART_Transmit_IT+0x92>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d103      	bne.n	8001ca2 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4a12      	ldr	r2, [pc, #72]	; (8001ce8 <HAL_UART_Transmit_IT+0xd8>)
 8001c9e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001ca0:	e002      	b.n	8001ca8 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4a11      	ldr	r2, [pc, #68]	; (8001cec <HAL_UART_Transmit_IT+0xdc>)
 8001ca6:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8001cac:	613b      	str	r3, [r7, #16]
  return(result);
 8001cae:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001cb0:	61fb      	str	r3, [r7, #28]
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f383 8810 	msr	PRIMASK, r3
}
 8001cbc:	46c0      	nop			; (mov r8, r8)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2180      	movs	r1, #128	; 0x80
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	f383 8810 	msr	PRIMASK, r3
}
 8001cd8:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	e000      	b.n	8001ce0 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8001cde:	2302      	movs	r3, #2
  }
}
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b008      	add	sp, #32
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	08002bef 	.word	0x08002bef
 8001cec:	08002b3b 	.word	0x08002b3b

08001cf0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b0ab      	sub	sp, #172	; 0xac
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	22a4      	movs	r2, #164	; 0xa4
 8001d00:	18b9      	adds	r1, r7, r2
 8001d02:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	20a0      	movs	r0, #160	; 0xa0
 8001d0c:	1839      	adds	r1, r7, r0
 8001d0e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	219c      	movs	r1, #156	; 0x9c
 8001d18:	1879      	adds	r1, r7, r1
 8001d1a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001d1c:	0011      	movs	r1, r2
 8001d1e:	18bb      	adds	r3, r7, r2
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a99      	ldr	r2, [pc, #612]	; (8001f88 <HAL_UART_IRQHandler+0x298>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	2298      	movs	r2, #152	; 0x98
 8001d28:	18bc      	adds	r4, r7, r2
 8001d2a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001d2c:	18bb      	adds	r3, r7, r2
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d114      	bne.n	8001d5e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001d34:	187b      	adds	r3, r7, r1
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d00f      	beq.n	8001d5e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001d3e:	183b      	adds	r3, r7, r0
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2220      	movs	r2, #32
 8001d44:	4013      	ands	r3, r2
 8001d46:	d00a      	beq.n	8001d5e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d100      	bne.n	8001d52 <HAL_UART_IRQHandler+0x62>
 8001d50:	e29e      	b.n	8002290 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	0010      	movs	r0, r2
 8001d5a:	4798      	blx	r3
      }
      return;
 8001d5c:	e298      	b.n	8002290 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001d5e:	2398      	movs	r3, #152	; 0x98
 8001d60:	18fb      	adds	r3, r7, r3
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d100      	bne.n	8001d6a <HAL_UART_IRQHandler+0x7a>
 8001d68:	e114      	b.n	8001f94 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001d6a:	239c      	movs	r3, #156	; 0x9c
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2201      	movs	r2, #1
 8001d72:	4013      	ands	r3, r2
 8001d74:	d106      	bne.n	8001d84 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001d76:	23a0      	movs	r3, #160	; 0xa0
 8001d78:	18fb      	adds	r3, r7, r3
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a83      	ldr	r2, [pc, #524]	; (8001f8c <HAL_UART_IRQHandler+0x29c>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d100      	bne.n	8001d84 <HAL_UART_IRQHandler+0x94>
 8001d82:	e107      	b.n	8001f94 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001d84:	23a4      	movs	r3, #164	; 0xa4
 8001d86:	18fb      	adds	r3, r7, r3
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d012      	beq.n	8001db6 <HAL_UART_IRQHandler+0xc6>
 8001d90:	23a0      	movs	r3, #160	; 0xa0
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d00b      	beq.n	8001db6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2201      	movs	r2, #1
 8001da4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2284      	movs	r2, #132	; 0x84
 8001daa:	589b      	ldr	r3, [r3, r2]
 8001dac:	2201      	movs	r2, #1
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2184      	movs	r1, #132	; 0x84
 8001db4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001db6:	23a4      	movs	r3, #164	; 0xa4
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d011      	beq.n	8001de6 <HAL_UART_IRQHandler+0xf6>
 8001dc2:	239c      	movs	r3, #156	; 0x9c
 8001dc4:	18fb      	adds	r3, r7, r3
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d00b      	beq.n	8001de6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2284      	movs	r2, #132	; 0x84
 8001dda:	589b      	ldr	r3, [r3, r2]
 8001ddc:	2204      	movs	r2, #4
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2184      	movs	r1, #132	; 0x84
 8001de4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001de6:	23a4      	movs	r3, #164	; 0xa4
 8001de8:	18fb      	adds	r3, r7, r3
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2204      	movs	r2, #4
 8001dee:	4013      	ands	r3, r2
 8001df0:	d011      	beq.n	8001e16 <HAL_UART_IRQHandler+0x126>
 8001df2:	239c      	movs	r3, #156	; 0x9c
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d00b      	beq.n	8001e16 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2204      	movs	r2, #4
 8001e04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2284      	movs	r2, #132	; 0x84
 8001e0a:	589b      	ldr	r3, [r3, r2]
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2184      	movs	r1, #132	; 0x84
 8001e14:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001e16:	23a4      	movs	r3, #164	; 0xa4
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2208      	movs	r2, #8
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d017      	beq.n	8001e52 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001e22:	23a0      	movs	r3, #160	; 0xa0
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d105      	bne.n	8001e3a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001e2e:	239c      	movs	r3, #156	; 0x9c
 8001e30:	18fb      	adds	r3, r7, r3
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2201      	movs	r2, #1
 8001e36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001e38:	d00b      	beq.n	8001e52 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2208      	movs	r2, #8
 8001e40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2284      	movs	r2, #132	; 0x84
 8001e46:	589b      	ldr	r3, [r3, r2]
 8001e48:	2208      	movs	r2, #8
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2184      	movs	r1, #132	; 0x84
 8001e50:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001e52:	23a4      	movs	r3, #164	; 0xa4
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d013      	beq.n	8001e88 <HAL_UART_IRQHandler+0x198>
 8001e60:	23a0      	movs	r3, #160	; 0xa0
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	04db      	lsls	r3, r3, #19
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d00c      	beq.n	8001e88 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2280      	movs	r2, #128	; 0x80
 8001e74:	0112      	lsls	r2, r2, #4
 8001e76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2284      	movs	r2, #132	; 0x84
 8001e7c:	589b      	ldr	r3, [r3, r2]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2184      	movs	r1, #132	; 0x84
 8001e86:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2284      	movs	r2, #132	; 0x84
 8001e8c:	589b      	ldr	r3, [r3, r2]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d100      	bne.n	8001e94 <HAL_UART_IRQHandler+0x1a4>
 8001e92:	e1ff      	b.n	8002294 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001e94:	23a4      	movs	r3, #164	; 0xa4
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d00e      	beq.n	8001ebe <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001ea0:	23a0      	movs	r3, #160	; 0xa0
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d008      	beq.n	8001ebe <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d004      	beq.n	8001ebe <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	0010      	movs	r0, r2
 8001ebc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2284      	movs	r2, #132	; 0x84
 8001ec2:	589b      	ldr	r3, [r3, r2]
 8001ec4:	2194      	movs	r1, #148	; 0x94
 8001ec6:	187a      	adds	r2, r7, r1
 8001ec8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2240      	movs	r2, #64	; 0x40
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b40      	cmp	r3, #64	; 0x40
 8001ed6:	d004      	beq.n	8001ee2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001ed8:	187b      	adds	r3, r7, r1
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2228      	movs	r2, #40	; 0x28
 8001ede:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001ee0:	d047      	beq.n	8001f72 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f000 fdad 	bl	8002a44 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2240      	movs	r2, #64	; 0x40
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b40      	cmp	r3, #64	; 0x40
 8001ef6:	d137      	bne.n	8001f68 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8001efc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8001efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f00:	2090      	movs	r0, #144	; 0x90
 8001f02:	183a      	adds	r2, r7, r0
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	2301      	movs	r3, #1
 8001f08:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f0c:	f383 8810 	msr	PRIMASK, r3
}
 8001f10:	46c0      	nop			; (mov r8, r8)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2140      	movs	r1, #64	; 0x40
 8001f1e:	438a      	bics	r2, r1
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	183b      	adds	r3, r7, r0
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f2a:	f383 8810 	msr	PRIMASK, r3
}
 8001f2e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d012      	beq.n	8001f5e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f3c:	4a14      	ldr	r2, [pc, #80]	; (8001f90 <HAL_UART_IRQHandler+0x2a0>)
 8001f3e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f44:	0018      	movs	r0, r3
 8001f46:	f7fe fe0b 	bl	8000b60 <HAL_DMA_Abort_IT>
 8001f4a:	1e03      	subs	r3, r0, #0
 8001f4c:	d01a      	beq.n	8001f84 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f58:	0018      	movs	r0, r3
 8001f5a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f5c:	e012      	b.n	8001f84 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	0018      	movs	r0, r3
 8001f62:	f000 f9ad 	bl	80022c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f66:	e00d      	b.n	8001f84 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f000 f9a8 	bl	80022c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f70:	e008      	b.n	8001f84 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	0018      	movs	r0, r3
 8001f76:	f000 f9a3 	bl	80022c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2284      	movs	r2, #132	; 0x84
 8001f7e:	2100      	movs	r1, #0
 8001f80:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001f82:	e187      	b.n	8002294 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f84:	46c0      	nop			; (mov r8, r8)
    return;
 8001f86:	e185      	b.n	8002294 <HAL_UART_IRQHandler+0x5a4>
 8001f88:	0000080f 	.word	0x0000080f
 8001f8c:	04000120 	.word	0x04000120
 8001f90:	08002b0d 	.word	0x08002b0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d000      	beq.n	8001f9e <HAL_UART_IRQHandler+0x2ae>
 8001f9c:	e139      	b.n	8002212 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001f9e:	23a4      	movs	r3, #164	; 0xa4
 8001fa0:	18fb      	adds	r3, r7, r3
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2210      	movs	r2, #16
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d100      	bne.n	8001fac <HAL_UART_IRQHandler+0x2bc>
 8001faa:	e132      	b.n	8002212 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001fac:	23a0      	movs	r3, #160	; 0xa0
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2210      	movs	r2, #16
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d100      	bne.n	8001fba <HAL_UART_IRQHandler+0x2ca>
 8001fb8:	e12b      	b.n	8002212 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2210      	movs	r2, #16
 8001fc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2240      	movs	r2, #64	; 0x40
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b40      	cmp	r3, #64	; 0x40
 8001fce:	d000      	beq.n	8001fd2 <HAL_UART_IRQHandler+0x2e2>
 8001fd0:	e09f      	b.n	8002112 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	217e      	movs	r1, #126	; 0x7e
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8001fe0:	187b      	adds	r3, r7, r1
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d100      	bne.n	8001fea <HAL_UART_IRQHandler+0x2fa>
 8001fe8:	e156      	b.n	8002298 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2258      	movs	r2, #88	; 0x58
 8001fee:	5a9b      	ldrh	r3, [r3, r2]
 8001ff0:	187a      	adds	r2, r7, r1
 8001ff2:	8812      	ldrh	r2, [r2, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d300      	bcc.n	8001ffa <HAL_UART_IRQHandler+0x30a>
 8001ff8:	e14e      	b.n	8002298 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	187a      	adds	r2, r7, r1
 8001ffe:	215a      	movs	r1, #90	; 0x5a
 8002000:	8812      	ldrh	r2, [r2, #0]
 8002002:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b20      	cmp	r3, #32
 800200c:	d06f      	beq.n	80020ee <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800200e:	f3ef 8310 	mrs	r3, PRIMASK
 8002012:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002016:	67bb      	str	r3, [r7, #120]	; 0x78
 8002018:	2301      	movs	r3, #1
 800201a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800201c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201e:	f383 8810 	msr	PRIMASK, r3
}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	499e      	ldr	r1, [pc, #632]	; (80022a8 <HAL_UART_IRQHandler+0x5b8>)
 8002030:	400a      	ands	r2, r1
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002036:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800203a:	f383 8810 	msr	PRIMASK, r3
}
 800203e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002040:	f3ef 8310 	mrs	r3, PRIMASK
 8002044:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002048:	677b      	str	r3, [r7, #116]	; 0x74
 800204a:	2301      	movs	r3, #1
 800204c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800204e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002050:	f383 8810 	msr	PRIMASK, r3
}
 8002054:	46c0      	nop			; (mov r8, r8)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2101      	movs	r1, #1
 8002062:	438a      	bics	r2, r1
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002068:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800206a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800206c:	f383 8810 	msr	PRIMASK, r3
}
 8002070:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002072:	f3ef 8310 	mrs	r3, PRIMASK
 8002076:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002078:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800207a:	673b      	str	r3, [r7, #112]	; 0x70
 800207c:	2301      	movs	r3, #1
 800207e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002082:	f383 8810 	msr	PRIMASK, r3
}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2140      	movs	r1, #64	; 0x40
 8002094:	438a      	bics	r2, r1
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800209a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800209c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800209e:	f383 8810 	msr	PRIMASK, r3
}
 80020a2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2280      	movs	r2, #128	; 0x80
 80020a8:	2120      	movs	r1, #32
 80020aa:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020b2:	f3ef 8310 	mrs	r3, PRIMASK
 80020b6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80020b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80020bc:	2301      	movs	r3, #1
 80020be:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020c2:	f383 8810 	msr	PRIMASK, r3
}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2110      	movs	r1, #16
 80020d4:	438a      	bics	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020da:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020de:	f383 8810 	msr	PRIMASK, r3
}
 80020e2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e8:	0018      	movs	r0, r3
 80020ea:	f7fe fd01 	bl	8000af0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2202      	movs	r2, #2
 80020f2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2258      	movs	r2, #88	; 0x58
 80020f8:	5a9a      	ldrh	r2, [r3, r2]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	215a      	movs	r1, #90	; 0x5a
 80020fe:	5a5b      	ldrh	r3, [r3, r1]
 8002100:	b29b      	uxth	r3, r3
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	b29a      	uxth	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	0011      	movs	r1, r2
 800210a:	0018      	movs	r0, r3
 800210c:	f000 f8e0 	bl	80022d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002110:	e0c2      	b.n	8002298 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2258      	movs	r2, #88	; 0x58
 8002116:	5a99      	ldrh	r1, [r3, r2]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	225a      	movs	r2, #90	; 0x5a
 800211c:	5a9b      	ldrh	r3, [r3, r2]
 800211e:	b29a      	uxth	r2, r3
 8002120:	208e      	movs	r0, #142	; 0x8e
 8002122:	183b      	adds	r3, r7, r0
 8002124:	1a8a      	subs	r2, r1, r2
 8002126:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	225a      	movs	r2, #90	; 0x5a
 800212c:	5a9b      	ldrh	r3, [r3, r2]
 800212e:	b29b      	uxth	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d100      	bne.n	8002136 <HAL_UART_IRQHandler+0x446>
 8002134:	e0b2      	b.n	800229c <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8002136:	183b      	adds	r3, r7, r0
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d100      	bne.n	8002140 <HAL_UART_IRQHandler+0x450>
 800213e:	e0ad      	b.n	800229c <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002140:	f3ef 8310 	mrs	r3, PRIMASK
 8002144:	60fb      	str	r3, [r7, #12]
  return(result);
 8002146:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002148:	2488      	movs	r4, #136	; 0x88
 800214a:	193a      	adds	r2, r7, r4
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	2301      	movs	r3, #1
 8002150:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	f383 8810 	msr	PRIMASK, r3
}
 8002158:	46c0      	nop			; (mov r8, r8)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4951      	ldr	r1, [pc, #324]	; (80022ac <HAL_UART_IRQHandler+0x5bc>)
 8002166:	400a      	ands	r2, r1
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	193b      	adds	r3, r7, r4
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f383 8810 	msr	PRIMASK, r3
}
 8002176:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002178:	f3ef 8310 	mrs	r3, PRIMASK
 800217c:	61bb      	str	r3, [r7, #24]
  return(result);
 800217e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002180:	2484      	movs	r4, #132	; 0x84
 8002182:	193a      	adds	r2, r7, r4
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	2301      	movs	r3, #1
 8002188:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	f383 8810 	msr	PRIMASK, r3
}
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2101      	movs	r1, #1
 800219e:	438a      	bics	r2, r1
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	193b      	adds	r3, r7, r4
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	f383 8810 	msr	PRIMASK, r3
}
 80021ae:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2280      	movs	r2, #128	; 0x80
 80021b4:	2120      	movs	r1, #32
 80021b6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021c4:	f3ef 8310 	mrs	r3, PRIMASK
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021cc:	2480      	movs	r4, #128	; 0x80
 80021ce:	193a      	adds	r2, r7, r4
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	2301      	movs	r3, #1
 80021d4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d8:	f383 8810 	msr	PRIMASK, r3
}
 80021dc:	46c0      	nop			; (mov r8, r8)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2110      	movs	r1, #16
 80021ea:	438a      	bics	r2, r1
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	193b      	adds	r3, r7, r4
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f6:	f383 8810 	msr	PRIMASK, r3
}
 80021fa:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002202:	183b      	adds	r3, r7, r0
 8002204:	881a      	ldrh	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	0011      	movs	r1, r2
 800220a:	0018      	movs	r0, r3
 800220c:	f000 f860 	bl	80022d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002210:	e044      	b.n	800229c <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002212:	23a4      	movs	r3, #164	; 0xa4
 8002214:	18fb      	adds	r3, r7, r3
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	2380      	movs	r3, #128	; 0x80
 800221a:	035b      	lsls	r3, r3, #13
 800221c:	4013      	ands	r3, r2
 800221e:	d010      	beq.n	8002242 <HAL_UART_IRQHandler+0x552>
 8002220:	239c      	movs	r3, #156	; 0x9c
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	03db      	lsls	r3, r3, #15
 800222a:	4013      	ands	r3, r2
 800222c:	d009      	beq.n	8002242 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2280      	movs	r2, #128	; 0x80
 8002234:	0352      	lsls	r2, r2, #13
 8002236:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	0018      	movs	r0, r3
 800223c:	f000 fd60 	bl	8002d00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002240:	e02f      	b.n	80022a2 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002242:	23a4      	movs	r3, #164	; 0xa4
 8002244:	18fb      	adds	r3, r7, r3
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2280      	movs	r2, #128	; 0x80
 800224a:	4013      	ands	r3, r2
 800224c:	d00f      	beq.n	800226e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800224e:	23a0      	movs	r3, #160	; 0xa0
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2280      	movs	r2, #128	; 0x80
 8002256:	4013      	ands	r3, r2
 8002258:	d009      	beq.n	800226e <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800225e:	2b00      	cmp	r3, #0
 8002260:	d01e      	beq.n	80022a0 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	0010      	movs	r0, r2
 800226a:	4798      	blx	r3
    }
    return;
 800226c:	e018      	b.n	80022a0 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800226e:	23a4      	movs	r3, #164	; 0xa4
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2240      	movs	r2, #64	; 0x40
 8002276:	4013      	ands	r3, r2
 8002278:	d013      	beq.n	80022a2 <HAL_UART_IRQHandler+0x5b2>
 800227a:	23a0      	movs	r3, #160	; 0xa0
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2240      	movs	r2, #64	; 0x40
 8002282:	4013      	ands	r3, r2
 8002284:	d00d      	beq.n	80022a2 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	0018      	movs	r0, r3
 800228a:	f000 fd0e 	bl	8002caa <UART_EndTransmit_IT>
    return;
 800228e:	e008      	b.n	80022a2 <HAL_UART_IRQHandler+0x5b2>
      return;
 8002290:	46c0      	nop			; (mov r8, r8)
 8002292:	e006      	b.n	80022a2 <HAL_UART_IRQHandler+0x5b2>
    return;
 8002294:	46c0      	nop			; (mov r8, r8)
 8002296:	e004      	b.n	80022a2 <HAL_UART_IRQHandler+0x5b2>
      return;
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	e002      	b.n	80022a2 <HAL_UART_IRQHandler+0x5b2>
      return;
 800229c:	46c0      	nop			; (mov r8, r8)
 800229e:	e000      	b.n	80022a2 <HAL_UART_IRQHandler+0x5b2>
    return;
 80022a0:	46c0      	nop			; (mov r8, r8)
  }

}
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b02b      	add	sp, #172	; 0xac
 80022a6:	bd90      	pop	{r4, r7, pc}
 80022a8:	fffffeff 	.word	0xfffffeff
 80022ac:	fffffedf 	.word	0xfffffedf

080022b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80022b8:	46c0      	nop			; (mov r8, r8)
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b002      	add	sp, #8
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80022c8:	46c0      	nop			; (mov r8, r8)
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b002      	add	sp, #8
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	000a      	movs	r2, r1
 80022da:	1cbb      	adds	r3, r7, #2
 80022dc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b002      	add	sp, #8
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80022f0:	231e      	movs	r3, #30
 80022f2:	18fb      	adds	r3, r7, r3
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	4313      	orrs	r3, r2
 800230e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4abe      	ldr	r2, [pc, #760]	; (8002610 <UART_SetConfig+0x328>)
 8002318:	4013      	ands	r3, r2
 800231a:	0019      	movs	r1, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	430a      	orrs	r2, r1
 8002324:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4ab9      	ldr	r2, [pc, #740]	; (8002614 <UART_SetConfig+0x32c>)
 800232e:	4013      	ands	r3, r2
 8002330:	0019      	movs	r1, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	4313      	orrs	r3, r2
 800234c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4ab0      	ldr	r2, [pc, #704]	; (8002618 <UART_SetConfig+0x330>)
 8002356:	4013      	ands	r3, r2
 8002358:	0019      	movs	r1, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	430a      	orrs	r2, r1
 8002362:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4aac      	ldr	r2, [pc, #688]	; (800261c <UART_SetConfig+0x334>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d127      	bne.n	80023be <UART_SetConfig+0xd6>
 800236e:	4bac      	ldr	r3, [pc, #688]	; (8002620 <UART_SetConfig+0x338>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	2203      	movs	r2, #3
 8002374:	4013      	ands	r3, r2
 8002376:	2b03      	cmp	r3, #3
 8002378:	d00d      	beq.n	8002396 <UART_SetConfig+0xae>
 800237a:	d81b      	bhi.n	80023b4 <UART_SetConfig+0xcc>
 800237c:	2b02      	cmp	r3, #2
 800237e:	d014      	beq.n	80023aa <UART_SetConfig+0xc2>
 8002380:	d818      	bhi.n	80023b4 <UART_SetConfig+0xcc>
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <UART_SetConfig+0xa4>
 8002386:	2b01      	cmp	r3, #1
 8002388:	d00a      	beq.n	80023a0 <UART_SetConfig+0xb8>
 800238a:	e013      	b.n	80023b4 <UART_SetConfig+0xcc>
 800238c:	231f      	movs	r3, #31
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
 8002394:	e0bd      	b.n	8002512 <UART_SetConfig+0x22a>
 8002396:	231f      	movs	r3, #31
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	2202      	movs	r2, #2
 800239c:	701a      	strb	r2, [r3, #0]
 800239e:	e0b8      	b.n	8002512 <UART_SetConfig+0x22a>
 80023a0:	231f      	movs	r3, #31
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	2204      	movs	r2, #4
 80023a6:	701a      	strb	r2, [r3, #0]
 80023a8:	e0b3      	b.n	8002512 <UART_SetConfig+0x22a>
 80023aa:	231f      	movs	r3, #31
 80023ac:	18fb      	adds	r3, r7, r3
 80023ae:	2208      	movs	r2, #8
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	e0ae      	b.n	8002512 <UART_SetConfig+0x22a>
 80023b4:	231f      	movs	r3, #31
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	2210      	movs	r2, #16
 80023ba:	701a      	strb	r2, [r3, #0]
 80023bc:	e0a9      	b.n	8002512 <UART_SetConfig+0x22a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a98      	ldr	r2, [pc, #608]	; (8002624 <UART_SetConfig+0x33c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d134      	bne.n	8002432 <UART_SetConfig+0x14a>
 80023c8:	4b95      	ldr	r3, [pc, #596]	; (8002620 <UART_SetConfig+0x338>)
 80023ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023cc:	23c0      	movs	r3, #192	; 0xc0
 80023ce:	029b      	lsls	r3, r3, #10
 80023d0:	4013      	ands	r3, r2
 80023d2:	22c0      	movs	r2, #192	; 0xc0
 80023d4:	0292      	lsls	r2, r2, #10
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d017      	beq.n	800240a <UART_SetConfig+0x122>
 80023da:	22c0      	movs	r2, #192	; 0xc0
 80023dc:	0292      	lsls	r2, r2, #10
 80023de:	4293      	cmp	r3, r2
 80023e0:	d822      	bhi.n	8002428 <UART_SetConfig+0x140>
 80023e2:	2280      	movs	r2, #128	; 0x80
 80023e4:	0292      	lsls	r2, r2, #10
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d019      	beq.n	800241e <UART_SetConfig+0x136>
 80023ea:	2280      	movs	r2, #128	; 0x80
 80023ec:	0292      	lsls	r2, r2, #10
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d81a      	bhi.n	8002428 <UART_SetConfig+0x140>
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d004      	beq.n	8002400 <UART_SetConfig+0x118>
 80023f6:	2280      	movs	r2, #128	; 0x80
 80023f8:	0252      	lsls	r2, r2, #9
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00a      	beq.n	8002414 <UART_SetConfig+0x12c>
 80023fe:	e013      	b.n	8002428 <UART_SetConfig+0x140>
 8002400:	231f      	movs	r3, #31
 8002402:	18fb      	adds	r3, r7, r3
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	e083      	b.n	8002512 <UART_SetConfig+0x22a>
 800240a:	231f      	movs	r3, #31
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	2202      	movs	r2, #2
 8002410:	701a      	strb	r2, [r3, #0]
 8002412:	e07e      	b.n	8002512 <UART_SetConfig+0x22a>
 8002414:	231f      	movs	r3, #31
 8002416:	18fb      	adds	r3, r7, r3
 8002418:	2204      	movs	r2, #4
 800241a:	701a      	strb	r2, [r3, #0]
 800241c:	e079      	b.n	8002512 <UART_SetConfig+0x22a>
 800241e:	231f      	movs	r3, #31
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	2208      	movs	r2, #8
 8002424:	701a      	strb	r2, [r3, #0]
 8002426:	e074      	b.n	8002512 <UART_SetConfig+0x22a>
 8002428:	231f      	movs	r3, #31
 800242a:	18fb      	adds	r3, r7, r3
 800242c:	2210      	movs	r2, #16
 800242e:	701a      	strb	r2, [r3, #0]
 8002430:	e06f      	b.n	8002512 <UART_SetConfig+0x22a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a7c      	ldr	r2, [pc, #496]	; (8002628 <UART_SetConfig+0x340>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d134      	bne.n	80024a6 <UART_SetConfig+0x1be>
 800243c:	4b78      	ldr	r3, [pc, #480]	; (8002620 <UART_SetConfig+0x338>)
 800243e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002440:	23c0      	movs	r3, #192	; 0xc0
 8002442:	031b      	lsls	r3, r3, #12
 8002444:	4013      	ands	r3, r2
 8002446:	22c0      	movs	r2, #192	; 0xc0
 8002448:	0312      	lsls	r2, r2, #12
 800244a:	4293      	cmp	r3, r2
 800244c:	d017      	beq.n	800247e <UART_SetConfig+0x196>
 800244e:	22c0      	movs	r2, #192	; 0xc0
 8002450:	0312      	lsls	r2, r2, #12
 8002452:	4293      	cmp	r3, r2
 8002454:	d822      	bhi.n	800249c <UART_SetConfig+0x1b4>
 8002456:	2280      	movs	r2, #128	; 0x80
 8002458:	0312      	lsls	r2, r2, #12
 800245a:	4293      	cmp	r3, r2
 800245c:	d019      	beq.n	8002492 <UART_SetConfig+0x1aa>
 800245e:	2280      	movs	r2, #128	; 0x80
 8002460:	0312      	lsls	r2, r2, #12
 8002462:	4293      	cmp	r3, r2
 8002464:	d81a      	bhi.n	800249c <UART_SetConfig+0x1b4>
 8002466:	2b00      	cmp	r3, #0
 8002468:	d004      	beq.n	8002474 <UART_SetConfig+0x18c>
 800246a:	2280      	movs	r2, #128	; 0x80
 800246c:	02d2      	lsls	r2, r2, #11
 800246e:	4293      	cmp	r3, r2
 8002470:	d00a      	beq.n	8002488 <UART_SetConfig+0x1a0>
 8002472:	e013      	b.n	800249c <UART_SetConfig+0x1b4>
 8002474:	231f      	movs	r3, #31
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]
 800247c:	e049      	b.n	8002512 <UART_SetConfig+0x22a>
 800247e:	231f      	movs	r3, #31
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	2202      	movs	r2, #2
 8002484:	701a      	strb	r2, [r3, #0]
 8002486:	e044      	b.n	8002512 <UART_SetConfig+0x22a>
 8002488:	231f      	movs	r3, #31
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	2204      	movs	r2, #4
 800248e:	701a      	strb	r2, [r3, #0]
 8002490:	e03f      	b.n	8002512 <UART_SetConfig+0x22a>
 8002492:	231f      	movs	r3, #31
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	2208      	movs	r2, #8
 8002498:	701a      	strb	r2, [r3, #0]
 800249a:	e03a      	b.n	8002512 <UART_SetConfig+0x22a>
 800249c:	231f      	movs	r3, #31
 800249e:	18fb      	adds	r3, r7, r3
 80024a0:	2210      	movs	r2, #16
 80024a2:	701a      	strb	r2, [r3, #0]
 80024a4:	e035      	b.n	8002512 <UART_SetConfig+0x22a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a60      	ldr	r2, [pc, #384]	; (800262c <UART_SetConfig+0x344>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d104      	bne.n	80024ba <UART_SetConfig+0x1d2>
 80024b0:	231f      	movs	r3, #31
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
 80024b8:	e02b      	b.n	8002512 <UART_SetConfig+0x22a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a5c      	ldr	r2, [pc, #368]	; (8002630 <UART_SetConfig+0x348>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d104      	bne.n	80024ce <UART_SetConfig+0x1e6>
 80024c4:	231f      	movs	r3, #31
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
 80024cc:	e021      	b.n	8002512 <UART_SetConfig+0x22a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a58      	ldr	r2, [pc, #352]	; (8002634 <UART_SetConfig+0x34c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d104      	bne.n	80024e2 <UART_SetConfig+0x1fa>
 80024d8:	231f      	movs	r3, #31
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
 80024e0:	e017      	b.n	8002512 <UART_SetConfig+0x22a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a54      	ldr	r2, [pc, #336]	; (8002638 <UART_SetConfig+0x350>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d104      	bne.n	80024f6 <UART_SetConfig+0x20e>
 80024ec:	231f      	movs	r3, #31
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
 80024f4:	e00d      	b.n	8002512 <UART_SetConfig+0x22a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a50      	ldr	r2, [pc, #320]	; (800263c <UART_SetConfig+0x354>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d104      	bne.n	800250a <UART_SetConfig+0x222>
 8002500:	231f      	movs	r3, #31
 8002502:	18fb      	adds	r3, r7, r3
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
 8002508:	e003      	b.n	8002512 <UART_SetConfig+0x22a>
 800250a:	231f      	movs	r3, #31
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	2210      	movs	r2, #16
 8002510:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69da      	ldr	r2, [r3, #28]
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	429a      	cmp	r2, r3
 800251c:	d15c      	bne.n	80025d8 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 800251e:	231f      	movs	r3, #31
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b08      	cmp	r3, #8
 8002526:	d015      	beq.n	8002554 <UART_SetConfig+0x26c>
 8002528:	dc18      	bgt.n	800255c <UART_SetConfig+0x274>
 800252a:	2b04      	cmp	r3, #4
 800252c:	d00d      	beq.n	800254a <UART_SetConfig+0x262>
 800252e:	dc15      	bgt.n	800255c <UART_SetConfig+0x274>
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <UART_SetConfig+0x252>
 8002534:	2b02      	cmp	r3, #2
 8002536:	d005      	beq.n	8002544 <UART_SetConfig+0x25c>
 8002538:	e010      	b.n	800255c <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800253a:	f7ff f9ff 	bl	800193c <HAL_RCC_GetPCLK1Freq>
 800253e:	0003      	movs	r3, r0
 8002540:	61bb      	str	r3, [r7, #24]
        break;
 8002542:	e012      	b.n	800256a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002544:	4b3e      	ldr	r3, [pc, #248]	; (8002640 <UART_SetConfig+0x358>)
 8002546:	61bb      	str	r3, [r7, #24]
        break;
 8002548:	e00f      	b.n	800256a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800254a:	f7ff f97b 	bl	8001844 <HAL_RCC_GetSysClockFreq>
 800254e:	0003      	movs	r3, r0
 8002550:	61bb      	str	r3, [r7, #24]
        break;
 8002552:	e00a      	b.n	800256a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	021b      	lsls	r3, r3, #8
 8002558:	61bb      	str	r3, [r7, #24]
        break;
 800255a:	e006      	b.n	800256a <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002560:	231e      	movs	r3, #30
 8002562:	18fb      	adds	r3, r7, r3
 8002564:	2201      	movs	r2, #1
 8002566:	701a      	strb	r2, [r3, #0]
        break;
 8002568:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d100      	bne.n	8002572 <UART_SetConfig+0x28a>
 8002570:	e095      	b.n	800269e <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	005a      	lsls	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	085b      	lsrs	r3, r3, #1
 800257c:	18d2      	adds	r2, r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	0019      	movs	r1, r3
 8002584:	0010      	movs	r0, r2
 8002586:	f7fd fdbd 	bl	8000104 <__udivsi3>
 800258a:	0003      	movs	r3, r0
 800258c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b0f      	cmp	r3, #15
 8002592:	d91c      	bls.n	80025ce <UART_SetConfig+0x2e6>
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	025b      	lsls	r3, r3, #9
 800259a:	429a      	cmp	r2, r3
 800259c:	d217      	bcs.n	80025ce <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	200e      	movs	r0, #14
 80025a4:	183b      	adds	r3, r7, r0
 80025a6:	210f      	movs	r1, #15
 80025a8:	438a      	bics	r2, r1
 80025aa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	085b      	lsrs	r3, r3, #1
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2207      	movs	r2, #7
 80025b4:	4013      	ands	r3, r2
 80025b6:	b299      	uxth	r1, r3
 80025b8:	183b      	adds	r3, r7, r0
 80025ba:	183a      	adds	r2, r7, r0
 80025bc:	8812      	ldrh	r2, [r2, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	183a      	adds	r2, r7, r0
 80025c8:	8812      	ldrh	r2, [r2, #0]
 80025ca:	60da      	str	r2, [r3, #12]
 80025cc:	e067      	b.n	800269e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80025ce:	231e      	movs	r3, #30
 80025d0:	18fb      	adds	r3, r7, r3
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]
 80025d6:	e062      	b.n	800269e <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80025d8:	231f      	movs	r3, #31
 80025da:	18fb      	adds	r3, r7, r3
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d030      	beq.n	8002644 <UART_SetConfig+0x35c>
 80025e2:	dc33      	bgt.n	800264c <UART_SetConfig+0x364>
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d00d      	beq.n	8002604 <UART_SetConfig+0x31c>
 80025e8:	dc30      	bgt.n	800264c <UART_SetConfig+0x364>
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <UART_SetConfig+0x30c>
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d005      	beq.n	80025fe <UART_SetConfig+0x316>
 80025f2:	e02b      	b.n	800264c <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025f4:	f7ff f9a2 	bl	800193c <HAL_RCC_GetPCLK1Freq>
 80025f8:	0003      	movs	r3, r0
 80025fa:	61bb      	str	r3, [r7, #24]
        break;
 80025fc:	e02d      	b.n	800265a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <UART_SetConfig+0x358>)
 8002600:	61bb      	str	r3, [r7, #24]
        break;
 8002602:	e02a      	b.n	800265a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002604:	f7ff f91e 	bl	8001844 <HAL_RCC_GetSysClockFreq>
 8002608:	0003      	movs	r3, r0
 800260a:	61bb      	str	r3, [r7, #24]
        break;
 800260c:	e025      	b.n	800265a <UART_SetConfig+0x372>
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	efff69f3 	.word	0xefff69f3
 8002614:	ffffcfff 	.word	0xffffcfff
 8002618:	fffff4ff 	.word	0xfffff4ff
 800261c:	40013800 	.word	0x40013800
 8002620:	40021000 	.word	0x40021000
 8002624:	40004400 	.word	0x40004400
 8002628:	40004800 	.word	0x40004800
 800262c:	40004c00 	.word	0x40004c00
 8002630:	40005000 	.word	0x40005000
 8002634:	40011400 	.word	0x40011400
 8002638:	40011800 	.word	0x40011800
 800263c:	40011c00 	.word	0x40011c00
 8002640:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	61bb      	str	r3, [r7, #24]
        break;
 800264a:	e006      	b.n	800265a <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002650:	231e      	movs	r3, #30
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
        break;
 8002658:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d01e      	beq.n	800269e <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	085a      	lsrs	r2, r3, #1
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	18d2      	adds	r2, r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	0019      	movs	r1, r3
 8002670:	0010      	movs	r0, r2
 8002672:	f7fd fd47 	bl	8000104 <__udivsi3>
 8002676:	0003      	movs	r3, r0
 8002678:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	2b0f      	cmp	r3, #15
 800267e:	d90a      	bls.n	8002696 <UART_SetConfig+0x3ae>
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	2380      	movs	r3, #128	; 0x80
 8002684:	025b      	lsls	r3, r3, #9
 8002686:	429a      	cmp	r2, r3
 8002688:	d205      	bcs.n	8002696 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	b29a      	uxth	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	60da      	str	r2, [r3, #12]
 8002694:	e003      	b.n	800269e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002696:	231e      	movs	r3, #30
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	2201      	movs	r2, #1
 800269c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80026aa:	231e      	movs	r3, #30
 80026ac:	18fb      	adds	r3, r7, r3
 80026ae:	781b      	ldrb	r3, [r3, #0]
}
 80026b0:	0018      	movs	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	b008      	add	sp, #32
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	2201      	movs	r2, #1
 80026c6:	4013      	ands	r3, r2
 80026c8:	d00b      	beq.n	80026e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	4a4a      	ldr	r2, [pc, #296]	; (80027fc <UART_AdvFeatureConfig+0x144>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	0019      	movs	r1, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	2202      	movs	r2, #2
 80026e8:	4013      	ands	r3, r2
 80026ea:	d00b      	beq.n	8002704 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4a43      	ldr	r2, [pc, #268]	; (8002800 <UART_AdvFeatureConfig+0x148>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	0019      	movs	r1, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	2204      	movs	r2, #4
 800270a:	4013      	ands	r3, r2
 800270c:	d00b      	beq.n	8002726 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a3b      	ldr	r2, [pc, #236]	; (8002804 <UART_AdvFeatureConfig+0x14c>)
 8002716:	4013      	ands	r3, r2
 8002718:	0019      	movs	r1, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	2208      	movs	r2, #8
 800272c:	4013      	ands	r3, r2
 800272e:	d00b      	beq.n	8002748 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	4a34      	ldr	r2, [pc, #208]	; (8002808 <UART_AdvFeatureConfig+0x150>)
 8002738:	4013      	ands	r3, r2
 800273a:	0019      	movs	r1, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	2210      	movs	r2, #16
 800274e:	4013      	ands	r3, r2
 8002750:	d00b      	beq.n	800276a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	4a2c      	ldr	r2, [pc, #176]	; (800280c <UART_AdvFeatureConfig+0x154>)
 800275a:	4013      	ands	r3, r2
 800275c:	0019      	movs	r1, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	2220      	movs	r2, #32
 8002770:	4013      	ands	r3, r2
 8002772:	d00b      	beq.n	800278c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	4a25      	ldr	r2, [pc, #148]	; (8002810 <UART_AdvFeatureConfig+0x158>)
 800277c:	4013      	ands	r3, r2
 800277e:	0019      	movs	r1, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	2240      	movs	r2, #64	; 0x40
 8002792:	4013      	ands	r3, r2
 8002794:	d01d      	beq.n	80027d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4a1d      	ldr	r2, [pc, #116]	; (8002814 <UART_AdvFeatureConfig+0x15c>)
 800279e:	4013      	ands	r3, r2
 80027a0:	0019      	movs	r1, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027b2:	2380      	movs	r3, #128	; 0x80
 80027b4:	035b      	lsls	r3, r3, #13
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d10b      	bne.n	80027d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	4a15      	ldr	r2, [pc, #84]	; (8002818 <UART_AdvFeatureConfig+0x160>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	0019      	movs	r1, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	2280      	movs	r2, #128	; 0x80
 80027d8:	4013      	ands	r3, r2
 80027da:	d00b      	beq.n	80027f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4a0e      	ldr	r2, [pc, #56]	; (800281c <UART_AdvFeatureConfig+0x164>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	0019      	movs	r1, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	605a      	str	r2, [r3, #4]
  }
}
 80027f4:	46c0      	nop			; (mov r8, r8)
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b002      	add	sp, #8
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	fffdffff 	.word	0xfffdffff
 8002800:	fffeffff 	.word	0xfffeffff
 8002804:	fffbffff 	.word	0xfffbffff
 8002808:	ffff7fff 	.word	0xffff7fff
 800280c:	ffffefff 	.word	0xffffefff
 8002810:	ffffdfff 	.word	0xffffdfff
 8002814:	ffefffff 	.word	0xffefffff
 8002818:	ff9fffff 	.word	0xff9fffff
 800281c:	fff7ffff 	.word	0xfff7ffff

08002820 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b092      	sub	sp, #72	; 0x48
 8002824:	af02      	add	r7, sp, #8
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2284      	movs	r2, #132	; 0x84
 800282c:	2100      	movs	r1, #0
 800282e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002830:	f7fe f876 	bl	8000920 <HAL_GetTick>
 8002834:	0003      	movs	r3, r0
 8002836:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2208      	movs	r2, #8
 8002840:	4013      	ands	r3, r2
 8002842:	2b08      	cmp	r3, #8
 8002844:	d12c      	bne.n	80028a0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002848:	2280      	movs	r2, #128	; 0x80
 800284a:	0391      	lsls	r1, r2, #14
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	4a46      	ldr	r2, [pc, #280]	; (8002968 <UART_CheckIdleState+0x148>)
 8002850:	9200      	str	r2, [sp, #0]
 8002852:	2200      	movs	r2, #0
 8002854:	f000 f88c 	bl	8002970 <UART_WaitOnFlagUntilTimeout>
 8002858:	1e03      	subs	r3, r0, #0
 800285a:	d021      	beq.n	80028a0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800285c:	f3ef 8310 	mrs	r3, PRIMASK
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002864:	63bb      	str	r3, [r7, #56]	; 0x38
 8002866:	2301      	movs	r3, #1
 8002868:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800286a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286c:	f383 8810 	msr	PRIMASK, r3
}
 8002870:	46c0      	nop			; (mov r8, r8)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2180      	movs	r1, #128	; 0x80
 800287e:	438a      	bics	r2, r1
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002888:	f383 8810 	msr	PRIMASK, r3
}
 800288c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2220      	movs	r2, #32
 8002892:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2278      	movs	r2, #120	; 0x78
 8002898:	2100      	movs	r1, #0
 800289a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e05f      	b.n	8002960 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2204      	movs	r2, #4
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d146      	bne.n	800293c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b0:	2280      	movs	r2, #128	; 0x80
 80028b2:	03d1      	lsls	r1, r2, #15
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	4a2c      	ldr	r2, [pc, #176]	; (8002968 <UART_CheckIdleState+0x148>)
 80028b8:	9200      	str	r2, [sp, #0]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f000 f858 	bl	8002970 <UART_WaitOnFlagUntilTimeout>
 80028c0:	1e03      	subs	r3, r0, #0
 80028c2:	d03b      	beq.n	800293c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028c4:	f3ef 8310 	mrs	r3, PRIMASK
 80028c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80028ca:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028cc:	637b      	str	r3, [r7, #52]	; 0x34
 80028ce:	2301      	movs	r3, #1
 80028d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f383 8810 	msr	PRIMASK, r3
}
 80028d8:	46c0      	nop			; (mov r8, r8)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4921      	ldr	r1, [pc, #132]	; (800296c <UART_CheckIdleState+0x14c>)
 80028e6:	400a      	ands	r2, r1
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f383 8810 	msr	PRIMASK, r3
}
 80028f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028f6:	f3ef 8310 	mrs	r3, PRIMASK
 80028fa:	61bb      	str	r3, [r7, #24]
  return(result);
 80028fc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028fe:	633b      	str	r3, [r7, #48]	; 0x30
 8002900:	2301      	movs	r3, #1
 8002902:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f383 8810 	msr	PRIMASK, r3
}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2101      	movs	r1, #1
 8002918:	438a      	bics	r2, r1
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	f383 8810 	msr	PRIMASK, r3
}
 8002926:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2280      	movs	r2, #128	; 0x80
 800292c:	2120      	movs	r1, #32
 800292e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2278      	movs	r2, #120	; 0x78
 8002934:	2100      	movs	r1, #0
 8002936:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e011      	b.n	8002960 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2220      	movs	r2, #32
 8002940:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2280      	movs	r2, #128	; 0x80
 8002946:	2120      	movs	r1, #32
 8002948:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2278      	movs	r2, #120	; 0x78
 800295a:	2100      	movs	r1, #0
 800295c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	0018      	movs	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	b010      	add	sp, #64	; 0x40
 8002966:	bd80      	pop	{r7, pc}
 8002968:	01ffffff 	.word	0x01ffffff
 800296c:	fffffedf 	.word	0xfffffedf

08002970 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	1dfb      	adds	r3, r7, #7
 800297e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002980:	e04b      	b.n	8002a1a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	3301      	adds	r3, #1
 8002986:	d048      	beq.n	8002a1a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002988:	f7fd ffca 	bl	8000920 <HAL_GetTick>
 800298c:	0002      	movs	r2, r0
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	429a      	cmp	r2, r3
 8002996:	d302      	bcc.n	800299e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e04b      	b.n	8002a3a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2204      	movs	r2, #4
 80029aa:	4013      	ands	r3, r2
 80029ac:	d035      	beq.n	8002a1a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	2208      	movs	r2, #8
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d111      	bne.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2208      	movs	r2, #8
 80029c2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	0018      	movs	r0, r3
 80029c8:	f000 f83c 	bl	8002a44 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2284      	movs	r2, #132	; 0x84
 80029d0:	2108      	movs	r1, #8
 80029d2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2278      	movs	r2, #120	; 0x78
 80029d8:	2100      	movs	r1, #0
 80029da:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e02c      	b.n	8002a3a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	69da      	ldr	r2, [r3, #28]
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	401a      	ands	r2, r3
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d112      	bne.n	8002a1a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2280      	movs	r2, #128	; 0x80
 80029fa:	0112      	lsls	r2, r2, #4
 80029fc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	0018      	movs	r0, r3
 8002a02:	f000 f81f 	bl	8002a44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2284      	movs	r2, #132	; 0x84
 8002a0a:	2120      	movs	r1, #32
 8002a0c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2278      	movs	r2, #120	; 0x78
 8002a12:	2100      	movs	r1, #0
 8002a14:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e00f      	b.n	8002a3a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	4013      	ands	r3, r2
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	425a      	negs	r2, r3
 8002a2a:	4153      	adcs	r3, r2
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	001a      	movs	r2, r3
 8002a30:	1dfb      	adds	r3, r7, #7
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d0a4      	beq.n	8002982 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b004      	add	sp, #16
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08e      	sub	sp, #56	; 0x38
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a50:	617b      	str	r3, [r7, #20]
  return(result);
 8002a52:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a54:	637b      	str	r3, [r7, #52]	; 0x34
 8002a56:	2301      	movs	r3, #1
 8002a58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	f383 8810 	msr	PRIMASK, r3
}
 8002a60:	46c0      	nop			; (mov r8, r8)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4926      	ldr	r1, [pc, #152]	; (8002b08 <UART_EndRxTransfer+0xc4>)
 8002a6e:	400a      	ands	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f383 8810 	msr	PRIMASK, r3
}
 8002a7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a82:	623b      	str	r3, [r7, #32]
  return(result);
 8002a84:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a86:	633b      	str	r3, [r7, #48]	; 0x30
 8002a88:	2301      	movs	r3, #1
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	f383 8810 	msr	PRIMASK, r3
}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	438a      	bics	r2, r1
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aaa:	f383 8810 	msr	PRIMASK, r3
}
 8002aae:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d118      	bne.n	8002aea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8002abc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002abe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f383 8810 	msr	PRIMASK, r3
}
 8002acc:	46c0      	nop			; (mov r8, r8)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2110      	movs	r1, #16
 8002ada:	438a      	bics	r2, r1
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f383 8810 	msr	PRIMASK, r3
}
 8002ae8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2280      	movs	r2, #128	; 0x80
 8002aee:	2120      	movs	r1, #32
 8002af0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b00e      	add	sp, #56	; 0x38
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	fffffedf 	.word	0xfffffedf

08002b0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	225a      	movs	r2, #90	; 0x5a
 8002b1e:	2100      	movs	r1, #0
 8002b20:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2252      	movs	r2, #82	; 0x52
 8002b26:	2100      	movs	r1, #0
 8002b28:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7ff fbc7 	bl	80022c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	46bd      	mov	sp, r7
 8002b36:	b004      	add	sp, #16
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b08a      	sub	sp, #40	; 0x28
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b46:	2b21      	cmp	r3, #33	; 0x21
 8002b48:	d14d      	bne.n	8002be6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2252      	movs	r2, #82	; 0x52
 8002b4e:	5a9b      	ldrh	r3, [r3, r2]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d132      	bne.n	8002bbc <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b56:	f3ef 8310 	mrs	r3, PRIMASK
 8002b5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b5c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b60:	2301      	movs	r3, #1
 8002b62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f383 8810 	msr	PRIMASK, r3
}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2180      	movs	r1, #128	; 0x80
 8002b78:	438a      	bics	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f383 8810 	msr	PRIMASK, r3
}
 8002b86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b88:	f3ef 8310 	mrs	r3, PRIMASK
 8002b8c:	617b      	str	r3, [r7, #20]
  return(result);
 8002b8e:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002b90:	623b      	str	r3, [r7, #32]
 8002b92:	2301      	movs	r3, #1
 8002b94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	f383 8810 	msr	PRIMASK, r3
}
 8002b9c:	46c0      	nop			; (mov r8, r8)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2140      	movs	r1, #64	; 0x40
 8002baa:	430a      	orrs	r2, r1
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f383 8810 	msr	PRIMASK, r3
}
 8002bb8:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8002bba:	e014      	b.n	8002be6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc0:	781a      	ldrb	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	b292      	uxth	r2, r2
 8002bc8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2252      	movs	r2, #82	; 0x52
 8002bd8:	5a9b      	ldrh	r3, [r3, r2]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b299      	uxth	r1, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2252      	movs	r2, #82	; 0x52
 8002be4:	5299      	strh	r1, [r3, r2]
}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b00a      	add	sp, #40	; 0x28
 8002bec:	bd80      	pop	{r7, pc}

08002bee <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b08c      	sub	sp, #48	; 0x30
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bfa:	2b21      	cmp	r3, #33	; 0x21
 8002bfc:	d151      	bne.n	8002ca2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2252      	movs	r2, #82	; 0x52
 8002c02:	5a9b      	ldrh	r3, [r3, r2]
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d132      	bne.n	8002c70 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c10:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c14:	2301      	movs	r3, #1
 8002c16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f383 8810 	msr	PRIMASK, r3
}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2180      	movs	r1, #128	; 0x80
 8002c2c:	438a      	bics	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f383 8810 	msr	PRIMASK, r3
}
 8002c3a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c40:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c42:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
 8002c46:	2301      	movs	r3, #1
 8002c48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	f383 8810 	msr	PRIMASK, r3
}
 8002c50:	46c0      	nop			; (mov r8, r8)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2140      	movs	r1, #64	; 0x40
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	f383 8810 	msr	PRIMASK, r3
}
 8002c6c:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8002c6e:	e018      	b.n	8002ca2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c74:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c78:	881a      	ldrh	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	05d2      	lsls	r2, r2, #23
 8002c80:	0dd2      	lsrs	r2, r2, #23
 8002c82:	b292      	uxth	r2, r2
 8002c84:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8a:	1c9a      	adds	r2, r3, #2
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2252      	movs	r2, #82	; 0x52
 8002c94:	5a9b      	ldrh	r3, [r3, r2]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b299      	uxth	r1, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2252      	movs	r2, #82	; 0x52
 8002ca0:	5299      	strh	r1, [r3, r2]
}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b00c      	add	sp, #48	; 0x30
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b086      	sub	sp, #24
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8002cb6:	60bb      	str	r3, [r7, #8]
  return(result);
 8002cb8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f383 8810 	msr	PRIMASK, r3
}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2140      	movs	r1, #64	; 0x40
 8002cd4:	438a      	bics	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f383 8810 	msr	PRIMASK, r3
}
 8002ce2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f7ff fadc 	bl	80022b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cf8:	46c0      	nop			; (mov r8, r8)
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b006      	add	sp, #24
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002d08:	46c0      	nop			; (mov r8, r8)
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b002      	add	sp, #8
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <__errno>:
 8002d10:	4b01      	ldr	r3, [pc, #4]	; (8002d18 <__errno+0x8>)
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	4770      	bx	lr
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	2000000c 	.word	0x2000000c

08002d1c <__libc_init_array>:
 8002d1c:	b570      	push	{r4, r5, r6, lr}
 8002d1e:	2600      	movs	r6, #0
 8002d20:	4d0c      	ldr	r5, [pc, #48]	; (8002d54 <__libc_init_array+0x38>)
 8002d22:	4c0d      	ldr	r4, [pc, #52]	; (8002d58 <__libc_init_array+0x3c>)
 8002d24:	1b64      	subs	r4, r4, r5
 8002d26:	10a4      	asrs	r4, r4, #2
 8002d28:	42a6      	cmp	r6, r4
 8002d2a:	d109      	bne.n	8002d40 <__libc_init_array+0x24>
 8002d2c:	2600      	movs	r6, #0
 8002d2e:	f000 fd6b 	bl	8003808 <_init>
 8002d32:	4d0a      	ldr	r5, [pc, #40]	; (8002d5c <__libc_init_array+0x40>)
 8002d34:	4c0a      	ldr	r4, [pc, #40]	; (8002d60 <__libc_init_array+0x44>)
 8002d36:	1b64      	subs	r4, r4, r5
 8002d38:	10a4      	asrs	r4, r4, #2
 8002d3a:	42a6      	cmp	r6, r4
 8002d3c:	d105      	bne.n	8002d4a <__libc_init_array+0x2e>
 8002d3e:	bd70      	pop	{r4, r5, r6, pc}
 8002d40:	00b3      	lsls	r3, r6, #2
 8002d42:	58eb      	ldr	r3, [r5, r3]
 8002d44:	4798      	blx	r3
 8002d46:	3601      	adds	r6, #1
 8002d48:	e7ee      	b.n	8002d28 <__libc_init_array+0xc>
 8002d4a:	00b3      	lsls	r3, r6, #2
 8002d4c:	58eb      	ldr	r3, [r5, r3]
 8002d4e:	4798      	blx	r3
 8002d50:	3601      	adds	r6, #1
 8002d52:	e7f2      	b.n	8002d3a <__libc_init_array+0x1e>
 8002d54:	080038d8 	.word	0x080038d8
 8002d58:	080038d8 	.word	0x080038d8
 8002d5c:	080038d8 	.word	0x080038d8
 8002d60:	080038dc 	.word	0x080038dc

08002d64 <memset>:
 8002d64:	0003      	movs	r3, r0
 8002d66:	1882      	adds	r2, r0, r2
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d100      	bne.n	8002d6e <memset+0xa>
 8002d6c:	4770      	bx	lr
 8002d6e:	7019      	strb	r1, [r3, #0]
 8002d70:	3301      	adds	r3, #1
 8002d72:	e7f9      	b.n	8002d68 <memset+0x4>

08002d74 <_puts_r>:
 8002d74:	b570      	push	{r4, r5, r6, lr}
 8002d76:	0005      	movs	r5, r0
 8002d78:	000e      	movs	r6, r1
 8002d7a:	2800      	cmp	r0, #0
 8002d7c:	d004      	beq.n	8002d88 <_puts_r+0x14>
 8002d7e:	6983      	ldr	r3, [r0, #24]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <_puts_r+0x14>
 8002d84:	f000 fa6e 	bl	8003264 <__sinit>
 8002d88:	69ab      	ldr	r3, [r5, #24]
 8002d8a:	68ac      	ldr	r4, [r5, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d102      	bne.n	8002d96 <_puts_r+0x22>
 8002d90:	0028      	movs	r0, r5
 8002d92:	f000 fa67 	bl	8003264 <__sinit>
 8002d96:	4b2d      	ldr	r3, [pc, #180]	; (8002e4c <_puts_r+0xd8>)
 8002d98:	429c      	cmp	r4, r3
 8002d9a:	d122      	bne.n	8002de2 <_puts_r+0x6e>
 8002d9c:	686c      	ldr	r4, [r5, #4]
 8002d9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002da0:	07db      	lsls	r3, r3, #31
 8002da2:	d405      	bmi.n	8002db0 <_puts_r+0x3c>
 8002da4:	89a3      	ldrh	r3, [r4, #12]
 8002da6:	059b      	lsls	r3, r3, #22
 8002da8:	d402      	bmi.n	8002db0 <_puts_r+0x3c>
 8002daa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dac:	f000 fafb 	bl	80033a6 <__retarget_lock_acquire_recursive>
 8002db0:	89a3      	ldrh	r3, [r4, #12]
 8002db2:	071b      	lsls	r3, r3, #28
 8002db4:	d502      	bpl.n	8002dbc <_puts_r+0x48>
 8002db6:	6923      	ldr	r3, [r4, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d129      	bne.n	8002e10 <_puts_r+0x9c>
 8002dbc:	0021      	movs	r1, r4
 8002dbe:	0028      	movs	r0, r5
 8002dc0:	f000 f8aa 	bl	8002f18 <__swsetup_r>
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	d023      	beq.n	8002e10 <_puts_r+0x9c>
 8002dc8:	2501      	movs	r5, #1
 8002dca:	426d      	negs	r5, r5
 8002dcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dce:	07db      	lsls	r3, r3, #31
 8002dd0:	d405      	bmi.n	8002dde <_puts_r+0x6a>
 8002dd2:	89a3      	ldrh	r3, [r4, #12]
 8002dd4:	059b      	lsls	r3, r3, #22
 8002dd6:	d402      	bmi.n	8002dde <_puts_r+0x6a>
 8002dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dda:	f000 fae5 	bl	80033a8 <__retarget_lock_release_recursive>
 8002dde:	0028      	movs	r0, r5
 8002de0:	bd70      	pop	{r4, r5, r6, pc}
 8002de2:	4b1b      	ldr	r3, [pc, #108]	; (8002e50 <_puts_r+0xdc>)
 8002de4:	429c      	cmp	r4, r3
 8002de6:	d101      	bne.n	8002dec <_puts_r+0x78>
 8002de8:	68ac      	ldr	r4, [r5, #8]
 8002dea:	e7d8      	b.n	8002d9e <_puts_r+0x2a>
 8002dec:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <_puts_r+0xe0>)
 8002dee:	429c      	cmp	r4, r3
 8002df0:	d1d5      	bne.n	8002d9e <_puts_r+0x2a>
 8002df2:	68ec      	ldr	r4, [r5, #12]
 8002df4:	e7d3      	b.n	8002d9e <_puts_r+0x2a>
 8002df6:	3601      	adds	r6, #1
 8002df8:	60a3      	str	r3, [r4, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	da04      	bge.n	8002e08 <_puts_r+0x94>
 8002dfe:	69a2      	ldr	r2, [r4, #24]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	dc16      	bgt.n	8002e32 <_puts_r+0xbe>
 8002e04:	290a      	cmp	r1, #10
 8002e06:	d014      	beq.n	8002e32 <_puts_r+0xbe>
 8002e08:	6823      	ldr	r3, [r4, #0]
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	6022      	str	r2, [r4, #0]
 8002e0e:	7019      	strb	r1, [r3, #0]
 8002e10:	68a3      	ldr	r3, [r4, #8]
 8002e12:	7831      	ldrb	r1, [r6, #0]
 8002e14:	3b01      	subs	r3, #1
 8002e16:	2900      	cmp	r1, #0
 8002e18:	d1ed      	bne.n	8002df6 <_puts_r+0x82>
 8002e1a:	60a3      	str	r3, [r4, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	da0f      	bge.n	8002e40 <_puts_r+0xcc>
 8002e20:	0028      	movs	r0, r5
 8002e22:	0022      	movs	r2, r4
 8002e24:	310a      	adds	r1, #10
 8002e26:	f000 f821 	bl	8002e6c <__swbuf_r>
 8002e2a:	250a      	movs	r5, #10
 8002e2c:	1c43      	adds	r3, r0, #1
 8002e2e:	d1cd      	bne.n	8002dcc <_puts_r+0x58>
 8002e30:	e7ca      	b.n	8002dc8 <_puts_r+0x54>
 8002e32:	0022      	movs	r2, r4
 8002e34:	0028      	movs	r0, r5
 8002e36:	f000 f819 	bl	8002e6c <__swbuf_r>
 8002e3a:	1c43      	adds	r3, r0, #1
 8002e3c:	d1e8      	bne.n	8002e10 <_puts_r+0x9c>
 8002e3e:	e7c3      	b.n	8002dc8 <_puts_r+0x54>
 8002e40:	250a      	movs	r5, #10
 8002e42:	6823      	ldr	r3, [r4, #0]
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	6022      	str	r2, [r4, #0]
 8002e48:	701d      	strb	r5, [r3, #0]
 8002e4a:	e7bf      	b.n	8002dcc <_puts_r+0x58>
 8002e4c:	08003898 	.word	0x08003898
 8002e50:	080038b8 	.word	0x080038b8
 8002e54:	08003878 	.word	0x08003878

08002e58 <puts>:
 8002e58:	b510      	push	{r4, lr}
 8002e5a:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <puts+0x10>)
 8002e5c:	0001      	movs	r1, r0
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	f7ff ff88 	bl	8002d74 <_puts_r>
 8002e64:	bd10      	pop	{r4, pc}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	2000000c 	.word	0x2000000c

08002e6c <__swbuf_r>:
 8002e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6e:	0005      	movs	r5, r0
 8002e70:	000e      	movs	r6, r1
 8002e72:	0014      	movs	r4, r2
 8002e74:	2800      	cmp	r0, #0
 8002e76:	d004      	beq.n	8002e82 <__swbuf_r+0x16>
 8002e78:	6983      	ldr	r3, [r0, #24]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <__swbuf_r+0x16>
 8002e7e:	f000 f9f1 	bl	8003264 <__sinit>
 8002e82:	4b22      	ldr	r3, [pc, #136]	; (8002f0c <__swbuf_r+0xa0>)
 8002e84:	429c      	cmp	r4, r3
 8002e86:	d12e      	bne.n	8002ee6 <__swbuf_r+0x7a>
 8002e88:	686c      	ldr	r4, [r5, #4]
 8002e8a:	69a3      	ldr	r3, [r4, #24]
 8002e8c:	60a3      	str	r3, [r4, #8]
 8002e8e:	89a3      	ldrh	r3, [r4, #12]
 8002e90:	071b      	lsls	r3, r3, #28
 8002e92:	d532      	bpl.n	8002efa <__swbuf_r+0x8e>
 8002e94:	6923      	ldr	r3, [r4, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d02f      	beq.n	8002efa <__swbuf_r+0x8e>
 8002e9a:	6823      	ldr	r3, [r4, #0]
 8002e9c:	6922      	ldr	r2, [r4, #16]
 8002e9e:	b2f7      	uxtb	r7, r6
 8002ea0:	1a98      	subs	r0, r3, r2
 8002ea2:	6963      	ldr	r3, [r4, #20]
 8002ea4:	b2f6      	uxtb	r6, r6
 8002ea6:	4283      	cmp	r3, r0
 8002ea8:	dc05      	bgt.n	8002eb6 <__swbuf_r+0x4a>
 8002eaa:	0021      	movs	r1, r4
 8002eac:	0028      	movs	r0, r5
 8002eae:	f000 f937 	bl	8003120 <_fflush_r>
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	d127      	bne.n	8002f06 <__swbuf_r+0x9a>
 8002eb6:	68a3      	ldr	r3, [r4, #8]
 8002eb8:	3001      	adds	r0, #1
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	60a3      	str	r3, [r4, #8]
 8002ebe:	6823      	ldr	r3, [r4, #0]
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	6022      	str	r2, [r4, #0]
 8002ec4:	701f      	strb	r7, [r3, #0]
 8002ec6:	6963      	ldr	r3, [r4, #20]
 8002ec8:	4283      	cmp	r3, r0
 8002eca:	d004      	beq.n	8002ed6 <__swbuf_r+0x6a>
 8002ecc:	89a3      	ldrh	r3, [r4, #12]
 8002ece:	07db      	lsls	r3, r3, #31
 8002ed0:	d507      	bpl.n	8002ee2 <__swbuf_r+0x76>
 8002ed2:	2e0a      	cmp	r6, #10
 8002ed4:	d105      	bne.n	8002ee2 <__swbuf_r+0x76>
 8002ed6:	0021      	movs	r1, r4
 8002ed8:	0028      	movs	r0, r5
 8002eda:	f000 f921 	bl	8003120 <_fflush_r>
 8002ede:	2800      	cmp	r0, #0
 8002ee0:	d111      	bne.n	8002f06 <__swbuf_r+0x9a>
 8002ee2:	0030      	movs	r0, r6
 8002ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <__swbuf_r+0xa4>)
 8002ee8:	429c      	cmp	r4, r3
 8002eea:	d101      	bne.n	8002ef0 <__swbuf_r+0x84>
 8002eec:	68ac      	ldr	r4, [r5, #8]
 8002eee:	e7cc      	b.n	8002e8a <__swbuf_r+0x1e>
 8002ef0:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <__swbuf_r+0xa8>)
 8002ef2:	429c      	cmp	r4, r3
 8002ef4:	d1c9      	bne.n	8002e8a <__swbuf_r+0x1e>
 8002ef6:	68ec      	ldr	r4, [r5, #12]
 8002ef8:	e7c7      	b.n	8002e8a <__swbuf_r+0x1e>
 8002efa:	0021      	movs	r1, r4
 8002efc:	0028      	movs	r0, r5
 8002efe:	f000 f80b 	bl	8002f18 <__swsetup_r>
 8002f02:	2800      	cmp	r0, #0
 8002f04:	d0c9      	beq.n	8002e9a <__swbuf_r+0x2e>
 8002f06:	2601      	movs	r6, #1
 8002f08:	4276      	negs	r6, r6
 8002f0a:	e7ea      	b.n	8002ee2 <__swbuf_r+0x76>
 8002f0c:	08003898 	.word	0x08003898
 8002f10:	080038b8 	.word	0x080038b8
 8002f14:	08003878 	.word	0x08003878

08002f18 <__swsetup_r>:
 8002f18:	4b37      	ldr	r3, [pc, #220]	; (8002ff8 <__swsetup_r+0xe0>)
 8002f1a:	b570      	push	{r4, r5, r6, lr}
 8002f1c:	681d      	ldr	r5, [r3, #0]
 8002f1e:	0006      	movs	r6, r0
 8002f20:	000c      	movs	r4, r1
 8002f22:	2d00      	cmp	r5, #0
 8002f24:	d005      	beq.n	8002f32 <__swsetup_r+0x1a>
 8002f26:	69ab      	ldr	r3, [r5, #24]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <__swsetup_r+0x1a>
 8002f2c:	0028      	movs	r0, r5
 8002f2e:	f000 f999 	bl	8003264 <__sinit>
 8002f32:	4b32      	ldr	r3, [pc, #200]	; (8002ffc <__swsetup_r+0xe4>)
 8002f34:	429c      	cmp	r4, r3
 8002f36:	d10f      	bne.n	8002f58 <__swsetup_r+0x40>
 8002f38:	686c      	ldr	r4, [r5, #4]
 8002f3a:	230c      	movs	r3, #12
 8002f3c:	5ee2      	ldrsh	r2, [r4, r3]
 8002f3e:	b293      	uxth	r3, r2
 8002f40:	0711      	lsls	r1, r2, #28
 8002f42:	d42d      	bmi.n	8002fa0 <__swsetup_r+0x88>
 8002f44:	06d9      	lsls	r1, r3, #27
 8002f46:	d411      	bmi.n	8002f6c <__swsetup_r+0x54>
 8002f48:	2309      	movs	r3, #9
 8002f4a:	2001      	movs	r0, #1
 8002f4c:	6033      	str	r3, [r6, #0]
 8002f4e:	3337      	adds	r3, #55	; 0x37
 8002f50:	4313      	orrs	r3, r2
 8002f52:	81a3      	strh	r3, [r4, #12]
 8002f54:	4240      	negs	r0, r0
 8002f56:	bd70      	pop	{r4, r5, r6, pc}
 8002f58:	4b29      	ldr	r3, [pc, #164]	; (8003000 <__swsetup_r+0xe8>)
 8002f5a:	429c      	cmp	r4, r3
 8002f5c:	d101      	bne.n	8002f62 <__swsetup_r+0x4a>
 8002f5e:	68ac      	ldr	r4, [r5, #8]
 8002f60:	e7eb      	b.n	8002f3a <__swsetup_r+0x22>
 8002f62:	4b28      	ldr	r3, [pc, #160]	; (8003004 <__swsetup_r+0xec>)
 8002f64:	429c      	cmp	r4, r3
 8002f66:	d1e8      	bne.n	8002f3a <__swsetup_r+0x22>
 8002f68:	68ec      	ldr	r4, [r5, #12]
 8002f6a:	e7e6      	b.n	8002f3a <__swsetup_r+0x22>
 8002f6c:	075b      	lsls	r3, r3, #29
 8002f6e:	d513      	bpl.n	8002f98 <__swsetup_r+0x80>
 8002f70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f72:	2900      	cmp	r1, #0
 8002f74:	d008      	beq.n	8002f88 <__swsetup_r+0x70>
 8002f76:	0023      	movs	r3, r4
 8002f78:	3344      	adds	r3, #68	; 0x44
 8002f7a:	4299      	cmp	r1, r3
 8002f7c:	d002      	beq.n	8002f84 <__swsetup_r+0x6c>
 8002f7e:	0030      	movs	r0, r6
 8002f80:	f000 fa80 	bl	8003484 <_free_r>
 8002f84:	2300      	movs	r3, #0
 8002f86:	6363      	str	r3, [r4, #52]	; 0x34
 8002f88:	2224      	movs	r2, #36	; 0x24
 8002f8a:	89a3      	ldrh	r3, [r4, #12]
 8002f8c:	4393      	bics	r3, r2
 8002f8e:	81a3      	strh	r3, [r4, #12]
 8002f90:	2300      	movs	r3, #0
 8002f92:	6063      	str	r3, [r4, #4]
 8002f94:	6923      	ldr	r3, [r4, #16]
 8002f96:	6023      	str	r3, [r4, #0]
 8002f98:	2308      	movs	r3, #8
 8002f9a:	89a2      	ldrh	r2, [r4, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	81a3      	strh	r3, [r4, #12]
 8002fa0:	6923      	ldr	r3, [r4, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10b      	bne.n	8002fbe <__swsetup_r+0xa6>
 8002fa6:	21a0      	movs	r1, #160	; 0xa0
 8002fa8:	2280      	movs	r2, #128	; 0x80
 8002faa:	89a3      	ldrh	r3, [r4, #12]
 8002fac:	0089      	lsls	r1, r1, #2
 8002fae:	0092      	lsls	r2, r2, #2
 8002fb0:	400b      	ands	r3, r1
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d003      	beq.n	8002fbe <__swsetup_r+0xa6>
 8002fb6:	0021      	movs	r1, r4
 8002fb8:	0030      	movs	r0, r6
 8002fba:	f000 fa1f 	bl	80033fc <__smakebuf_r>
 8002fbe:	220c      	movs	r2, #12
 8002fc0:	5ea3      	ldrsh	r3, [r4, r2]
 8002fc2:	2001      	movs	r0, #1
 8002fc4:	001a      	movs	r2, r3
 8002fc6:	b299      	uxth	r1, r3
 8002fc8:	4002      	ands	r2, r0
 8002fca:	4203      	tst	r3, r0
 8002fcc:	d00f      	beq.n	8002fee <__swsetup_r+0xd6>
 8002fce:	2200      	movs	r2, #0
 8002fd0:	60a2      	str	r2, [r4, #8]
 8002fd2:	6962      	ldr	r2, [r4, #20]
 8002fd4:	4252      	negs	r2, r2
 8002fd6:	61a2      	str	r2, [r4, #24]
 8002fd8:	2000      	movs	r0, #0
 8002fda:	6922      	ldr	r2, [r4, #16]
 8002fdc:	4282      	cmp	r2, r0
 8002fde:	d1ba      	bne.n	8002f56 <__swsetup_r+0x3e>
 8002fe0:	060a      	lsls	r2, r1, #24
 8002fe2:	d5b8      	bpl.n	8002f56 <__swsetup_r+0x3e>
 8002fe4:	2240      	movs	r2, #64	; 0x40
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	81a3      	strh	r3, [r4, #12]
 8002fea:	3801      	subs	r0, #1
 8002fec:	e7b3      	b.n	8002f56 <__swsetup_r+0x3e>
 8002fee:	0788      	lsls	r0, r1, #30
 8002ff0:	d400      	bmi.n	8002ff4 <__swsetup_r+0xdc>
 8002ff2:	6962      	ldr	r2, [r4, #20]
 8002ff4:	60a2      	str	r2, [r4, #8]
 8002ff6:	e7ef      	b.n	8002fd8 <__swsetup_r+0xc0>
 8002ff8:	2000000c 	.word	0x2000000c
 8002ffc:	08003898 	.word	0x08003898
 8003000:	080038b8 	.word	0x080038b8
 8003004:	08003878 	.word	0x08003878

08003008 <__sflush_r>:
 8003008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800300a:	898b      	ldrh	r3, [r1, #12]
 800300c:	0005      	movs	r5, r0
 800300e:	000c      	movs	r4, r1
 8003010:	071a      	lsls	r2, r3, #28
 8003012:	d45f      	bmi.n	80030d4 <__sflush_r+0xcc>
 8003014:	684a      	ldr	r2, [r1, #4]
 8003016:	2a00      	cmp	r2, #0
 8003018:	dc04      	bgt.n	8003024 <__sflush_r+0x1c>
 800301a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800301c:	2a00      	cmp	r2, #0
 800301e:	dc01      	bgt.n	8003024 <__sflush_r+0x1c>
 8003020:	2000      	movs	r0, #0
 8003022:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003024:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003026:	2f00      	cmp	r7, #0
 8003028:	d0fa      	beq.n	8003020 <__sflush_r+0x18>
 800302a:	2200      	movs	r2, #0
 800302c:	2180      	movs	r1, #128	; 0x80
 800302e:	682e      	ldr	r6, [r5, #0]
 8003030:	602a      	str	r2, [r5, #0]
 8003032:	001a      	movs	r2, r3
 8003034:	0149      	lsls	r1, r1, #5
 8003036:	400a      	ands	r2, r1
 8003038:	420b      	tst	r3, r1
 800303a:	d034      	beq.n	80030a6 <__sflush_r+0x9e>
 800303c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800303e:	89a3      	ldrh	r3, [r4, #12]
 8003040:	075b      	lsls	r3, r3, #29
 8003042:	d506      	bpl.n	8003052 <__sflush_r+0x4a>
 8003044:	6863      	ldr	r3, [r4, #4]
 8003046:	1ac0      	subs	r0, r0, r3
 8003048:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <__sflush_r+0x4a>
 800304e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003050:	1ac0      	subs	r0, r0, r3
 8003052:	0002      	movs	r2, r0
 8003054:	6a21      	ldr	r1, [r4, #32]
 8003056:	2300      	movs	r3, #0
 8003058:	0028      	movs	r0, r5
 800305a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800305c:	47b8      	blx	r7
 800305e:	89a1      	ldrh	r1, [r4, #12]
 8003060:	1c43      	adds	r3, r0, #1
 8003062:	d106      	bne.n	8003072 <__sflush_r+0x6a>
 8003064:	682b      	ldr	r3, [r5, #0]
 8003066:	2b1d      	cmp	r3, #29
 8003068:	d831      	bhi.n	80030ce <__sflush_r+0xc6>
 800306a:	4a2c      	ldr	r2, [pc, #176]	; (800311c <__sflush_r+0x114>)
 800306c:	40da      	lsrs	r2, r3
 800306e:	07d3      	lsls	r3, r2, #31
 8003070:	d52d      	bpl.n	80030ce <__sflush_r+0xc6>
 8003072:	2300      	movs	r3, #0
 8003074:	6063      	str	r3, [r4, #4]
 8003076:	6923      	ldr	r3, [r4, #16]
 8003078:	6023      	str	r3, [r4, #0]
 800307a:	04cb      	lsls	r3, r1, #19
 800307c:	d505      	bpl.n	800308a <__sflush_r+0x82>
 800307e:	1c43      	adds	r3, r0, #1
 8003080:	d102      	bne.n	8003088 <__sflush_r+0x80>
 8003082:	682b      	ldr	r3, [r5, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d100      	bne.n	800308a <__sflush_r+0x82>
 8003088:	6560      	str	r0, [r4, #84]	; 0x54
 800308a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800308c:	602e      	str	r6, [r5, #0]
 800308e:	2900      	cmp	r1, #0
 8003090:	d0c6      	beq.n	8003020 <__sflush_r+0x18>
 8003092:	0023      	movs	r3, r4
 8003094:	3344      	adds	r3, #68	; 0x44
 8003096:	4299      	cmp	r1, r3
 8003098:	d002      	beq.n	80030a0 <__sflush_r+0x98>
 800309a:	0028      	movs	r0, r5
 800309c:	f000 f9f2 	bl	8003484 <_free_r>
 80030a0:	2000      	movs	r0, #0
 80030a2:	6360      	str	r0, [r4, #52]	; 0x34
 80030a4:	e7bd      	b.n	8003022 <__sflush_r+0x1a>
 80030a6:	2301      	movs	r3, #1
 80030a8:	0028      	movs	r0, r5
 80030aa:	6a21      	ldr	r1, [r4, #32]
 80030ac:	47b8      	blx	r7
 80030ae:	1c43      	adds	r3, r0, #1
 80030b0:	d1c5      	bne.n	800303e <__sflush_r+0x36>
 80030b2:	682b      	ldr	r3, [r5, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0c2      	beq.n	800303e <__sflush_r+0x36>
 80030b8:	2b1d      	cmp	r3, #29
 80030ba:	d001      	beq.n	80030c0 <__sflush_r+0xb8>
 80030bc:	2b16      	cmp	r3, #22
 80030be:	d101      	bne.n	80030c4 <__sflush_r+0xbc>
 80030c0:	602e      	str	r6, [r5, #0]
 80030c2:	e7ad      	b.n	8003020 <__sflush_r+0x18>
 80030c4:	2340      	movs	r3, #64	; 0x40
 80030c6:	89a2      	ldrh	r2, [r4, #12]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	81a3      	strh	r3, [r4, #12]
 80030cc:	e7a9      	b.n	8003022 <__sflush_r+0x1a>
 80030ce:	2340      	movs	r3, #64	; 0x40
 80030d0:	430b      	orrs	r3, r1
 80030d2:	e7fa      	b.n	80030ca <__sflush_r+0xc2>
 80030d4:	690f      	ldr	r7, [r1, #16]
 80030d6:	2f00      	cmp	r7, #0
 80030d8:	d0a2      	beq.n	8003020 <__sflush_r+0x18>
 80030da:	680a      	ldr	r2, [r1, #0]
 80030dc:	600f      	str	r7, [r1, #0]
 80030de:	1bd2      	subs	r2, r2, r7
 80030e0:	9201      	str	r2, [sp, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	079b      	lsls	r3, r3, #30
 80030e6:	d100      	bne.n	80030ea <__sflush_r+0xe2>
 80030e8:	694a      	ldr	r2, [r1, #20]
 80030ea:	60a2      	str	r2, [r4, #8]
 80030ec:	9b01      	ldr	r3, [sp, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	dc00      	bgt.n	80030f4 <__sflush_r+0xec>
 80030f2:	e795      	b.n	8003020 <__sflush_r+0x18>
 80030f4:	003a      	movs	r2, r7
 80030f6:	0028      	movs	r0, r5
 80030f8:	9b01      	ldr	r3, [sp, #4]
 80030fa:	6a21      	ldr	r1, [r4, #32]
 80030fc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80030fe:	47b0      	blx	r6
 8003100:	2800      	cmp	r0, #0
 8003102:	dc06      	bgt.n	8003112 <__sflush_r+0x10a>
 8003104:	2340      	movs	r3, #64	; 0x40
 8003106:	2001      	movs	r0, #1
 8003108:	89a2      	ldrh	r2, [r4, #12]
 800310a:	4240      	negs	r0, r0
 800310c:	4313      	orrs	r3, r2
 800310e:	81a3      	strh	r3, [r4, #12]
 8003110:	e787      	b.n	8003022 <__sflush_r+0x1a>
 8003112:	9b01      	ldr	r3, [sp, #4]
 8003114:	183f      	adds	r7, r7, r0
 8003116:	1a1b      	subs	r3, r3, r0
 8003118:	9301      	str	r3, [sp, #4]
 800311a:	e7e7      	b.n	80030ec <__sflush_r+0xe4>
 800311c:	20400001 	.word	0x20400001

08003120 <_fflush_r>:
 8003120:	690b      	ldr	r3, [r1, #16]
 8003122:	b570      	push	{r4, r5, r6, lr}
 8003124:	0005      	movs	r5, r0
 8003126:	000c      	movs	r4, r1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d102      	bne.n	8003132 <_fflush_r+0x12>
 800312c:	2500      	movs	r5, #0
 800312e:	0028      	movs	r0, r5
 8003130:	bd70      	pop	{r4, r5, r6, pc}
 8003132:	2800      	cmp	r0, #0
 8003134:	d004      	beq.n	8003140 <_fflush_r+0x20>
 8003136:	6983      	ldr	r3, [r0, #24]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <_fflush_r+0x20>
 800313c:	f000 f892 	bl	8003264 <__sinit>
 8003140:	4b14      	ldr	r3, [pc, #80]	; (8003194 <_fflush_r+0x74>)
 8003142:	429c      	cmp	r4, r3
 8003144:	d11b      	bne.n	800317e <_fflush_r+0x5e>
 8003146:	686c      	ldr	r4, [r5, #4]
 8003148:	220c      	movs	r2, #12
 800314a:	5ea3      	ldrsh	r3, [r4, r2]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0ed      	beq.n	800312c <_fflush_r+0xc>
 8003150:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003152:	07d2      	lsls	r2, r2, #31
 8003154:	d404      	bmi.n	8003160 <_fflush_r+0x40>
 8003156:	059b      	lsls	r3, r3, #22
 8003158:	d402      	bmi.n	8003160 <_fflush_r+0x40>
 800315a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800315c:	f000 f923 	bl	80033a6 <__retarget_lock_acquire_recursive>
 8003160:	0028      	movs	r0, r5
 8003162:	0021      	movs	r1, r4
 8003164:	f7ff ff50 	bl	8003008 <__sflush_r>
 8003168:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800316a:	0005      	movs	r5, r0
 800316c:	07db      	lsls	r3, r3, #31
 800316e:	d4de      	bmi.n	800312e <_fflush_r+0xe>
 8003170:	89a3      	ldrh	r3, [r4, #12]
 8003172:	059b      	lsls	r3, r3, #22
 8003174:	d4db      	bmi.n	800312e <_fflush_r+0xe>
 8003176:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003178:	f000 f916 	bl	80033a8 <__retarget_lock_release_recursive>
 800317c:	e7d7      	b.n	800312e <_fflush_r+0xe>
 800317e:	4b06      	ldr	r3, [pc, #24]	; (8003198 <_fflush_r+0x78>)
 8003180:	429c      	cmp	r4, r3
 8003182:	d101      	bne.n	8003188 <_fflush_r+0x68>
 8003184:	68ac      	ldr	r4, [r5, #8]
 8003186:	e7df      	b.n	8003148 <_fflush_r+0x28>
 8003188:	4b04      	ldr	r3, [pc, #16]	; (800319c <_fflush_r+0x7c>)
 800318a:	429c      	cmp	r4, r3
 800318c:	d1dc      	bne.n	8003148 <_fflush_r+0x28>
 800318e:	68ec      	ldr	r4, [r5, #12]
 8003190:	e7da      	b.n	8003148 <_fflush_r+0x28>
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	08003898 	.word	0x08003898
 8003198:	080038b8 	.word	0x080038b8
 800319c:	08003878 	.word	0x08003878

080031a0 <std>:
 80031a0:	2300      	movs	r3, #0
 80031a2:	b510      	push	{r4, lr}
 80031a4:	0004      	movs	r4, r0
 80031a6:	6003      	str	r3, [r0, #0]
 80031a8:	6043      	str	r3, [r0, #4]
 80031aa:	6083      	str	r3, [r0, #8]
 80031ac:	8181      	strh	r1, [r0, #12]
 80031ae:	6643      	str	r3, [r0, #100]	; 0x64
 80031b0:	0019      	movs	r1, r3
 80031b2:	81c2      	strh	r2, [r0, #14]
 80031b4:	6103      	str	r3, [r0, #16]
 80031b6:	6143      	str	r3, [r0, #20]
 80031b8:	6183      	str	r3, [r0, #24]
 80031ba:	2208      	movs	r2, #8
 80031bc:	305c      	adds	r0, #92	; 0x5c
 80031be:	f7ff fdd1 	bl	8002d64 <memset>
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <std+0x38>)
 80031c4:	6224      	str	r4, [r4, #32]
 80031c6:	6263      	str	r3, [r4, #36]	; 0x24
 80031c8:	4b04      	ldr	r3, [pc, #16]	; (80031dc <std+0x3c>)
 80031ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <std+0x40>)
 80031ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <std+0x44>)
 80031d2:	6323      	str	r3, [r4, #48]	; 0x30
 80031d4:	bd10      	pop	{r4, pc}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	0800366d 	.word	0x0800366d
 80031dc:	08003695 	.word	0x08003695
 80031e0:	080036cd 	.word	0x080036cd
 80031e4:	080036f9 	.word	0x080036f9

080031e8 <_cleanup_r>:
 80031e8:	b510      	push	{r4, lr}
 80031ea:	4902      	ldr	r1, [pc, #8]	; (80031f4 <_cleanup_r+0xc>)
 80031ec:	f000 f8ba 	bl	8003364 <_fwalk_reent>
 80031f0:	bd10      	pop	{r4, pc}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	08003121 	.word	0x08003121

080031f8 <__sfmoreglue>:
 80031f8:	b570      	push	{r4, r5, r6, lr}
 80031fa:	2568      	movs	r5, #104	; 0x68
 80031fc:	1e4a      	subs	r2, r1, #1
 80031fe:	4355      	muls	r5, r2
 8003200:	000e      	movs	r6, r1
 8003202:	0029      	movs	r1, r5
 8003204:	3174      	adds	r1, #116	; 0x74
 8003206:	f000 f9a9 	bl	800355c <_malloc_r>
 800320a:	1e04      	subs	r4, r0, #0
 800320c:	d008      	beq.n	8003220 <__sfmoreglue+0x28>
 800320e:	2100      	movs	r1, #0
 8003210:	002a      	movs	r2, r5
 8003212:	6001      	str	r1, [r0, #0]
 8003214:	6046      	str	r6, [r0, #4]
 8003216:	300c      	adds	r0, #12
 8003218:	60a0      	str	r0, [r4, #8]
 800321a:	3268      	adds	r2, #104	; 0x68
 800321c:	f7ff fda2 	bl	8002d64 <memset>
 8003220:	0020      	movs	r0, r4
 8003222:	bd70      	pop	{r4, r5, r6, pc}

08003224 <__sfp_lock_acquire>:
 8003224:	b510      	push	{r4, lr}
 8003226:	4802      	ldr	r0, [pc, #8]	; (8003230 <__sfp_lock_acquire+0xc>)
 8003228:	f000 f8bd 	bl	80033a6 <__retarget_lock_acquire_recursive>
 800322c:	bd10      	pop	{r4, pc}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	200001a5 	.word	0x200001a5

08003234 <__sfp_lock_release>:
 8003234:	b510      	push	{r4, lr}
 8003236:	4802      	ldr	r0, [pc, #8]	; (8003240 <__sfp_lock_release+0xc>)
 8003238:	f000 f8b6 	bl	80033a8 <__retarget_lock_release_recursive>
 800323c:	bd10      	pop	{r4, pc}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	200001a5 	.word	0x200001a5

08003244 <__sinit_lock_acquire>:
 8003244:	b510      	push	{r4, lr}
 8003246:	4802      	ldr	r0, [pc, #8]	; (8003250 <__sinit_lock_acquire+0xc>)
 8003248:	f000 f8ad 	bl	80033a6 <__retarget_lock_acquire_recursive>
 800324c:	bd10      	pop	{r4, pc}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	200001a6 	.word	0x200001a6

08003254 <__sinit_lock_release>:
 8003254:	b510      	push	{r4, lr}
 8003256:	4802      	ldr	r0, [pc, #8]	; (8003260 <__sinit_lock_release+0xc>)
 8003258:	f000 f8a6 	bl	80033a8 <__retarget_lock_release_recursive>
 800325c:	bd10      	pop	{r4, pc}
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	200001a6 	.word	0x200001a6

08003264 <__sinit>:
 8003264:	b513      	push	{r0, r1, r4, lr}
 8003266:	0004      	movs	r4, r0
 8003268:	f7ff ffec 	bl	8003244 <__sinit_lock_acquire>
 800326c:	69a3      	ldr	r3, [r4, #24]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <__sinit+0x14>
 8003272:	f7ff ffef 	bl	8003254 <__sinit_lock_release>
 8003276:	bd13      	pop	{r0, r1, r4, pc}
 8003278:	64a3      	str	r3, [r4, #72]	; 0x48
 800327a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800327c:	6523      	str	r3, [r4, #80]	; 0x50
 800327e:	4b13      	ldr	r3, [pc, #76]	; (80032cc <__sinit+0x68>)
 8003280:	4a13      	ldr	r2, [pc, #76]	; (80032d0 <__sinit+0x6c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	62a2      	str	r2, [r4, #40]	; 0x28
 8003286:	9301      	str	r3, [sp, #4]
 8003288:	42a3      	cmp	r3, r4
 800328a:	d101      	bne.n	8003290 <__sinit+0x2c>
 800328c:	2301      	movs	r3, #1
 800328e:	61a3      	str	r3, [r4, #24]
 8003290:	0020      	movs	r0, r4
 8003292:	f000 f81f 	bl	80032d4 <__sfp>
 8003296:	6060      	str	r0, [r4, #4]
 8003298:	0020      	movs	r0, r4
 800329a:	f000 f81b 	bl	80032d4 <__sfp>
 800329e:	60a0      	str	r0, [r4, #8]
 80032a0:	0020      	movs	r0, r4
 80032a2:	f000 f817 	bl	80032d4 <__sfp>
 80032a6:	2200      	movs	r2, #0
 80032a8:	2104      	movs	r1, #4
 80032aa:	60e0      	str	r0, [r4, #12]
 80032ac:	6860      	ldr	r0, [r4, #4]
 80032ae:	f7ff ff77 	bl	80031a0 <std>
 80032b2:	2201      	movs	r2, #1
 80032b4:	2109      	movs	r1, #9
 80032b6:	68a0      	ldr	r0, [r4, #8]
 80032b8:	f7ff ff72 	bl	80031a0 <std>
 80032bc:	2202      	movs	r2, #2
 80032be:	2112      	movs	r1, #18
 80032c0:	68e0      	ldr	r0, [r4, #12]
 80032c2:	f7ff ff6d 	bl	80031a0 <std>
 80032c6:	2301      	movs	r3, #1
 80032c8:	61a3      	str	r3, [r4, #24]
 80032ca:	e7d2      	b.n	8003272 <__sinit+0xe>
 80032cc:	08003874 	.word	0x08003874
 80032d0:	080031e9 	.word	0x080031e9

080032d4 <__sfp>:
 80032d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d6:	0007      	movs	r7, r0
 80032d8:	f7ff ffa4 	bl	8003224 <__sfp_lock_acquire>
 80032dc:	4b1f      	ldr	r3, [pc, #124]	; (800335c <__sfp+0x88>)
 80032de:	681e      	ldr	r6, [r3, #0]
 80032e0:	69b3      	ldr	r3, [r6, #24]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d102      	bne.n	80032ec <__sfp+0x18>
 80032e6:	0030      	movs	r0, r6
 80032e8:	f7ff ffbc 	bl	8003264 <__sinit>
 80032ec:	3648      	adds	r6, #72	; 0x48
 80032ee:	68b4      	ldr	r4, [r6, #8]
 80032f0:	6873      	ldr	r3, [r6, #4]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	d504      	bpl.n	8003300 <__sfp+0x2c>
 80032f6:	6833      	ldr	r3, [r6, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d022      	beq.n	8003342 <__sfp+0x6e>
 80032fc:	6836      	ldr	r6, [r6, #0]
 80032fe:	e7f6      	b.n	80032ee <__sfp+0x1a>
 8003300:	220c      	movs	r2, #12
 8003302:	5ea5      	ldrsh	r5, [r4, r2]
 8003304:	2d00      	cmp	r5, #0
 8003306:	d11a      	bne.n	800333e <__sfp+0x6a>
 8003308:	0020      	movs	r0, r4
 800330a:	4b15      	ldr	r3, [pc, #84]	; (8003360 <__sfp+0x8c>)
 800330c:	3058      	adds	r0, #88	; 0x58
 800330e:	60e3      	str	r3, [r4, #12]
 8003310:	6665      	str	r5, [r4, #100]	; 0x64
 8003312:	f000 f847 	bl	80033a4 <__retarget_lock_init_recursive>
 8003316:	f7ff ff8d 	bl	8003234 <__sfp_lock_release>
 800331a:	0020      	movs	r0, r4
 800331c:	2208      	movs	r2, #8
 800331e:	0029      	movs	r1, r5
 8003320:	6025      	str	r5, [r4, #0]
 8003322:	60a5      	str	r5, [r4, #8]
 8003324:	6065      	str	r5, [r4, #4]
 8003326:	6125      	str	r5, [r4, #16]
 8003328:	6165      	str	r5, [r4, #20]
 800332a:	61a5      	str	r5, [r4, #24]
 800332c:	305c      	adds	r0, #92	; 0x5c
 800332e:	f7ff fd19 	bl	8002d64 <memset>
 8003332:	6365      	str	r5, [r4, #52]	; 0x34
 8003334:	63a5      	str	r5, [r4, #56]	; 0x38
 8003336:	64a5      	str	r5, [r4, #72]	; 0x48
 8003338:	64e5      	str	r5, [r4, #76]	; 0x4c
 800333a:	0020      	movs	r0, r4
 800333c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800333e:	3468      	adds	r4, #104	; 0x68
 8003340:	e7d7      	b.n	80032f2 <__sfp+0x1e>
 8003342:	2104      	movs	r1, #4
 8003344:	0038      	movs	r0, r7
 8003346:	f7ff ff57 	bl	80031f8 <__sfmoreglue>
 800334a:	1e04      	subs	r4, r0, #0
 800334c:	6030      	str	r0, [r6, #0]
 800334e:	d1d5      	bne.n	80032fc <__sfp+0x28>
 8003350:	f7ff ff70 	bl	8003234 <__sfp_lock_release>
 8003354:	230c      	movs	r3, #12
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	e7ef      	b.n	800333a <__sfp+0x66>
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	08003874 	.word	0x08003874
 8003360:	ffff0001 	.word	0xffff0001

08003364 <_fwalk_reent>:
 8003364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003366:	0004      	movs	r4, r0
 8003368:	0006      	movs	r6, r0
 800336a:	2700      	movs	r7, #0
 800336c:	9101      	str	r1, [sp, #4]
 800336e:	3448      	adds	r4, #72	; 0x48
 8003370:	6863      	ldr	r3, [r4, #4]
 8003372:	68a5      	ldr	r5, [r4, #8]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	9b00      	ldr	r3, [sp, #0]
 8003378:	3b01      	subs	r3, #1
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	d504      	bpl.n	8003388 <_fwalk_reent+0x24>
 800337e:	6824      	ldr	r4, [r4, #0]
 8003380:	2c00      	cmp	r4, #0
 8003382:	d1f5      	bne.n	8003370 <_fwalk_reent+0xc>
 8003384:	0038      	movs	r0, r7
 8003386:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003388:	89ab      	ldrh	r3, [r5, #12]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d908      	bls.n	80033a0 <_fwalk_reent+0x3c>
 800338e:	220e      	movs	r2, #14
 8003390:	5eab      	ldrsh	r3, [r5, r2]
 8003392:	3301      	adds	r3, #1
 8003394:	d004      	beq.n	80033a0 <_fwalk_reent+0x3c>
 8003396:	0029      	movs	r1, r5
 8003398:	0030      	movs	r0, r6
 800339a:	9b01      	ldr	r3, [sp, #4]
 800339c:	4798      	blx	r3
 800339e:	4307      	orrs	r7, r0
 80033a0:	3568      	adds	r5, #104	; 0x68
 80033a2:	e7e8      	b.n	8003376 <_fwalk_reent+0x12>

080033a4 <__retarget_lock_init_recursive>:
 80033a4:	4770      	bx	lr

080033a6 <__retarget_lock_acquire_recursive>:
 80033a6:	4770      	bx	lr

080033a8 <__retarget_lock_release_recursive>:
 80033a8:	4770      	bx	lr
	...

080033ac <__swhatbuf_r>:
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	000e      	movs	r6, r1
 80033b0:	001d      	movs	r5, r3
 80033b2:	230e      	movs	r3, #14
 80033b4:	5ec9      	ldrsh	r1, [r1, r3]
 80033b6:	0014      	movs	r4, r2
 80033b8:	b096      	sub	sp, #88	; 0x58
 80033ba:	2900      	cmp	r1, #0
 80033bc:	da08      	bge.n	80033d0 <__swhatbuf_r+0x24>
 80033be:	220c      	movs	r2, #12
 80033c0:	5eb3      	ldrsh	r3, [r6, r2]
 80033c2:	2200      	movs	r2, #0
 80033c4:	602a      	str	r2, [r5, #0]
 80033c6:	061b      	lsls	r3, r3, #24
 80033c8:	d411      	bmi.n	80033ee <__swhatbuf_r+0x42>
 80033ca:	2380      	movs	r3, #128	; 0x80
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	e00f      	b.n	80033f0 <__swhatbuf_r+0x44>
 80033d0:	466a      	mov	r2, sp
 80033d2:	f000 f9bd 	bl	8003750 <_fstat_r>
 80033d6:	2800      	cmp	r0, #0
 80033d8:	dbf1      	blt.n	80033be <__swhatbuf_r+0x12>
 80033da:	23f0      	movs	r3, #240	; 0xf0
 80033dc:	9901      	ldr	r1, [sp, #4]
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	4019      	ands	r1, r3
 80033e2:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <__swhatbuf_r+0x4c>)
 80033e4:	18c9      	adds	r1, r1, r3
 80033e6:	424b      	negs	r3, r1
 80033e8:	4159      	adcs	r1, r3
 80033ea:	6029      	str	r1, [r5, #0]
 80033ec:	e7ed      	b.n	80033ca <__swhatbuf_r+0x1e>
 80033ee:	2340      	movs	r3, #64	; 0x40
 80033f0:	2000      	movs	r0, #0
 80033f2:	6023      	str	r3, [r4, #0]
 80033f4:	b016      	add	sp, #88	; 0x58
 80033f6:	bd70      	pop	{r4, r5, r6, pc}
 80033f8:	ffffe000 	.word	0xffffe000

080033fc <__smakebuf_r>:
 80033fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033fe:	2602      	movs	r6, #2
 8003400:	898b      	ldrh	r3, [r1, #12]
 8003402:	0005      	movs	r5, r0
 8003404:	000c      	movs	r4, r1
 8003406:	4233      	tst	r3, r6
 8003408:	d006      	beq.n	8003418 <__smakebuf_r+0x1c>
 800340a:	0023      	movs	r3, r4
 800340c:	3347      	adds	r3, #71	; 0x47
 800340e:	6023      	str	r3, [r4, #0]
 8003410:	6123      	str	r3, [r4, #16]
 8003412:	2301      	movs	r3, #1
 8003414:	6163      	str	r3, [r4, #20]
 8003416:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003418:	466a      	mov	r2, sp
 800341a:	ab01      	add	r3, sp, #4
 800341c:	f7ff ffc6 	bl	80033ac <__swhatbuf_r>
 8003420:	9900      	ldr	r1, [sp, #0]
 8003422:	0007      	movs	r7, r0
 8003424:	0028      	movs	r0, r5
 8003426:	f000 f899 	bl	800355c <_malloc_r>
 800342a:	2800      	cmp	r0, #0
 800342c:	d108      	bne.n	8003440 <__smakebuf_r+0x44>
 800342e:	220c      	movs	r2, #12
 8003430:	5ea3      	ldrsh	r3, [r4, r2]
 8003432:	059a      	lsls	r2, r3, #22
 8003434:	d4ef      	bmi.n	8003416 <__smakebuf_r+0x1a>
 8003436:	2203      	movs	r2, #3
 8003438:	4393      	bics	r3, r2
 800343a:	431e      	orrs	r6, r3
 800343c:	81a6      	strh	r6, [r4, #12]
 800343e:	e7e4      	b.n	800340a <__smakebuf_r+0xe>
 8003440:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <__smakebuf_r+0x84>)
 8003442:	62ab      	str	r3, [r5, #40]	; 0x28
 8003444:	2380      	movs	r3, #128	; 0x80
 8003446:	89a2      	ldrh	r2, [r4, #12]
 8003448:	6020      	str	r0, [r4, #0]
 800344a:	4313      	orrs	r3, r2
 800344c:	81a3      	strh	r3, [r4, #12]
 800344e:	9b00      	ldr	r3, [sp, #0]
 8003450:	6120      	str	r0, [r4, #16]
 8003452:	6163      	str	r3, [r4, #20]
 8003454:	9b01      	ldr	r3, [sp, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00d      	beq.n	8003476 <__smakebuf_r+0x7a>
 800345a:	0028      	movs	r0, r5
 800345c:	230e      	movs	r3, #14
 800345e:	5ee1      	ldrsh	r1, [r4, r3]
 8003460:	f000 f988 	bl	8003774 <_isatty_r>
 8003464:	2800      	cmp	r0, #0
 8003466:	d006      	beq.n	8003476 <__smakebuf_r+0x7a>
 8003468:	2203      	movs	r2, #3
 800346a:	89a3      	ldrh	r3, [r4, #12]
 800346c:	4393      	bics	r3, r2
 800346e:	001a      	movs	r2, r3
 8003470:	2301      	movs	r3, #1
 8003472:	4313      	orrs	r3, r2
 8003474:	81a3      	strh	r3, [r4, #12]
 8003476:	89a0      	ldrh	r0, [r4, #12]
 8003478:	4307      	orrs	r7, r0
 800347a:	81a7      	strh	r7, [r4, #12]
 800347c:	e7cb      	b.n	8003416 <__smakebuf_r+0x1a>
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	080031e9 	.word	0x080031e9

08003484 <_free_r>:
 8003484:	b570      	push	{r4, r5, r6, lr}
 8003486:	0005      	movs	r5, r0
 8003488:	2900      	cmp	r1, #0
 800348a:	d010      	beq.n	80034ae <_free_r+0x2a>
 800348c:	1f0c      	subs	r4, r1, #4
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	da00      	bge.n	8003496 <_free_r+0x12>
 8003494:	18e4      	adds	r4, r4, r3
 8003496:	0028      	movs	r0, r5
 8003498:	f000 f992 	bl	80037c0 <__malloc_lock>
 800349c:	4a1d      	ldr	r2, [pc, #116]	; (8003514 <_free_r+0x90>)
 800349e:	6813      	ldr	r3, [r2, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d105      	bne.n	80034b0 <_free_r+0x2c>
 80034a4:	6063      	str	r3, [r4, #4]
 80034a6:	6014      	str	r4, [r2, #0]
 80034a8:	0028      	movs	r0, r5
 80034aa:	f000 f991 	bl	80037d0 <__malloc_unlock>
 80034ae:	bd70      	pop	{r4, r5, r6, pc}
 80034b0:	42a3      	cmp	r3, r4
 80034b2:	d908      	bls.n	80034c6 <_free_r+0x42>
 80034b4:	6821      	ldr	r1, [r4, #0]
 80034b6:	1860      	adds	r0, r4, r1
 80034b8:	4283      	cmp	r3, r0
 80034ba:	d1f3      	bne.n	80034a4 <_free_r+0x20>
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	1841      	adds	r1, r0, r1
 80034c2:	6021      	str	r1, [r4, #0]
 80034c4:	e7ee      	b.n	80034a4 <_free_r+0x20>
 80034c6:	001a      	movs	r2, r3
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <_free_r+0x4e>
 80034ce:	42a3      	cmp	r3, r4
 80034d0:	d9f9      	bls.n	80034c6 <_free_r+0x42>
 80034d2:	6811      	ldr	r1, [r2, #0]
 80034d4:	1850      	adds	r0, r2, r1
 80034d6:	42a0      	cmp	r0, r4
 80034d8:	d10b      	bne.n	80034f2 <_free_r+0x6e>
 80034da:	6820      	ldr	r0, [r4, #0]
 80034dc:	1809      	adds	r1, r1, r0
 80034de:	1850      	adds	r0, r2, r1
 80034e0:	6011      	str	r1, [r2, #0]
 80034e2:	4283      	cmp	r3, r0
 80034e4:	d1e0      	bne.n	80034a8 <_free_r+0x24>
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	1841      	adds	r1, r0, r1
 80034ec:	6011      	str	r1, [r2, #0]
 80034ee:	6053      	str	r3, [r2, #4]
 80034f0:	e7da      	b.n	80034a8 <_free_r+0x24>
 80034f2:	42a0      	cmp	r0, r4
 80034f4:	d902      	bls.n	80034fc <_free_r+0x78>
 80034f6:	230c      	movs	r3, #12
 80034f8:	602b      	str	r3, [r5, #0]
 80034fa:	e7d5      	b.n	80034a8 <_free_r+0x24>
 80034fc:	6821      	ldr	r1, [r4, #0]
 80034fe:	1860      	adds	r0, r4, r1
 8003500:	4283      	cmp	r3, r0
 8003502:	d103      	bne.n	800350c <_free_r+0x88>
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	1841      	adds	r1, r0, r1
 800350a:	6021      	str	r1, [r4, #0]
 800350c:	6063      	str	r3, [r4, #4]
 800350e:	6054      	str	r4, [r2, #4]
 8003510:	e7ca      	b.n	80034a8 <_free_r+0x24>
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	200001a8 	.word	0x200001a8

08003518 <sbrk_aligned>:
 8003518:	b570      	push	{r4, r5, r6, lr}
 800351a:	4e0f      	ldr	r6, [pc, #60]	; (8003558 <sbrk_aligned+0x40>)
 800351c:	000d      	movs	r5, r1
 800351e:	6831      	ldr	r1, [r6, #0]
 8003520:	0004      	movs	r4, r0
 8003522:	2900      	cmp	r1, #0
 8003524:	d102      	bne.n	800352c <sbrk_aligned+0x14>
 8003526:	f000 f88f 	bl	8003648 <_sbrk_r>
 800352a:	6030      	str	r0, [r6, #0]
 800352c:	0029      	movs	r1, r5
 800352e:	0020      	movs	r0, r4
 8003530:	f000 f88a 	bl	8003648 <_sbrk_r>
 8003534:	1c43      	adds	r3, r0, #1
 8003536:	d00a      	beq.n	800354e <sbrk_aligned+0x36>
 8003538:	2303      	movs	r3, #3
 800353a:	1cc5      	adds	r5, r0, #3
 800353c:	439d      	bics	r5, r3
 800353e:	42a8      	cmp	r0, r5
 8003540:	d007      	beq.n	8003552 <sbrk_aligned+0x3a>
 8003542:	1a29      	subs	r1, r5, r0
 8003544:	0020      	movs	r0, r4
 8003546:	f000 f87f 	bl	8003648 <_sbrk_r>
 800354a:	1c43      	adds	r3, r0, #1
 800354c:	d101      	bne.n	8003552 <sbrk_aligned+0x3a>
 800354e:	2501      	movs	r5, #1
 8003550:	426d      	negs	r5, r5
 8003552:	0028      	movs	r0, r5
 8003554:	bd70      	pop	{r4, r5, r6, pc}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	200001ac 	.word	0x200001ac

0800355c <_malloc_r>:
 800355c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800355e:	2203      	movs	r2, #3
 8003560:	1ccb      	adds	r3, r1, #3
 8003562:	4393      	bics	r3, r2
 8003564:	3308      	adds	r3, #8
 8003566:	0006      	movs	r6, r0
 8003568:	001f      	movs	r7, r3
 800356a:	2b0c      	cmp	r3, #12
 800356c:	d232      	bcs.n	80035d4 <_malloc_r+0x78>
 800356e:	270c      	movs	r7, #12
 8003570:	42b9      	cmp	r1, r7
 8003572:	d831      	bhi.n	80035d8 <_malloc_r+0x7c>
 8003574:	0030      	movs	r0, r6
 8003576:	f000 f923 	bl	80037c0 <__malloc_lock>
 800357a:	4d32      	ldr	r5, [pc, #200]	; (8003644 <_malloc_r+0xe8>)
 800357c:	682b      	ldr	r3, [r5, #0]
 800357e:	001c      	movs	r4, r3
 8003580:	2c00      	cmp	r4, #0
 8003582:	d12e      	bne.n	80035e2 <_malloc_r+0x86>
 8003584:	0039      	movs	r1, r7
 8003586:	0030      	movs	r0, r6
 8003588:	f7ff ffc6 	bl	8003518 <sbrk_aligned>
 800358c:	0004      	movs	r4, r0
 800358e:	1c43      	adds	r3, r0, #1
 8003590:	d11e      	bne.n	80035d0 <_malloc_r+0x74>
 8003592:	682c      	ldr	r4, [r5, #0]
 8003594:	0025      	movs	r5, r4
 8003596:	2d00      	cmp	r5, #0
 8003598:	d14a      	bne.n	8003630 <_malloc_r+0xd4>
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	0029      	movs	r1, r5
 800359e:	18e3      	adds	r3, r4, r3
 80035a0:	0030      	movs	r0, r6
 80035a2:	9301      	str	r3, [sp, #4]
 80035a4:	f000 f850 	bl	8003648 <_sbrk_r>
 80035a8:	9b01      	ldr	r3, [sp, #4]
 80035aa:	4283      	cmp	r3, r0
 80035ac:	d143      	bne.n	8003636 <_malloc_r+0xda>
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	3703      	adds	r7, #3
 80035b2:	1aff      	subs	r7, r7, r3
 80035b4:	2303      	movs	r3, #3
 80035b6:	439f      	bics	r7, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	2f0c      	cmp	r7, #12
 80035bc:	d200      	bcs.n	80035c0 <_malloc_r+0x64>
 80035be:	270c      	movs	r7, #12
 80035c0:	0039      	movs	r1, r7
 80035c2:	0030      	movs	r0, r6
 80035c4:	f7ff ffa8 	bl	8003518 <sbrk_aligned>
 80035c8:	1c43      	adds	r3, r0, #1
 80035ca:	d034      	beq.n	8003636 <_malloc_r+0xda>
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	19df      	adds	r7, r3, r7
 80035d0:	6027      	str	r7, [r4, #0]
 80035d2:	e013      	b.n	80035fc <_malloc_r+0xa0>
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	dacb      	bge.n	8003570 <_malloc_r+0x14>
 80035d8:	230c      	movs	r3, #12
 80035da:	2500      	movs	r5, #0
 80035dc:	6033      	str	r3, [r6, #0]
 80035de:	0028      	movs	r0, r5
 80035e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80035e2:	6822      	ldr	r2, [r4, #0]
 80035e4:	1bd1      	subs	r1, r2, r7
 80035e6:	d420      	bmi.n	800362a <_malloc_r+0xce>
 80035e8:	290b      	cmp	r1, #11
 80035ea:	d917      	bls.n	800361c <_malloc_r+0xc0>
 80035ec:	19e2      	adds	r2, r4, r7
 80035ee:	6027      	str	r7, [r4, #0]
 80035f0:	42a3      	cmp	r3, r4
 80035f2:	d111      	bne.n	8003618 <_malloc_r+0xbc>
 80035f4:	602a      	str	r2, [r5, #0]
 80035f6:	6863      	ldr	r3, [r4, #4]
 80035f8:	6011      	str	r1, [r2, #0]
 80035fa:	6053      	str	r3, [r2, #4]
 80035fc:	0030      	movs	r0, r6
 80035fe:	0025      	movs	r5, r4
 8003600:	f000 f8e6 	bl	80037d0 <__malloc_unlock>
 8003604:	2207      	movs	r2, #7
 8003606:	350b      	adds	r5, #11
 8003608:	1d23      	adds	r3, r4, #4
 800360a:	4395      	bics	r5, r2
 800360c:	1aea      	subs	r2, r5, r3
 800360e:	429d      	cmp	r5, r3
 8003610:	d0e5      	beq.n	80035de <_malloc_r+0x82>
 8003612:	1b5b      	subs	r3, r3, r5
 8003614:	50a3      	str	r3, [r4, r2]
 8003616:	e7e2      	b.n	80035de <_malloc_r+0x82>
 8003618:	605a      	str	r2, [r3, #4]
 800361a:	e7ec      	b.n	80035f6 <_malloc_r+0x9a>
 800361c:	6862      	ldr	r2, [r4, #4]
 800361e:	42a3      	cmp	r3, r4
 8003620:	d101      	bne.n	8003626 <_malloc_r+0xca>
 8003622:	602a      	str	r2, [r5, #0]
 8003624:	e7ea      	b.n	80035fc <_malloc_r+0xa0>
 8003626:	605a      	str	r2, [r3, #4]
 8003628:	e7e8      	b.n	80035fc <_malloc_r+0xa0>
 800362a:	0023      	movs	r3, r4
 800362c:	6864      	ldr	r4, [r4, #4]
 800362e:	e7a7      	b.n	8003580 <_malloc_r+0x24>
 8003630:	002c      	movs	r4, r5
 8003632:	686d      	ldr	r5, [r5, #4]
 8003634:	e7af      	b.n	8003596 <_malloc_r+0x3a>
 8003636:	230c      	movs	r3, #12
 8003638:	0030      	movs	r0, r6
 800363a:	6033      	str	r3, [r6, #0]
 800363c:	f000 f8c8 	bl	80037d0 <__malloc_unlock>
 8003640:	e7cd      	b.n	80035de <_malloc_r+0x82>
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	200001a8 	.word	0x200001a8

08003648 <_sbrk_r>:
 8003648:	2300      	movs	r3, #0
 800364a:	b570      	push	{r4, r5, r6, lr}
 800364c:	4d06      	ldr	r5, [pc, #24]	; (8003668 <_sbrk_r+0x20>)
 800364e:	0004      	movs	r4, r0
 8003650:	0008      	movs	r0, r1
 8003652:	602b      	str	r3, [r5, #0]
 8003654:	f7fc ffaa 	bl	80005ac <_sbrk>
 8003658:	1c43      	adds	r3, r0, #1
 800365a:	d103      	bne.n	8003664 <_sbrk_r+0x1c>
 800365c:	682b      	ldr	r3, [r5, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d000      	beq.n	8003664 <_sbrk_r+0x1c>
 8003662:	6023      	str	r3, [r4, #0]
 8003664:	bd70      	pop	{r4, r5, r6, pc}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	200001b0 	.word	0x200001b0

0800366c <__sread>:
 800366c:	b570      	push	{r4, r5, r6, lr}
 800366e:	000c      	movs	r4, r1
 8003670:	250e      	movs	r5, #14
 8003672:	5f49      	ldrsh	r1, [r1, r5]
 8003674:	f000 f8b4 	bl	80037e0 <_read_r>
 8003678:	2800      	cmp	r0, #0
 800367a:	db03      	blt.n	8003684 <__sread+0x18>
 800367c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800367e:	181b      	adds	r3, r3, r0
 8003680:	6563      	str	r3, [r4, #84]	; 0x54
 8003682:	bd70      	pop	{r4, r5, r6, pc}
 8003684:	89a3      	ldrh	r3, [r4, #12]
 8003686:	4a02      	ldr	r2, [pc, #8]	; (8003690 <__sread+0x24>)
 8003688:	4013      	ands	r3, r2
 800368a:	81a3      	strh	r3, [r4, #12]
 800368c:	e7f9      	b.n	8003682 <__sread+0x16>
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	ffffefff 	.word	0xffffefff

08003694 <__swrite>:
 8003694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003696:	001f      	movs	r7, r3
 8003698:	898b      	ldrh	r3, [r1, #12]
 800369a:	0005      	movs	r5, r0
 800369c:	000c      	movs	r4, r1
 800369e:	0016      	movs	r6, r2
 80036a0:	05db      	lsls	r3, r3, #23
 80036a2:	d505      	bpl.n	80036b0 <__swrite+0x1c>
 80036a4:	230e      	movs	r3, #14
 80036a6:	5ec9      	ldrsh	r1, [r1, r3]
 80036a8:	2200      	movs	r2, #0
 80036aa:	2302      	movs	r3, #2
 80036ac:	f000 f874 	bl	8003798 <_lseek_r>
 80036b0:	89a3      	ldrh	r3, [r4, #12]
 80036b2:	4a05      	ldr	r2, [pc, #20]	; (80036c8 <__swrite+0x34>)
 80036b4:	0028      	movs	r0, r5
 80036b6:	4013      	ands	r3, r2
 80036b8:	81a3      	strh	r3, [r4, #12]
 80036ba:	0032      	movs	r2, r6
 80036bc:	230e      	movs	r3, #14
 80036be:	5ee1      	ldrsh	r1, [r4, r3]
 80036c0:	003b      	movs	r3, r7
 80036c2:	f000 f81f 	bl	8003704 <_write_r>
 80036c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036c8:	ffffefff 	.word	0xffffefff

080036cc <__sseek>:
 80036cc:	b570      	push	{r4, r5, r6, lr}
 80036ce:	000c      	movs	r4, r1
 80036d0:	250e      	movs	r5, #14
 80036d2:	5f49      	ldrsh	r1, [r1, r5]
 80036d4:	f000 f860 	bl	8003798 <_lseek_r>
 80036d8:	89a3      	ldrh	r3, [r4, #12]
 80036da:	1c42      	adds	r2, r0, #1
 80036dc:	d103      	bne.n	80036e6 <__sseek+0x1a>
 80036de:	4a05      	ldr	r2, [pc, #20]	; (80036f4 <__sseek+0x28>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	81a3      	strh	r3, [r4, #12]
 80036e4:	bd70      	pop	{r4, r5, r6, pc}
 80036e6:	2280      	movs	r2, #128	; 0x80
 80036e8:	0152      	lsls	r2, r2, #5
 80036ea:	4313      	orrs	r3, r2
 80036ec:	81a3      	strh	r3, [r4, #12]
 80036ee:	6560      	str	r0, [r4, #84]	; 0x54
 80036f0:	e7f8      	b.n	80036e4 <__sseek+0x18>
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	ffffefff 	.word	0xffffefff

080036f8 <__sclose>:
 80036f8:	b510      	push	{r4, lr}
 80036fa:	230e      	movs	r3, #14
 80036fc:	5ec9      	ldrsh	r1, [r1, r3]
 80036fe:	f000 f815 	bl	800372c <_close_r>
 8003702:	bd10      	pop	{r4, pc}

08003704 <_write_r>:
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	0004      	movs	r4, r0
 8003708:	0008      	movs	r0, r1
 800370a:	0011      	movs	r1, r2
 800370c:	001a      	movs	r2, r3
 800370e:	2300      	movs	r3, #0
 8003710:	4d05      	ldr	r5, [pc, #20]	; (8003728 <_write_r+0x24>)
 8003712:	602b      	str	r3, [r5, #0]
 8003714:	f7fc fe0a 	bl	800032c <_write>
 8003718:	1c43      	adds	r3, r0, #1
 800371a:	d103      	bne.n	8003724 <_write_r+0x20>
 800371c:	682b      	ldr	r3, [r5, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d000      	beq.n	8003724 <_write_r+0x20>
 8003722:	6023      	str	r3, [r4, #0]
 8003724:	bd70      	pop	{r4, r5, r6, pc}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	200001b0 	.word	0x200001b0

0800372c <_close_r>:
 800372c:	2300      	movs	r3, #0
 800372e:	b570      	push	{r4, r5, r6, lr}
 8003730:	4d06      	ldr	r5, [pc, #24]	; (800374c <_close_r+0x20>)
 8003732:	0004      	movs	r4, r0
 8003734:	0008      	movs	r0, r1
 8003736:	602b      	str	r3, [r5, #0]
 8003738:	f7fc ff0b 	bl	8000552 <_close>
 800373c:	1c43      	adds	r3, r0, #1
 800373e:	d103      	bne.n	8003748 <_close_r+0x1c>
 8003740:	682b      	ldr	r3, [r5, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d000      	beq.n	8003748 <_close_r+0x1c>
 8003746:	6023      	str	r3, [r4, #0]
 8003748:	bd70      	pop	{r4, r5, r6, pc}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	200001b0 	.word	0x200001b0

08003750 <_fstat_r>:
 8003750:	2300      	movs	r3, #0
 8003752:	b570      	push	{r4, r5, r6, lr}
 8003754:	4d06      	ldr	r5, [pc, #24]	; (8003770 <_fstat_r+0x20>)
 8003756:	0004      	movs	r4, r0
 8003758:	0008      	movs	r0, r1
 800375a:	0011      	movs	r1, r2
 800375c:	602b      	str	r3, [r5, #0]
 800375e:	f7fc ff02 	bl	8000566 <_fstat>
 8003762:	1c43      	adds	r3, r0, #1
 8003764:	d103      	bne.n	800376e <_fstat_r+0x1e>
 8003766:	682b      	ldr	r3, [r5, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d000      	beq.n	800376e <_fstat_r+0x1e>
 800376c:	6023      	str	r3, [r4, #0]
 800376e:	bd70      	pop	{r4, r5, r6, pc}
 8003770:	200001b0 	.word	0x200001b0

08003774 <_isatty_r>:
 8003774:	2300      	movs	r3, #0
 8003776:	b570      	push	{r4, r5, r6, lr}
 8003778:	4d06      	ldr	r5, [pc, #24]	; (8003794 <_isatty_r+0x20>)
 800377a:	0004      	movs	r4, r0
 800377c:	0008      	movs	r0, r1
 800377e:	602b      	str	r3, [r5, #0]
 8003780:	f7fc feff 	bl	8000582 <_isatty>
 8003784:	1c43      	adds	r3, r0, #1
 8003786:	d103      	bne.n	8003790 <_isatty_r+0x1c>
 8003788:	682b      	ldr	r3, [r5, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d000      	beq.n	8003790 <_isatty_r+0x1c>
 800378e:	6023      	str	r3, [r4, #0]
 8003790:	bd70      	pop	{r4, r5, r6, pc}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	200001b0 	.word	0x200001b0

08003798 <_lseek_r>:
 8003798:	b570      	push	{r4, r5, r6, lr}
 800379a:	0004      	movs	r4, r0
 800379c:	0008      	movs	r0, r1
 800379e:	0011      	movs	r1, r2
 80037a0:	001a      	movs	r2, r3
 80037a2:	2300      	movs	r3, #0
 80037a4:	4d05      	ldr	r5, [pc, #20]	; (80037bc <_lseek_r+0x24>)
 80037a6:	602b      	str	r3, [r5, #0]
 80037a8:	f7fc fef4 	bl	8000594 <_lseek>
 80037ac:	1c43      	adds	r3, r0, #1
 80037ae:	d103      	bne.n	80037b8 <_lseek_r+0x20>
 80037b0:	682b      	ldr	r3, [r5, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d000      	beq.n	80037b8 <_lseek_r+0x20>
 80037b6:	6023      	str	r3, [r4, #0]
 80037b8:	bd70      	pop	{r4, r5, r6, pc}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	200001b0 	.word	0x200001b0

080037c0 <__malloc_lock>:
 80037c0:	b510      	push	{r4, lr}
 80037c2:	4802      	ldr	r0, [pc, #8]	; (80037cc <__malloc_lock+0xc>)
 80037c4:	f7ff fdef 	bl	80033a6 <__retarget_lock_acquire_recursive>
 80037c8:	bd10      	pop	{r4, pc}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	200001a4 	.word	0x200001a4

080037d0 <__malloc_unlock>:
 80037d0:	b510      	push	{r4, lr}
 80037d2:	4802      	ldr	r0, [pc, #8]	; (80037dc <__malloc_unlock+0xc>)
 80037d4:	f7ff fde8 	bl	80033a8 <__retarget_lock_release_recursive>
 80037d8:	bd10      	pop	{r4, pc}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	200001a4 	.word	0x200001a4

080037e0 <_read_r>:
 80037e0:	b570      	push	{r4, r5, r6, lr}
 80037e2:	0004      	movs	r4, r0
 80037e4:	0008      	movs	r0, r1
 80037e6:	0011      	movs	r1, r2
 80037e8:	001a      	movs	r2, r3
 80037ea:	2300      	movs	r3, #0
 80037ec:	4d05      	ldr	r5, [pc, #20]	; (8003804 <_read_r+0x24>)
 80037ee:	602b      	str	r3, [r5, #0]
 80037f0:	f7fc fe92 	bl	8000518 <_read>
 80037f4:	1c43      	adds	r3, r0, #1
 80037f6:	d103      	bne.n	8003800 <_read_r+0x20>
 80037f8:	682b      	ldr	r3, [r5, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d000      	beq.n	8003800 <_read_r+0x20>
 80037fe:	6023      	str	r3, [r4, #0]
 8003800:	bd70      	pop	{r4, r5, r6, pc}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	200001b0 	.word	0x200001b0

08003808 <_init>:
 8003808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380e:	bc08      	pop	{r3}
 8003810:	469e      	mov	lr, r3
 8003812:	4770      	bx	lr

08003814 <_fini>:
 8003814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381a:	bc08      	pop	{r3}
 800381c:	469e      	mov	lr, r3
 800381e:	4770      	bx	lr
