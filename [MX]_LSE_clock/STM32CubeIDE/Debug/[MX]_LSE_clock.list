
[MX]_LSE_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c08  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002cc4  08002cc4  00012cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cfc  08002cfc  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08002cfc  08002cfc  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cfc  08002cfc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cfc  08002cfc  00012cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d00  08002d00  00012d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000018  08002d1c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08002d1c  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b1c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b25  00000000  00000000  00029b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  0002b688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000690  00000000  00000000  0002bdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001acd3  00000000  00000000  0002c460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab81  00000000  00000000  00047133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a096e  00000000  00000000  00051cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2622  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017e4  00000000  00000000  000f2674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000018 	.word	0x20000018
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002cac 	.word	0x08002cac

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000001c 	.word	0x2000001c
 8000100:	08002cac 	.word	0x08002cac

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b089      	sub	sp, #36	; 0x24
 8000220:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000222:	240c      	movs	r4, #12
 8000224:	193b      	adds	r3, r7, r4
 8000226:	0018      	movs	r0, r3
 8000228:	2314      	movs	r3, #20
 800022a:	001a      	movs	r2, r3
 800022c:	2100      	movs	r1, #0
 800022e:	f002 fd35 	bl	8002c9c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000232:	4b2d      	ldr	r3, [pc, #180]	; (80002e8 <MX_GPIO_Init+0xcc>)
 8000234:	695a      	ldr	r2, [r3, #20]
 8000236:	4b2c      	ldr	r3, [pc, #176]	; (80002e8 <MX_GPIO_Init+0xcc>)
 8000238:	2180      	movs	r1, #128	; 0x80
 800023a:	0309      	lsls	r1, r1, #12
 800023c:	430a      	orrs	r2, r1
 800023e:	615a      	str	r2, [r3, #20]
 8000240:	4b29      	ldr	r3, [pc, #164]	; (80002e8 <MX_GPIO_Init+0xcc>)
 8000242:	695a      	ldr	r2, [r3, #20]
 8000244:	2380      	movs	r3, #128	; 0x80
 8000246:	031b      	lsls	r3, r3, #12
 8000248:	4013      	ands	r3, r2
 800024a:	60bb      	str	r3, [r7, #8]
 800024c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800024e:	4b26      	ldr	r3, [pc, #152]	; (80002e8 <MX_GPIO_Init+0xcc>)
 8000250:	695a      	ldr	r2, [r3, #20]
 8000252:	4b25      	ldr	r3, [pc, #148]	; (80002e8 <MX_GPIO_Init+0xcc>)
 8000254:	2180      	movs	r1, #128	; 0x80
 8000256:	03c9      	lsls	r1, r1, #15
 8000258:	430a      	orrs	r2, r1
 800025a:	615a      	str	r2, [r3, #20]
 800025c:	4b22      	ldr	r3, [pc, #136]	; (80002e8 <MX_GPIO_Init+0xcc>)
 800025e:	695a      	ldr	r2, [r3, #20]
 8000260:	2380      	movs	r3, #128	; 0x80
 8000262:	03db      	lsls	r3, r3, #15
 8000264:	4013      	ands	r3, r2
 8000266:	607b      	str	r3, [r7, #4]
 8000268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026a:	4b1f      	ldr	r3, [pc, #124]	; (80002e8 <MX_GPIO_Init+0xcc>)
 800026c:	695a      	ldr	r2, [r3, #20]
 800026e:	4b1e      	ldr	r3, [pc, #120]	; (80002e8 <MX_GPIO_Init+0xcc>)
 8000270:	2180      	movs	r1, #128	; 0x80
 8000272:	0289      	lsls	r1, r1, #10
 8000274:	430a      	orrs	r2, r1
 8000276:	615a      	str	r2, [r3, #20]
 8000278:	4b1b      	ldr	r3, [pc, #108]	; (80002e8 <MX_GPIO_Init+0xcc>)
 800027a:	695a      	ldr	r2, [r3, #20]
 800027c:	2380      	movs	r3, #128	; 0x80
 800027e:	029b      	lsls	r3, r3, #10
 8000280:	4013      	ands	r3, r2
 8000282:	603b      	str	r3, [r7, #0]
 8000284:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000286:	2390      	movs	r3, #144	; 0x90
 8000288:	05db      	lsls	r3, r3, #23
 800028a:	2200      	movs	r2, #0
 800028c:	2120      	movs	r1, #32
 800028e:	0018      	movs	r0, r3
 8000290:	f000 fd5c 	bl	8000d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000294:	193b      	adds	r3, r7, r4
 8000296:	2280      	movs	r2, #128	; 0x80
 8000298:	0192      	lsls	r2, r2, #6
 800029a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800029c:	193b      	adds	r3, r7, r4
 800029e:	2284      	movs	r2, #132	; 0x84
 80002a0:	0392      	lsls	r2, r2, #14
 80002a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	2200      	movs	r2, #0
 80002a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002aa:	193b      	adds	r3, r7, r4
 80002ac:	4a0f      	ldr	r2, [pc, #60]	; (80002ec <MX_GPIO_Init+0xd0>)
 80002ae:	0019      	movs	r1, r3
 80002b0:	0010      	movs	r0, r2
 80002b2:	f000 fbd3 	bl	8000a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002b6:	0021      	movs	r1, r4
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2220      	movs	r2, #32
 80002bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2201      	movs	r2, #1
 80002c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2200      	movs	r2, #0
 80002ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002d0:	187a      	adds	r2, r7, r1
 80002d2:	2390      	movs	r3, #144	; 0x90
 80002d4:	05db      	lsls	r3, r3, #23
 80002d6:	0011      	movs	r1, r2
 80002d8:	0018      	movs	r0, r3
 80002da:	f000 fbbf 	bl	8000a5c <HAL_GPIO_Init>

}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b009      	add	sp, #36	; 0x24
 80002e4:	bd90      	pop	{r4, r7, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	40021000 	.word	0x40021000
 80002ec:	48000800 	.word	0x48000800

080002f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f4:	f000 f9f2 	bl	80006dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f8:	f000 f80e 	bl	8000318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fc:	f7ff ff8e 	bl	800021c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000300:	f000 f8bc 	bl	800047c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000304:	f000 f8f2 	bl	80004ec <MX_USART3_UART_Init>
//  printf("Hello MX LSE clock \r\n");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000308:	2390      	movs	r3, #144	; 0x90
 800030a:	05db      	lsls	r3, r3, #23
 800030c:	2201      	movs	r2, #1
 800030e:	2120      	movs	r1, #32
 8000310:	0018      	movs	r0, r3
 8000312:	f000 fd1b 	bl	8000d4c <HAL_GPIO_WritePin>
  while (1)
 8000316:	e7fe      	b.n	8000316 <main+0x26>

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b590      	push	{r4, r7, lr}
 800031a:	b099      	sub	sp, #100	; 0x64
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	242c      	movs	r4, #44	; 0x2c
 8000320:	193b      	adds	r3, r7, r4
 8000322:	0018      	movs	r0, r3
 8000324:	2334      	movs	r3, #52	; 0x34
 8000326:	001a      	movs	r2, r3
 8000328:	2100      	movs	r1, #0
 800032a:	f002 fcb7 	bl	8002c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032e:	231c      	movs	r3, #28
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	0018      	movs	r0, r3
 8000334:	2310      	movs	r3, #16
 8000336:	001a      	movs	r2, r3
 8000338:	2100      	movs	r1, #0
 800033a:	f002 fcaf 	bl	8002c9c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800033e:	003b      	movs	r3, r7
 8000340:	0018      	movs	r0, r3
 8000342:	231c      	movs	r3, #28
 8000344:	001a      	movs	r2, r3
 8000346:	2100      	movs	r1, #0
 8000348:	f002 fca8 	bl	8002c9c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800034c:	0021      	movs	r1, r4
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2201      	movs	r2, #1
 8000352:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2205      	movs	r2, #5
 8000358:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2202      	movs	r2, #2
 800035e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2280      	movs	r2, #128	; 0x80
 8000364:	0252      	lsls	r2, r2, #9
 8000366:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000368:	187b      	adds	r3, r7, r1
 800036a:	22a0      	movs	r2, #160	; 0xa0
 800036c:	0392      	lsls	r2, r2, #14
 800036e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000370:	187b      	adds	r3, r7, r1
 8000372:	2201      	movs	r2, #1
 8000374:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000376:	187b      	adds	r3, r7, r1
 8000378:	0018      	movs	r0, r3
 800037a:	f000 fd05 	bl	8000d88 <HAL_RCC_OscConfig>
 800037e:	1e03      	subs	r3, r0, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000382:	f000 f82d 	bl	80003e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000386:	211c      	movs	r1, #28
 8000388:	187b      	adds	r3, r7, r1
 800038a:	2207      	movs	r2, #7
 800038c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038e:	187b      	adds	r3, r7, r1
 8000390:	2202      	movs	r2, #2
 8000392:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000394:	187b      	adds	r3, r7, r1
 8000396:	2200      	movs	r2, #0
 8000398:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800039a:	187b      	adds	r3, r7, r1
 800039c:	2200      	movs	r2, #0
 800039e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003a0:	187b      	adds	r3, r7, r1
 80003a2:	2101      	movs	r1, #1
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 f875 	bl	8001494 <HAL_RCC_ClockConfig>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003ae:	f000 f817 	bl	80003e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2;
 80003b2:	003b      	movs	r3, r7
 80003b4:	4a09      	ldr	r2, [pc, #36]	; (80003dc <SystemClock_Config+0xc4>)
 80003b6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003b8:	003b      	movs	r3, r7
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80003be:	003b      	movs	r3, r7
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c4:	003b      	movs	r3, r7
 80003c6:	0018      	movs	r0, r3
 80003c8:	f001 f9d0 	bl	800176c <HAL_RCCEx_PeriphCLKConfig>
 80003cc:	1e03      	subs	r3, r0, #0
 80003ce:	d001      	beq.n	80003d4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80003d0:	f000 f806 	bl	80003e0 <Error_Handler>
  }
}
 80003d4:	46c0      	nop			; (mov r8, r8)
 80003d6:	46bd      	mov	sp, r7
 80003d8:	b019      	add	sp, #100	; 0x64
 80003da:	bd90      	pop	{r4, r7, pc}
 80003dc:	00040002 	.word	0x00040002

080003e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e4:	b672      	cpsid	i
}
 80003e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <Error_Handler+0x8>
	...

080003ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f2:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <HAL_MspInit+0x44>)
 80003f4:	699a      	ldr	r2, [r3, #24]
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <HAL_MspInit+0x44>)
 80003f8:	2101      	movs	r1, #1
 80003fa:	430a      	orrs	r2, r1
 80003fc:	619a      	str	r2, [r3, #24]
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <HAL_MspInit+0x44>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	2201      	movs	r2, #1
 8000404:	4013      	ands	r3, r2
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040a:	4b09      	ldr	r3, [pc, #36]	; (8000430 <HAL_MspInit+0x44>)
 800040c:	69da      	ldr	r2, [r3, #28]
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <HAL_MspInit+0x44>)
 8000410:	2180      	movs	r1, #128	; 0x80
 8000412:	0549      	lsls	r1, r1, #21
 8000414:	430a      	orrs	r2, r1
 8000416:	61da      	str	r2, [r3, #28]
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <HAL_MspInit+0x44>)
 800041a:	69da      	ldr	r2, [r3, #28]
 800041c:	2380      	movs	r3, #128	; 0x80
 800041e:	055b      	lsls	r3, r3, #21
 8000420:	4013      	ands	r3, r2
 8000422:	603b      	str	r3, [r7, #0]
 8000424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	b002      	add	sp, #8
 800042c:	bd80      	pop	{r7, pc}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	40021000 	.word	0x40021000

08000434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <NMI_Handler+0x4>

0800043a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800043a:	b580      	push	{r7, lr}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800043e:	e7fe      	b.n	800043e <HardFault_Handler+0x4>

08000440 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000444:	46c0      	nop			; (mov r8, r8)
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000458:	f000 f988 	bl	800076c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <USART3_8_IRQHandler>:

/**
  * @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_8_IRQHandler(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_8_IRQn 0 */

  /* USER CODE END USART3_8_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000468:	4b03      	ldr	r3, [pc, #12]	; (8000478 <USART3_8_IRQHandler+0x14>)
 800046a:	0018      	movs	r0, r3
 800046c:	f001 fbe2 	bl	8001c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_8_IRQn 1 */

  /* USER CODE END USART3_8_IRQn 1 */
}
 8000470:	46c0      	nop			; (mov r8, r8)
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	200000bc 	.word	0x200000bc

0800047c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000480:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <MX_USART2_UART_Init+0x64>)
 8000482:	4a18      	ldr	r2, [pc, #96]	; (80004e4 <MX_USART2_UART_Init+0x68>)
 8000484:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000486:	4b16      	ldr	r3, [pc, #88]	; (80004e0 <MX_USART2_UART_Init+0x64>)
 8000488:	22e1      	movs	r2, #225	; 0xe1
 800048a:	0252      	lsls	r2, r2, #9
 800048c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800048e:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <MX_USART2_UART_Init+0x64>)
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000494:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <MX_USART2_UART_Init+0x64>)
 8000496:	2200      	movs	r2, #0
 8000498:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800049a:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <MX_USART2_UART_Init+0x64>)
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004a0:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <MX_USART2_UART_Init+0x64>)
 80004a2:	220c      	movs	r2, #12
 80004a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <MX_USART2_UART_Init+0x64>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <MX_USART2_UART_Init+0x64>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <MX_USART2_UART_Init+0x64>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004b8:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <MX_USART2_UART_Init+0x64>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <MX_USART2_UART_Init+0x64>)
 80004c0:	0018      	movs	r0, r3
 80004c2:	f001 fa53 	bl	800196c <HAL_UART_Init>
 80004c6:	1e03      	subs	r3, r0, #0
 80004c8:	d001      	beq.n	80004ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004ca:	f7ff ff89 	bl	80003e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Transmit(&huart2, arr, 1, 10);
 80004ce:	4906      	ldr	r1, [pc, #24]	; (80004e8 <MX_USART2_UART_Init+0x6c>)
 80004d0:	4803      	ldr	r0, [pc, #12]	; (80004e0 <MX_USART2_UART_Init+0x64>)
 80004d2:	230a      	movs	r3, #10
 80004d4:	2201      	movs	r2, #1
 80004d6:	f001 fa9d 	bl	8001a14 <HAL_UART_Transmit>
  /* USER CODE END USART2_Init 2 */

}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000034 	.word	0x20000034
 80004e4:	40004400 	.word	0x40004400
 80004e8:	20000000 	.word	0x20000000

080004ec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <MX_USART3_UART_Init+0x64>)
 80004f2:	4a18      	ldr	r2, [pc, #96]	; (8000554 <MX_USART3_UART_Init+0x68>)
 80004f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80004f6:	4b16      	ldr	r3, [pc, #88]	; (8000550 <MX_USART3_UART_Init+0x64>)
 80004f8:	22e1      	movs	r2, #225	; 0xe1
 80004fa:	0252      	lsls	r2, r2, #9
 80004fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <MX_USART3_UART_Init+0x64>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <MX_USART3_UART_Init+0x64>)
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MX_USART3_UART_Init+0x64>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_USART3_UART_Init+0x64>)
 8000512:	220c      	movs	r2, #12
 8000514:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <MX_USART3_UART_Init+0x64>)
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_USART3_UART_Init+0x64>)
 800051e:	2200      	movs	r2, #0
 8000520:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <MX_USART3_UART_Init+0x64>)
 8000524:	2200      	movs	r2, #0
 8000526:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000528:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_USART3_UART_Init+0x64>)
 800052a:	2200      	movs	r2, #0
 800052c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <MX_USART3_UART_Init+0x64>)
 8000530:	0018      	movs	r0, r3
 8000532:	f001 fa1b 	bl	800196c <HAL_UART_Init>
 8000536:	1e03      	subs	r3, r0, #0
 8000538:	d001      	beq.n	800053e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800053a:	f7ff ff51 	bl	80003e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
//  HAL_UART_Transmit(&huart3, arr, 1, 1);
  HAL_UART_Transmit_IT(&huart3, arr, 1);
 800053e:	4906      	ldr	r1, [pc, #24]	; (8000558 <MX_USART3_UART_Init+0x6c>)
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <MX_USART3_UART_Init+0x64>)
 8000542:	2201      	movs	r2, #1
 8000544:	0018      	movs	r0, r3
 8000546:	f001 fb05 	bl	8001b54 <HAL_UART_Transmit_IT>
  /* USER CODE END USART3_Init 2 */

}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	200000bc 	.word	0x200000bc
 8000554:	40004800 	.word	0x40004800
 8000558:	20000000 	.word	0x20000000

0800055c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b08d      	sub	sp, #52	; 0x34
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	241c      	movs	r4, #28
 8000566:	193b      	adds	r3, r7, r4
 8000568:	0018      	movs	r0, r3
 800056a:	2314      	movs	r3, #20
 800056c:	001a      	movs	r2, r3
 800056e:	2100      	movs	r1, #0
 8000570:	f002 fb94 	bl	8002c9c <memset>
  if(uartHandle->Instance==USART2)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a3d      	ldr	r2, [pc, #244]	; (8000670 <HAL_UART_MspInit+0x114>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d133      	bne.n	80005e6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800057e:	4b3d      	ldr	r3, [pc, #244]	; (8000674 <HAL_UART_MspInit+0x118>)
 8000580:	69da      	ldr	r2, [r3, #28]
 8000582:	4b3c      	ldr	r3, [pc, #240]	; (8000674 <HAL_UART_MspInit+0x118>)
 8000584:	2180      	movs	r1, #128	; 0x80
 8000586:	0289      	lsls	r1, r1, #10
 8000588:	430a      	orrs	r2, r1
 800058a:	61da      	str	r2, [r3, #28]
 800058c:	4b39      	ldr	r3, [pc, #228]	; (8000674 <HAL_UART_MspInit+0x118>)
 800058e:	69da      	ldr	r2, [r3, #28]
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	029b      	lsls	r3, r3, #10
 8000594:	4013      	ands	r3, r2
 8000596:	61bb      	str	r3, [r7, #24]
 8000598:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b36      	ldr	r3, [pc, #216]	; (8000674 <HAL_UART_MspInit+0x118>)
 800059c:	695a      	ldr	r2, [r3, #20]
 800059e:	4b35      	ldr	r3, [pc, #212]	; (8000674 <HAL_UART_MspInit+0x118>)
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	0289      	lsls	r1, r1, #10
 80005a4:	430a      	orrs	r2, r1
 80005a6:	615a      	str	r2, [r3, #20]
 80005a8:	4b32      	ldr	r3, [pc, #200]	; (8000674 <HAL_UART_MspInit+0x118>)
 80005aa:	695a      	ldr	r2, [r3, #20]
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	029b      	lsls	r3, r3, #10
 80005b0:	4013      	ands	r3, r2
 80005b2:	617b      	str	r3, [r7, #20]
 80005b4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005b6:	0021      	movs	r1, r4
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	220c      	movs	r2, #12
 80005bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2202      	movs	r2, #2
 80005c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2203      	movs	r2, #3
 80005ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2201      	movs	r2, #1
 80005d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	187a      	adds	r2, r7, r1
 80005d8:	2390      	movs	r3, #144	; 0x90
 80005da:	05db      	lsls	r3, r3, #23
 80005dc:	0011      	movs	r1, r2
 80005de:	0018      	movs	r0, r3
 80005e0:	f000 fa3c 	bl	8000a5c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80005e4:	e03f      	b.n	8000666 <HAL_UART_MspInit+0x10a>
  else if(uartHandle->Instance==USART3)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a23      	ldr	r2, [pc, #140]	; (8000678 <HAL_UART_MspInit+0x11c>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d13a      	bne.n	8000666 <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80005f0:	4b20      	ldr	r3, [pc, #128]	; (8000674 <HAL_UART_MspInit+0x118>)
 80005f2:	69da      	ldr	r2, [r3, #28]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <HAL_UART_MspInit+0x118>)
 80005f6:	2180      	movs	r1, #128	; 0x80
 80005f8:	02c9      	lsls	r1, r1, #11
 80005fa:	430a      	orrs	r2, r1
 80005fc:	61da      	str	r2, [r3, #28]
 80005fe:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <HAL_UART_MspInit+0x118>)
 8000600:	69da      	ldr	r2, [r3, #28]
 8000602:	2380      	movs	r3, #128	; 0x80
 8000604:	02db      	lsls	r3, r3, #11
 8000606:	4013      	ands	r3, r2
 8000608:	613b      	str	r3, [r7, #16]
 800060a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <HAL_UART_MspInit+0x118>)
 800060e:	695a      	ldr	r2, [r3, #20]
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <HAL_UART_MspInit+0x118>)
 8000612:	2180      	movs	r1, #128	; 0x80
 8000614:	0309      	lsls	r1, r1, #12
 8000616:	430a      	orrs	r2, r1
 8000618:	615a      	str	r2, [r3, #20]
 800061a:	4b16      	ldr	r3, [pc, #88]	; (8000674 <HAL_UART_MspInit+0x118>)
 800061c:	695a      	ldr	r2, [r3, #20]
 800061e:	2380      	movs	r3, #128	; 0x80
 8000620:	031b      	lsls	r3, r3, #12
 8000622:	4013      	ands	r3, r2
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000628:	211c      	movs	r1, #28
 800062a:	187b      	adds	r3, r7, r1
 800062c:	22c0      	movs	r2, #192	; 0xc0
 800062e:	0112      	lsls	r2, r2, #4
 8000630:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2202      	movs	r2, #2
 8000636:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2203      	movs	r2, #3
 8000642:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2201      	movs	r2, #1
 8000648:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064a:	187b      	adds	r3, r7, r1
 800064c:	4a0b      	ldr	r2, [pc, #44]	; (800067c <HAL_UART_MspInit+0x120>)
 800064e:	0019      	movs	r1, r3
 8000650:	0010      	movs	r0, r2
 8000652:	f000 fa03 	bl	8000a5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 0, 0);
 8000656:	2200      	movs	r2, #0
 8000658:	2100      	movs	r1, #0
 800065a:	201d      	movs	r0, #29
 800065c:	f000 f94e 	bl	80008fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 8000660:	201d      	movs	r0, #29
 8000662:	f000 f960 	bl	8000926 <HAL_NVIC_EnableIRQ>
}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	46bd      	mov	sp, r7
 800066a:	b00d      	add	sp, #52	; 0x34
 800066c:	bd90      	pop	{r4, r7, pc}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	40004400 	.word	0x40004400
 8000674:	40021000 	.word	0x40021000
 8000678:	40004800 	.word	0x40004800
 800067c:	48000800 	.word	0x48000800

08000680 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000682:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000684:	f000 f825 	bl	80006d2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000688:	480c      	ldr	r0, [pc, #48]	; (80006bc <LoopForever+0x6>)
  ldr r1, =_edata
 800068a:	490d      	ldr	r1, [pc, #52]	; (80006c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800068c:	4a0d      	ldr	r2, [pc, #52]	; (80006c4 <LoopForever+0xe>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000690:	e002      	b.n	8000698 <LoopCopyDataInit>

08000692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000696:	3304      	adds	r3, #4

08000698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800069c:	d3f9      	bcc.n	8000692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069e:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a0:	4c0a      	ldr	r4, [pc, #40]	; (80006cc <LoopForever+0x16>)
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a4:	e001      	b.n	80006aa <LoopFillZerobss>

080006a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a8:	3204      	adds	r2, #4

080006aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006ac:	d3fb      	bcc.n	80006a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ae:	f002 fad1 	bl	8002c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b2:	f7ff fe1d 	bl	80002f0 <main>

080006b6 <LoopForever>:

LoopForever:
    b LoopForever
 80006b6:	e7fe      	b.n	80006b6 <LoopForever>
  ldr   r0, =_estack
 80006b8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80006bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80006c4:	08002d04 	.word	0x08002d04
  ldr r2, =_sbss
 80006c8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80006cc:	20000148 	.word	0x20000148

080006d0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d0:	e7fe      	b.n	80006d0 <ADC1_COMP_IRQHandler>

080006d2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <HAL_Init+0x24>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_Init+0x24>)
 80006e6:	2110      	movs	r1, #16
 80006e8:	430a      	orrs	r2, r1
 80006ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006ec:	2000      	movs	r0, #0
 80006ee:	f000 f809 	bl	8000704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006f2:	f7ff fe7b 	bl	80003ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006f6:	2300      	movs	r3, #0
}
 80006f8:	0018      	movs	r0, r3
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	40022000 	.word	0x40022000

08000704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <HAL_InitTick+0x5c>)
 800070e:	681c      	ldr	r4, [r3, #0]
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <HAL_InitTick+0x60>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	0019      	movs	r1, r3
 8000716:	23fa      	movs	r3, #250	; 0xfa
 8000718:	0098      	lsls	r0, r3, #2
 800071a:	f7ff fcf3 	bl	8000104 <__udivsi3>
 800071e:	0003      	movs	r3, r0
 8000720:	0019      	movs	r1, r3
 8000722:	0020      	movs	r0, r4
 8000724:	f7ff fcee 	bl	8000104 <__udivsi3>
 8000728:	0003      	movs	r3, r0
 800072a:	0018      	movs	r0, r3
 800072c:	f000 f90b 	bl	8000946 <HAL_SYSTICK_Config>
 8000730:	1e03      	subs	r3, r0, #0
 8000732:	d001      	beq.n	8000738 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000734:	2301      	movs	r3, #1
 8000736:	e00f      	b.n	8000758 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b03      	cmp	r3, #3
 800073c:	d80b      	bhi.n	8000756 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	2301      	movs	r3, #1
 8000742:	425b      	negs	r3, r3
 8000744:	2200      	movs	r2, #0
 8000746:	0018      	movs	r0, r3
 8000748:	f000 f8d8 	bl	80008fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_InitTick+0x64>)
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000752:	2300      	movs	r3, #0
 8000754:	e000      	b.n	8000758 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
}
 8000758:	0018      	movs	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	b003      	add	sp, #12
 800075e:	bd90      	pop	{r4, r7, pc}
 8000760:	2000000c 	.word	0x2000000c
 8000764:	20000014 	.word	0x20000014
 8000768:	20000010 	.word	0x20000010

0800076c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <HAL_IncTick+0x1c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	001a      	movs	r2, r3
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <HAL_IncTick+0x20>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	18d2      	adds	r2, r2, r3
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <HAL_IncTick+0x20>)
 800077e:	601a      	str	r2, [r3, #0]
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	20000014 	.word	0x20000014
 800078c:	20000144 	.word	0x20000144

08000790 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  return uwTick;
 8000794:	4b02      	ldr	r3, [pc, #8]	; (80007a0 <HAL_GetTick+0x10>)
 8000796:	681b      	ldr	r3, [r3, #0]
}
 8000798:	0018      	movs	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	20000144 	.word	0x20000144

080007a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	0002      	movs	r2, r0
 80007ac:	1dfb      	adds	r3, r7, #7
 80007ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007b0:	1dfb      	adds	r3, r7, #7
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b7f      	cmp	r3, #127	; 0x7f
 80007b6:	d809      	bhi.n	80007cc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007b8:	1dfb      	adds	r3, r7, #7
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	001a      	movs	r2, r3
 80007be:	231f      	movs	r3, #31
 80007c0:	401a      	ands	r2, r3
 80007c2:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <__NVIC_EnableIRQ+0x30>)
 80007c4:	2101      	movs	r1, #1
 80007c6:	4091      	lsls	r1, r2
 80007c8:	000a      	movs	r2, r1
 80007ca:	601a      	str	r2, [r3, #0]
  }
}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b002      	add	sp, #8
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	e000e100 	.word	0xe000e100

080007d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	0002      	movs	r2, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007e6:	1dfb      	adds	r3, r7, #7
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b7f      	cmp	r3, #127	; 0x7f
 80007ec:	d828      	bhi.n	8000840 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ee:	4a2f      	ldr	r2, [pc, #188]	; (80008ac <__NVIC_SetPriority+0xd4>)
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	089b      	lsrs	r3, r3, #2
 80007f8:	33c0      	adds	r3, #192	; 0xc0
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	589b      	ldr	r3, [r3, r2]
 80007fe:	1dfa      	adds	r2, r7, #7
 8000800:	7812      	ldrb	r2, [r2, #0]
 8000802:	0011      	movs	r1, r2
 8000804:	2203      	movs	r2, #3
 8000806:	400a      	ands	r2, r1
 8000808:	00d2      	lsls	r2, r2, #3
 800080a:	21ff      	movs	r1, #255	; 0xff
 800080c:	4091      	lsls	r1, r2
 800080e:	000a      	movs	r2, r1
 8000810:	43d2      	mvns	r2, r2
 8000812:	401a      	ands	r2, r3
 8000814:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	019b      	lsls	r3, r3, #6
 800081a:	22ff      	movs	r2, #255	; 0xff
 800081c:	401a      	ands	r2, r3
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	0018      	movs	r0, r3
 8000824:	2303      	movs	r3, #3
 8000826:	4003      	ands	r3, r0
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800082c:	481f      	ldr	r0, [pc, #124]	; (80008ac <__NVIC_SetPriority+0xd4>)
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b25b      	sxtb	r3, r3
 8000834:	089b      	lsrs	r3, r3, #2
 8000836:	430a      	orrs	r2, r1
 8000838:	33c0      	adds	r3, #192	; 0xc0
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800083e:	e031      	b.n	80008a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000840:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <__NVIC_SetPriority+0xd8>)
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	0019      	movs	r1, r3
 8000848:	230f      	movs	r3, #15
 800084a:	400b      	ands	r3, r1
 800084c:	3b08      	subs	r3, #8
 800084e:	089b      	lsrs	r3, r3, #2
 8000850:	3306      	adds	r3, #6
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	18d3      	adds	r3, r2, r3
 8000856:	3304      	adds	r3, #4
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	1dfa      	adds	r2, r7, #7
 800085c:	7812      	ldrb	r2, [r2, #0]
 800085e:	0011      	movs	r1, r2
 8000860:	2203      	movs	r2, #3
 8000862:	400a      	ands	r2, r1
 8000864:	00d2      	lsls	r2, r2, #3
 8000866:	21ff      	movs	r1, #255	; 0xff
 8000868:	4091      	lsls	r1, r2
 800086a:	000a      	movs	r2, r1
 800086c:	43d2      	mvns	r2, r2
 800086e:	401a      	ands	r2, r3
 8000870:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	019b      	lsls	r3, r3, #6
 8000876:	22ff      	movs	r2, #255	; 0xff
 8000878:	401a      	ands	r2, r3
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	0018      	movs	r0, r3
 8000880:	2303      	movs	r3, #3
 8000882:	4003      	ands	r3, r0
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000888:	4809      	ldr	r0, [pc, #36]	; (80008b0 <__NVIC_SetPriority+0xd8>)
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	001c      	movs	r4, r3
 8000890:	230f      	movs	r3, #15
 8000892:	4023      	ands	r3, r4
 8000894:	3b08      	subs	r3, #8
 8000896:	089b      	lsrs	r3, r3, #2
 8000898:	430a      	orrs	r2, r1
 800089a:	3306      	adds	r3, #6
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	18c3      	adds	r3, r0, r3
 80008a0:	3304      	adds	r3, #4
 80008a2:	601a      	str	r2, [r3, #0]
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b003      	add	sp, #12
 80008aa:	bd90      	pop	{r4, r7, pc}
 80008ac:	e000e100 	.word	0xe000e100
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	1e5a      	subs	r2, r3, #1
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	045b      	lsls	r3, r3, #17
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d301      	bcc.n	80008cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c8:	2301      	movs	r3, #1
 80008ca:	e010      	b.n	80008ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <SysTick_Config+0x44>)
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	3a01      	subs	r2, #1
 80008d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008d4:	2301      	movs	r3, #1
 80008d6:	425b      	negs	r3, r3
 80008d8:	2103      	movs	r1, #3
 80008da:	0018      	movs	r0, r3
 80008dc:	f7ff ff7c 	bl	80007d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <SysTick_Config+0x44>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e6:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <SysTick_Config+0x44>)
 80008e8:	2207      	movs	r2, #7
 80008ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	0018      	movs	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b002      	add	sp, #8
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	e000e010 	.word	0xe000e010

080008fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
 8000906:	210f      	movs	r1, #15
 8000908:	187b      	adds	r3, r7, r1
 800090a:	1c02      	adds	r2, r0, #0
 800090c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	187b      	adds	r3, r7, r1
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b25b      	sxtb	r3, r3
 8000916:	0011      	movs	r1, r2
 8000918:	0018      	movs	r0, r3
 800091a:	f7ff ff5d 	bl	80007d8 <__NVIC_SetPriority>
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b004      	add	sp, #16
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	0002      	movs	r2, r0
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	b25b      	sxtb	r3, r3
 8000938:	0018      	movs	r0, r3
 800093a:	f7ff ff33 	bl	80007a4 <__NVIC_EnableIRQ>
}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b002      	add	sp, #8
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	0018      	movs	r0, r3
 8000952:	f7ff ffaf 	bl	80008b4 <SysTick_Config>
 8000956:	0003      	movs	r3, r0
}
 8000958:	0018      	movs	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	b002      	add	sp, #8
 800095e:	bd80      	pop	{r7, pc}

08000960 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2221      	movs	r2, #33	; 0x21
 800096c:	5c9b      	ldrb	r3, [r3, r2]
 800096e:	b2db      	uxtb	r3, r3
 8000970:	2b02      	cmp	r3, #2
 8000972:	d008      	beq.n	8000986 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2204      	movs	r2, #4
 8000978:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2220      	movs	r2, #32
 800097e:	2100      	movs	r1, #0
 8000980:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e020      	b.n	80009c8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	210e      	movs	r1, #14
 8000992:	438a      	bics	r2, r1
 8000994:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2101      	movs	r1, #1
 80009a2:	438a      	bics	r2, r1
 80009a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009ae:	2101      	movs	r1, #1
 80009b0:	4091      	lsls	r1, r2
 80009b2:	000a      	movs	r2, r1
 80009b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2221      	movs	r2, #33	; 0x21
 80009ba:	2101      	movs	r1, #1
 80009bc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2220      	movs	r2, #32
 80009c2:	2100      	movs	r1, #0
 80009c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80009c6:	2300      	movs	r3, #0
}
 80009c8:	0018      	movs	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b002      	add	sp, #8
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009d8:	210f      	movs	r1, #15
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2221      	movs	r2, #33	; 0x21
 80009e4:	5c9b      	ldrb	r3, [r3, r2]
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d006      	beq.n	80009fa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2204      	movs	r2, #4
 80009f0:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2201      	movs	r2, #1
 80009f6:	701a      	strb	r2, [r3, #0]
 80009f8:	e028      	b.n	8000a4c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	210e      	movs	r1, #14
 8000a06:	438a      	bics	r2, r1
 8000a08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2101      	movs	r1, #1
 8000a16:	438a      	bics	r2, r1
 8000a18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a22:	2101      	movs	r1, #1
 8000a24:	4091      	lsls	r1, r2
 8000a26:	000a      	movs	r2, r1
 8000a28:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2221      	movs	r2, #33	; 0x21
 8000a2e:	2101      	movs	r1, #1
 8000a30:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2220      	movs	r2, #32
 8000a36:	2100      	movs	r1, #0
 8000a38:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d004      	beq.n	8000a4c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	0010      	movs	r0, r2
 8000a4a:	4798      	blx	r3
    }
  }
  return status;
 8000a4c:	230f      	movs	r3, #15
 8000a4e:	18fb      	adds	r3, r7, r3
 8000a50:	781b      	ldrb	r3, [r3, #0]
}
 8000a52:	0018      	movs	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b004      	add	sp, #16
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a6a:	e155      	b.n	8000d18 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2101      	movs	r1, #1
 8000a72:	697a      	ldr	r2, [r7, #20]
 8000a74:	4091      	lsls	r1, r2
 8000a76:	000a      	movs	r2, r1
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d100      	bne.n	8000a84 <HAL_GPIO_Init+0x28>
 8000a82:	e146      	b.n	8000d12 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	2203      	movs	r2, #3
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d005      	beq.n	8000a9c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	2203      	movs	r2, #3
 8000a96:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d130      	bne.n	8000afe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	409a      	lsls	r2, r3
 8000aaa:	0013      	movs	r3, r2
 8000aac:	43da      	mvns	r2, r3
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	68da      	ldr	r2, [r3, #12]
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	409a      	lsls	r2, r3
 8000abe:	0013      	movs	r3, r2
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	409a      	lsls	r2, r3
 8000ad8:	0013      	movs	r3, r2
 8000ada:	43da      	mvns	r2, r3
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	091b      	lsrs	r3, r3, #4
 8000ae8:	2201      	movs	r2, #1
 8000aea:	401a      	ands	r2, r3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	409a      	lsls	r2, r3
 8000af0:	0013      	movs	r3, r2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	2203      	movs	r2, #3
 8000b04:	4013      	ands	r3, r2
 8000b06:	2b03      	cmp	r3, #3
 8000b08:	d017      	beq.n	8000b3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	2203      	movs	r2, #3
 8000b16:	409a      	lsls	r2, r3
 8000b18:	0013      	movs	r3, r2
 8000b1a:	43da      	mvns	r2, r3
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	689a      	ldr	r2, [r3, #8]
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	409a      	lsls	r2, r3
 8000b2c:	0013      	movs	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	2203      	movs	r2, #3
 8000b40:	4013      	ands	r3, r2
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d123      	bne.n	8000b8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	08da      	lsrs	r2, r3, #3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	3208      	adds	r2, #8
 8000b4e:	0092      	lsls	r2, r2, #2
 8000b50:	58d3      	ldr	r3, [r2, r3]
 8000b52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	2207      	movs	r2, #7
 8000b58:	4013      	ands	r3, r2
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	220f      	movs	r2, #15
 8000b5e:	409a      	lsls	r2, r3
 8000b60:	0013      	movs	r3, r2
 8000b62:	43da      	mvns	r2, r3
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	691a      	ldr	r2, [r3, #16]
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	2107      	movs	r1, #7
 8000b72:	400b      	ands	r3, r1
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	409a      	lsls	r2, r3
 8000b78:	0013      	movs	r3, r2
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	08da      	lsrs	r2, r3, #3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3208      	adds	r2, #8
 8000b88:	0092      	lsls	r2, r2, #2
 8000b8a:	6939      	ldr	r1, [r7, #16]
 8000b8c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	2203      	movs	r2, #3
 8000b9a:	409a      	lsls	r2, r3
 8000b9c:	0013      	movs	r3, r2
 8000b9e:	43da      	mvns	r2, r3
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2203      	movs	r2, #3
 8000bac:	401a      	ands	r2, r3
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	0013      	movs	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	23c0      	movs	r3, #192	; 0xc0
 8000bc8:	029b      	lsls	r3, r3, #10
 8000bca:	4013      	ands	r3, r2
 8000bcc:	d100      	bne.n	8000bd0 <HAL_GPIO_Init+0x174>
 8000bce:	e0a0      	b.n	8000d12 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd0:	4b57      	ldr	r3, [pc, #348]	; (8000d30 <HAL_GPIO_Init+0x2d4>)
 8000bd2:	699a      	ldr	r2, [r3, #24]
 8000bd4:	4b56      	ldr	r3, [pc, #344]	; (8000d30 <HAL_GPIO_Init+0x2d4>)
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	619a      	str	r2, [r3, #24]
 8000bdc:	4b54      	ldr	r3, [pc, #336]	; (8000d30 <HAL_GPIO_Init+0x2d4>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	2201      	movs	r2, #1
 8000be2:	4013      	ands	r3, r2
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000be8:	4a52      	ldr	r2, [pc, #328]	; (8000d34 <HAL_GPIO_Init+0x2d8>)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	089b      	lsrs	r3, r3, #2
 8000bee:	3302      	adds	r3, #2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	589b      	ldr	r3, [r3, r2]
 8000bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	220f      	movs	r2, #15
 8000c00:	409a      	lsls	r2, r3
 8000c02:	0013      	movs	r3, r2
 8000c04:	43da      	mvns	r2, r3
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	2390      	movs	r3, #144	; 0x90
 8000c10:	05db      	lsls	r3, r3, #23
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d019      	beq.n	8000c4a <HAL_GPIO_Init+0x1ee>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a47      	ldr	r2, [pc, #284]	; (8000d38 <HAL_GPIO_Init+0x2dc>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d013      	beq.n	8000c46 <HAL_GPIO_Init+0x1ea>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a46      	ldr	r2, [pc, #280]	; (8000d3c <HAL_GPIO_Init+0x2e0>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d00d      	beq.n	8000c42 <HAL_GPIO_Init+0x1e6>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a45      	ldr	r2, [pc, #276]	; (8000d40 <HAL_GPIO_Init+0x2e4>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d007      	beq.n	8000c3e <HAL_GPIO_Init+0x1e2>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a44      	ldr	r2, [pc, #272]	; (8000d44 <HAL_GPIO_Init+0x2e8>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d101      	bne.n	8000c3a <HAL_GPIO_Init+0x1de>
 8000c36:	2304      	movs	r3, #4
 8000c38:	e008      	b.n	8000c4c <HAL_GPIO_Init+0x1f0>
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	e006      	b.n	8000c4c <HAL_GPIO_Init+0x1f0>
 8000c3e:	2303      	movs	r3, #3
 8000c40:	e004      	b.n	8000c4c <HAL_GPIO_Init+0x1f0>
 8000c42:	2302      	movs	r3, #2
 8000c44:	e002      	b.n	8000c4c <HAL_GPIO_Init+0x1f0>
 8000c46:	2301      	movs	r3, #1
 8000c48:	e000      	b.n	8000c4c <HAL_GPIO_Init+0x1f0>
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	2103      	movs	r1, #3
 8000c50:	400a      	ands	r2, r1
 8000c52:	0092      	lsls	r2, r2, #2
 8000c54:	4093      	lsls	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c5c:	4935      	ldr	r1, [pc, #212]	; (8000d34 <HAL_GPIO_Init+0x2d8>)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	089b      	lsrs	r3, r3, #2
 8000c62:	3302      	adds	r3, #2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c6a:	4b37      	ldr	r3, [pc, #220]	; (8000d48 <HAL_GPIO_Init+0x2ec>)
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	43da      	mvns	r2, r3
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	4013      	ands	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	035b      	lsls	r3, r3, #13
 8000c82:	4013      	ands	r3, r2
 8000c84:	d003      	beq.n	8000c8e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c8e:	4b2e      	ldr	r3, [pc, #184]	; (8000d48 <HAL_GPIO_Init+0x2ec>)
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c94:	4b2c      	ldr	r3, [pc, #176]	; (8000d48 <HAL_GPIO_Init+0x2ec>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	43da      	mvns	r2, r3
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	039b      	lsls	r3, r3, #14
 8000cac:	4013      	ands	r3, r2
 8000cae:	d003      	beq.n	8000cb8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cb8:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <HAL_GPIO_Init+0x2ec>)
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000cbe:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <HAL_GPIO_Init+0x2ec>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	029b      	lsls	r3, r3, #10
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	d003      	beq.n	8000ce2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <HAL_GPIO_Init+0x2ec>)
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <HAL_GPIO_Init+0x2ec>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	43da      	mvns	r2, r3
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	025b      	lsls	r3, r3, #9
 8000d00:	4013      	ands	r3, r2
 8000d02:	d003      	beq.n	8000d0c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_GPIO_Init+0x2ec>)
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	40da      	lsrs	r2, r3
 8000d20:	1e13      	subs	r3, r2, #0
 8000d22:	d000      	beq.n	8000d26 <HAL_GPIO_Init+0x2ca>
 8000d24:	e6a2      	b.n	8000a6c <HAL_GPIO_Init+0x10>
  } 
}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b006      	add	sp, #24
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010000 	.word	0x40010000
 8000d38:	48000400 	.word	0x48000400
 8000d3c:	48000800 	.word	0x48000800
 8000d40:	48000c00 	.word	0x48000c00
 8000d44:	48001000 	.word	0x48001000
 8000d48:	40010400 	.word	0x40010400

08000d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	0008      	movs	r0, r1
 8000d56:	0011      	movs	r1, r2
 8000d58:	1cbb      	adds	r3, r7, #2
 8000d5a:	1c02      	adds	r2, r0, #0
 8000d5c:	801a      	strh	r2, [r3, #0]
 8000d5e:	1c7b      	adds	r3, r7, #1
 8000d60:	1c0a      	adds	r2, r1, #0
 8000d62:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d64:	1c7b      	adds	r3, r7, #1
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d004      	beq.n	8000d76 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d6c:	1cbb      	adds	r3, r7, #2
 8000d6e:	881a      	ldrh	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d74:	e003      	b.n	8000d7e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d76:	1cbb      	adds	r3, r7, #2
 8000d78:	881a      	ldrh	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b002      	add	sp, #8
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d102      	bne.n	8000d9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	f000 fb76 	bl	8001488 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2201      	movs	r2, #1
 8000da2:	4013      	ands	r3, r2
 8000da4:	d100      	bne.n	8000da8 <HAL_RCC_OscConfig+0x20>
 8000da6:	e08e      	b.n	8000ec6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000da8:	4bc5      	ldr	r3, [pc, #788]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	220c      	movs	r2, #12
 8000dae:	4013      	ands	r3, r2
 8000db0:	2b04      	cmp	r3, #4
 8000db2:	d00e      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000db4:	4bc2      	ldr	r3, [pc, #776]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	220c      	movs	r2, #12
 8000dba:	4013      	ands	r3, r2
 8000dbc:	2b08      	cmp	r3, #8
 8000dbe:	d117      	bne.n	8000df0 <HAL_RCC_OscConfig+0x68>
 8000dc0:	4bbf      	ldr	r3, [pc, #764]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	23c0      	movs	r3, #192	; 0xc0
 8000dc6:	025b      	lsls	r3, r3, #9
 8000dc8:	401a      	ands	r2, r3
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	025b      	lsls	r3, r3, #9
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d10e      	bne.n	8000df0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd2:	4bbb      	ldr	r3, [pc, #748]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	029b      	lsls	r3, r3, #10
 8000dda:	4013      	ands	r3, r2
 8000ddc:	d100      	bne.n	8000de0 <HAL_RCC_OscConfig+0x58>
 8000dde:	e071      	b.n	8000ec4 <HAL_RCC_OscConfig+0x13c>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d000      	beq.n	8000dea <HAL_RCC_OscConfig+0x62>
 8000de8:	e06c      	b.n	8000ec4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	f000 fb4c 	bl	8001488 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d107      	bne.n	8000e08 <HAL_RCC_OscConfig+0x80>
 8000df8:	4bb1      	ldr	r3, [pc, #708]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4bb0      	ldr	r3, [pc, #704]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000dfe:	2180      	movs	r1, #128	; 0x80
 8000e00:	0249      	lsls	r1, r1, #9
 8000e02:	430a      	orrs	r2, r1
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	e02f      	b.n	8000e68 <HAL_RCC_OscConfig+0xe0>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d10c      	bne.n	8000e2a <HAL_RCC_OscConfig+0xa2>
 8000e10:	4bab      	ldr	r3, [pc, #684]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4baa      	ldr	r3, [pc, #680]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000e16:	49ab      	ldr	r1, [pc, #684]	; (80010c4 <HAL_RCC_OscConfig+0x33c>)
 8000e18:	400a      	ands	r2, r1
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	4ba8      	ldr	r3, [pc, #672]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4ba7      	ldr	r3, [pc, #668]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000e22:	49a9      	ldr	r1, [pc, #676]	; (80010c8 <HAL_RCC_OscConfig+0x340>)
 8000e24:	400a      	ands	r2, r1
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	e01e      	b.n	8000e68 <HAL_RCC_OscConfig+0xe0>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	2b05      	cmp	r3, #5
 8000e30:	d10e      	bne.n	8000e50 <HAL_RCC_OscConfig+0xc8>
 8000e32:	4ba3      	ldr	r3, [pc, #652]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	4ba2      	ldr	r3, [pc, #648]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000e38:	2180      	movs	r1, #128	; 0x80
 8000e3a:	02c9      	lsls	r1, r1, #11
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	4b9f      	ldr	r3, [pc, #636]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b9e      	ldr	r3, [pc, #632]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000e46:	2180      	movs	r1, #128	; 0x80
 8000e48:	0249      	lsls	r1, r1, #9
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	e00b      	b.n	8000e68 <HAL_RCC_OscConfig+0xe0>
 8000e50:	4b9b      	ldr	r3, [pc, #620]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b9a      	ldr	r3, [pc, #616]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000e56:	499b      	ldr	r1, [pc, #620]	; (80010c4 <HAL_RCC_OscConfig+0x33c>)
 8000e58:	400a      	ands	r2, r1
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	4b98      	ldr	r3, [pc, #608]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b97      	ldr	r3, [pc, #604]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000e62:	4999      	ldr	r1, [pc, #612]	; (80010c8 <HAL_RCC_OscConfig+0x340>)
 8000e64:	400a      	ands	r2, r1
 8000e66:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d014      	beq.n	8000e9a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e70:	f7ff fc8e 	bl	8000790 <HAL_GetTick>
 8000e74:	0003      	movs	r3, r0
 8000e76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e78:	e008      	b.n	8000e8c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e7a:	f7ff fc89 	bl	8000790 <HAL_GetTick>
 8000e7e:	0002      	movs	r2, r0
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	2b64      	cmp	r3, #100	; 0x64
 8000e86:	d901      	bls.n	8000e8c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e2fd      	b.n	8001488 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8c:	4b8c      	ldr	r3, [pc, #560]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	029b      	lsls	r3, r3, #10
 8000e94:	4013      	ands	r3, r2
 8000e96:	d0f0      	beq.n	8000e7a <HAL_RCC_OscConfig+0xf2>
 8000e98:	e015      	b.n	8000ec6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9a:	f7ff fc79 	bl	8000790 <HAL_GetTick>
 8000e9e:	0003      	movs	r3, r0
 8000ea0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ea2:	e008      	b.n	8000eb6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ea4:	f7ff fc74 	bl	8000790 <HAL_GetTick>
 8000ea8:	0002      	movs	r2, r0
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b64      	cmp	r3, #100	; 0x64
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e2e8      	b.n	8001488 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eb6:	4b82      	ldr	r3, [pc, #520]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	029b      	lsls	r3, r3, #10
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	d1f0      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x11c>
 8000ec2:	e000      	b.n	8000ec6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2202      	movs	r2, #2
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d100      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x14a>
 8000ed0:	e06c      	b.n	8000fac <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ed2:	4b7b      	ldr	r3, [pc, #492]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	4013      	ands	r3, r2
 8000eda:	d00e      	beq.n	8000efa <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000edc:	4b78      	ldr	r3, [pc, #480]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	220c      	movs	r2, #12
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	2b08      	cmp	r3, #8
 8000ee6:	d11f      	bne.n	8000f28 <HAL_RCC_OscConfig+0x1a0>
 8000ee8:	4b75      	ldr	r3, [pc, #468]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	23c0      	movs	r3, #192	; 0xc0
 8000eee:	025b      	lsls	r3, r3, #9
 8000ef0:	401a      	ands	r2, r3
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d116      	bne.n	8000f28 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000efa:	4b71      	ldr	r3, [pc, #452]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2202      	movs	r2, #2
 8000f00:	4013      	ands	r3, r2
 8000f02:	d005      	beq.n	8000f10 <HAL_RCC_OscConfig+0x188>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d001      	beq.n	8000f10 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e2bb      	b.n	8001488 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f10:	4b6b      	ldr	r3, [pc, #428]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	22f8      	movs	r2, #248	; 0xf8
 8000f16:	4393      	bics	r3, r2
 8000f18:	0019      	movs	r1, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	00da      	lsls	r2, r3, #3
 8000f20:	4b67      	ldr	r3, [pc, #412]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000f22:	430a      	orrs	r2, r1
 8000f24:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f26:	e041      	b.n	8000fac <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d024      	beq.n	8000f7a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f30:	4b63      	ldr	r3, [pc, #396]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b62      	ldr	r3, [pc, #392]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000f36:	2101      	movs	r1, #1
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fc28 	bl	8000790 <HAL_GetTick>
 8000f40:	0003      	movs	r3, r0
 8000f42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f44:	e008      	b.n	8000f58 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f46:	f7ff fc23 	bl	8000790 <HAL_GetTick>
 8000f4a:	0002      	movs	r2, r0
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d901      	bls.n	8000f58 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	e297      	b.n	8001488 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f58:	4b59      	ldr	r3, [pc, #356]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	4013      	ands	r3, r2
 8000f60:	d0f1      	beq.n	8000f46 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f62:	4b57      	ldr	r3, [pc, #348]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	22f8      	movs	r2, #248	; 0xf8
 8000f68:	4393      	bics	r3, r2
 8000f6a:	0019      	movs	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	691b      	ldr	r3, [r3, #16]
 8000f70:	00da      	lsls	r2, r3, #3
 8000f72:	4b53      	ldr	r3, [pc, #332]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000f74:	430a      	orrs	r2, r1
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	e018      	b.n	8000fac <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f7a:	4b51      	ldr	r3, [pc, #324]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	4b50      	ldr	r3, [pc, #320]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000f80:	2101      	movs	r1, #1
 8000f82:	438a      	bics	r2, r1
 8000f84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f86:	f7ff fc03 	bl	8000790 <HAL_GetTick>
 8000f8a:	0003      	movs	r3, r0
 8000f8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f8e:	e008      	b.n	8000fa2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f90:	f7ff fbfe 	bl	8000790 <HAL_GetTick>
 8000f94:	0002      	movs	r2, r0
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d901      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e272      	b.n	8001488 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fa2:	4b47      	ldr	r3, [pc, #284]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d1f1      	bne.n	8000f90 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2208      	movs	r2, #8
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	d036      	beq.n	8001024 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d019      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fbe:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000fc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fc2:	4b3f      	ldr	r3, [pc, #252]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fca:	f7ff fbe1 	bl	8000790 <HAL_GetTick>
 8000fce:	0003      	movs	r3, r0
 8000fd0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fd2:	e008      	b.n	8000fe6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fd4:	f7ff fbdc 	bl	8000790 <HAL_GetTick>
 8000fd8:	0002      	movs	r2, r0
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e250      	b.n	8001488 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fe6:	4b36      	ldr	r3, [pc, #216]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fea:	2202      	movs	r2, #2
 8000fec:	4013      	ands	r3, r2
 8000fee:	d0f1      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x24c>
 8000ff0:	e018      	b.n	8001024 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ff2:	4b33      	ldr	r3, [pc, #204]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000ff4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ff6:	4b32      	ldr	r3, [pc, #200]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	438a      	bics	r2, r1
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ffe:	f7ff fbc7 	bl	8000790 <HAL_GetTick>
 8001002:	0003      	movs	r3, r0
 8001004:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001008:	f7ff fbc2 	bl	8000790 <HAL_GetTick>
 800100c:	0002      	movs	r2, r0
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e236      	b.n	8001488 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800101a:	4b29      	ldr	r3, [pc, #164]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 800101c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101e:	2202      	movs	r2, #2
 8001020:	4013      	ands	r3, r2
 8001022:	d1f1      	bne.n	8001008 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2204      	movs	r2, #4
 800102a:	4013      	ands	r3, r2
 800102c:	d100      	bne.n	8001030 <HAL_RCC_OscConfig+0x2a8>
 800102e:	e0b5      	b.n	800119c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001030:	201f      	movs	r0, #31
 8001032:	183b      	adds	r3, r7, r0
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 800103a:	69da      	ldr	r2, [r3, #28]
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	055b      	lsls	r3, r3, #21
 8001040:	4013      	ands	r3, r2
 8001042:	d110      	bne.n	8001066 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001044:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8001046:	69da      	ldr	r2, [r3, #28]
 8001048:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 800104a:	2180      	movs	r1, #128	; 0x80
 800104c:	0549      	lsls	r1, r1, #21
 800104e:	430a      	orrs	r2, r1
 8001050:	61da      	str	r2, [r3, #28]
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 8001054:	69da      	ldr	r2, [r3, #28]
 8001056:	2380      	movs	r3, #128	; 0x80
 8001058:	055b      	lsls	r3, r3, #21
 800105a:	4013      	ands	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001060:	183b      	adds	r3, r7, r0
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <HAL_RCC_OscConfig+0x344>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4013      	ands	r3, r2
 8001070:	d11a      	bne.n	80010a8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <HAL_RCC_OscConfig+0x344>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_RCC_OscConfig+0x344>)
 8001078:	2180      	movs	r1, #128	; 0x80
 800107a:	0049      	lsls	r1, r1, #1
 800107c:	430a      	orrs	r2, r1
 800107e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001080:	f7ff fb86 	bl	8000790 <HAL_GetTick>
 8001084:	0003      	movs	r3, r0
 8001086:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001088:	e008      	b.n	800109c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800108a:	f7ff fb81 	bl	8000790 <HAL_GetTick>
 800108e:	0002      	movs	r2, r0
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b64      	cmp	r3, #100	; 0x64
 8001096:	d901      	bls.n	800109c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e1f5      	b.n	8001488 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <HAL_RCC_OscConfig+0x344>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4013      	ands	r3, r2
 80010a6:	d0f0      	beq.n	800108a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d10f      	bne.n	80010d0 <HAL_RCC_OscConfig+0x348>
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 80010b2:	6a1a      	ldr	r2, [r3, #32]
 80010b4:	4b02      	ldr	r3, [pc, #8]	; (80010c0 <HAL_RCC_OscConfig+0x338>)
 80010b6:	2101      	movs	r1, #1
 80010b8:	430a      	orrs	r2, r1
 80010ba:	621a      	str	r2, [r3, #32]
 80010bc:	e036      	b.n	800112c <HAL_RCC_OscConfig+0x3a4>
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	40021000 	.word	0x40021000
 80010c4:	fffeffff 	.word	0xfffeffff
 80010c8:	fffbffff 	.word	0xfffbffff
 80010cc:	40007000 	.word	0x40007000
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d10c      	bne.n	80010f2 <HAL_RCC_OscConfig+0x36a>
 80010d8:	4bca      	ldr	r3, [pc, #808]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 80010da:	6a1a      	ldr	r2, [r3, #32]
 80010dc:	4bc9      	ldr	r3, [pc, #804]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 80010de:	2101      	movs	r1, #1
 80010e0:	438a      	bics	r2, r1
 80010e2:	621a      	str	r2, [r3, #32]
 80010e4:	4bc7      	ldr	r3, [pc, #796]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 80010e6:	6a1a      	ldr	r2, [r3, #32]
 80010e8:	4bc6      	ldr	r3, [pc, #792]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 80010ea:	2104      	movs	r1, #4
 80010ec:	438a      	bics	r2, r1
 80010ee:	621a      	str	r2, [r3, #32]
 80010f0:	e01c      	b.n	800112c <HAL_RCC_OscConfig+0x3a4>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	2b05      	cmp	r3, #5
 80010f8:	d10c      	bne.n	8001114 <HAL_RCC_OscConfig+0x38c>
 80010fa:	4bc2      	ldr	r3, [pc, #776]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 80010fc:	6a1a      	ldr	r2, [r3, #32]
 80010fe:	4bc1      	ldr	r3, [pc, #772]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 8001100:	2104      	movs	r1, #4
 8001102:	430a      	orrs	r2, r1
 8001104:	621a      	str	r2, [r3, #32]
 8001106:	4bbf      	ldr	r3, [pc, #764]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 8001108:	6a1a      	ldr	r2, [r3, #32]
 800110a:	4bbe      	ldr	r3, [pc, #760]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 800110c:	2101      	movs	r1, #1
 800110e:	430a      	orrs	r2, r1
 8001110:	621a      	str	r2, [r3, #32]
 8001112:	e00b      	b.n	800112c <HAL_RCC_OscConfig+0x3a4>
 8001114:	4bbb      	ldr	r3, [pc, #748]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 8001116:	6a1a      	ldr	r2, [r3, #32]
 8001118:	4bba      	ldr	r3, [pc, #744]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 800111a:	2101      	movs	r1, #1
 800111c:	438a      	bics	r2, r1
 800111e:	621a      	str	r2, [r3, #32]
 8001120:	4bb8      	ldr	r3, [pc, #736]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 8001122:	6a1a      	ldr	r2, [r3, #32]
 8001124:	4bb7      	ldr	r3, [pc, #732]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 8001126:	2104      	movs	r1, #4
 8001128:	438a      	bics	r2, r1
 800112a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d014      	beq.n	800115e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001134:	f7ff fb2c 	bl	8000790 <HAL_GetTick>
 8001138:	0003      	movs	r3, r0
 800113a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800113c:	e009      	b.n	8001152 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800113e:	f7ff fb27 	bl	8000790 <HAL_GetTick>
 8001142:	0002      	movs	r2, r0
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	4aaf      	ldr	r2, [pc, #700]	; (8001408 <HAL_RCC_OscConfig+0x680>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e19a      	b.n	8001488 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001152:	4bac      	ldr	r3, [pc, #688]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	2202      	movs	r2, #2
 8001158:	4013      	ands	r3, r2
 800115a:	d0f0      	beq.n	800113e <HAL_RCC_OscConfig+0x3b6>
 800115c:	e013      	b.n	8001186 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115e:	f7ff fb17 	bl	8000790 <HAL_GetTick>
 8001162:	0003      	movs	r3, r0
 8001164:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001166:	e009      	b.n	800117c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001168:	f7ff fb12 	bl	8000790 <HAL_GetTick>
 800116c:	0002      	movs	r2, r0
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	4aa5      	ldr	r2, [pc, #660]	; (8001408 <HAL_RCC_OscConfig+0x680>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e185      	b.n	8001488 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800117c:	4ba1      	ldr	r3, [pc, #644]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	2202      	movs	r2, #2
 8001182:	4013      	ands	r3, r2
 8001184:	d1f0      	bne.n	8001168 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001186:	231f      	movs	r3, #31
 8001188:	18fb      	adds	r3, r7, r3
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d105      	bne.n	800119c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001190:	4b9c      	ldr	r3, [pc, #624]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 8001192:	69da      	ldr	r2, [r3, #28]
 8001194:	4b9b      	ldr	r3, [pc, #620]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 8001196:	499d      	ldr	r1, [pc, #628]	; (800140c <HAL_RCC_OscConfig+0x684>)
 8001198:	400a      	ands	r2, r1
 800119a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2210      	movs	r2, #16
 80011a2:	4013      	ands	r3, r2
 80011a4:	d063      	beq.n	800126e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d12a      	bne.n	8001204 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011ae:	4b95      	ldr	r3, [pc, #596]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 80011b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011b2:	4b94      	ldr	r3, [pc, #592]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 80011b4:	2104      	movs	r1, #4
 80011b6:	430a      	orrs	r2, r1
 80011b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80011ba:	4b92      	ldr	r3, [pc, #584]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 80011bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011be:	4b91      	ldr	r3, [pc, #580]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 80011c0:	2101      	movs	r1, #1
 80011c2:	430a      	orrs	r2, r1
 80011c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c6:	f7ff fae3 	bl	8000790 <HAL_GetTick>
 80011ca:	0003      	movs	r3, r0
 80011cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011d0:	f7ff fade 	bl	8000790 <HAL_GetTick>
 80011d4:	0002      	movs	r2, r0
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e152      	b.n	8001488 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011e2:	4b88      	ldr	r3, [pc, #544]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 80011e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e6:	2202      	movs	r2, #2
 80011e8:	4013      	ands	r3, r2
 80011ea:	d0f1      	beq.n	80011d0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011ec:	4b85      	ldr	r3, [pc, #532]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 80011ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f0:	22f8      	movs	r2, #248	; 0xf8
 80011f2:	4393      	bics	r3, r2
 80011f4:	0019      	movs	r1, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	00da      	lsls	r2, r3, #3
 80011fc:	4b81      	ldr	r3, [pc, #516]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 80011fe:	430a      	orrs	r2, r1
 8001200:	635a      	str	r2, [r3, #52]	; 0x34
 8001202:	e034      	b.n	800126e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	3305      	adds	r3, #5
 800120a:	d111      	bne.n	8001230 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800120c:	4b7d      	ldr	r3, [pc, #500]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 800120e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001210:	4b7c      	ldr	r3, [pc, #496]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 8001212:	2104      	movs	r1, #4
 8001214:	438a      	bics	r2, r1
 8001216:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001218:	4b7a      	ldr	r3, [pc, #488]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 800121a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800121c:	22f8      	movs	r2, #248	; 0xf8
 800121e:	4393      	bics	r3, r2
 8001220:	0019      	movs	r1, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	00da      	lsls	r2, r3, #3
 8001228:	4b76      	ldr	r3, [pc, #472]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 800122a:	430a      	orrs	r2, r1
 800122c:	635a      	str	r2, [r3, #52]	; 0x34
 800122e:	e01e      	b.n	800126e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001230:	4b74      	ldr	r3, [pc, #464]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 8001232:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001234:	4b73      	ldr	r3, [pc, #460]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 8001236:	2104      	movs	r1, #4
 8001238:	430a      	orrs	r2, r1
 800123a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800123c:	4b71      	ldr	r3, [pc, #452]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 800123e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001240:	4b70      	ldr	r3, [pc, #448]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 8001242:	2101      	movs	r1, #1
 8001244:	438a      	bics	r2, r1
 8001246:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001248:	f7ff faa2 	bl	8000790 <HAL_GetTick>
 800124c:	0003      	movs	r3, r0
 800124e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001252:	f7ff fa9d 	bl	8000790 <HAL_GetTick>
 8001256:	0002      	movs	r2, r0
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e111      	b.n	8001488 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001264:	4b67      	ldr	r3, [pc, #412]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 8001266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001268:	2202      	movs	r2, #2
 800126a:	4013      	ands	r3, r2
 800126c:	d1f1      	bne.n	8001252 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2220      	movs	r2, #32
 8001274:	4013      	ands	r3, r2
 8001276:	d05c      	beq.n	8001332 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001278:	4b62      	ldr	r3, [pc, #392]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	220c      	movs	r2, #12
 800127e:	4013      	ands	r3, r2
 8001280:	2b0c      	cmp	r3, #12
 8001282:	d00e      	beq.n	80012a2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001284:	4b5f      	ldr	r3, [pc, #380]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	220c      	movs	r2, #12
 800128a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800128c:	2b08      	cmp	r3, #8
 800128e:	d114      	bne.n	80012ba <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001290:	4b5c      	ldr	r3, [pc, #368]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	23c0      	movs	r3, #192	; 0xc0
 8001296:	025b      	lsls	r3, r3, #9
 8001298:	401a      	ands	r2, r3
 800129a:	23c0      	movs	r3, #192	; 0xc0
 800129c:	025b      	lsls	r3, r3, #9
 800129e:	429a      	cmp	r2, r3
 80012a0:	d10b      	bne.n	80012ba <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80012a2:	4b58      	ldr	r3, [pc, #352]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 80012a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	029b      	lsls	r3, r3, #10
 80012aa:	4013      	ands	r3, r2
 80012ac:	d040      	beq.n	8001330 <HAL_RCC_OscConfig+0x5a8>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a1b      	ldr	r3, [r3, #32]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d03c      	beq.n	8001330 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e0e6      	b.n	8001488 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d01b      	beq.n	80012fa <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80012c2:	4b50      	ldr	r3, [pc, #320]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 80012c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012c6:	4b4f      	ldr	r3, [pc, #316]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 80012c8:	2180      	movs	r1, #128	; 0x80
 80012ca:	0249      	lsls	r1, r1, #9
 80012cc:	430a      	orrs	r2, r1
 80012ce:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fa5e 	bl	8000790 <HAL_GetTick>
 80012d4:	0003      	movs	r3, r0
 80012d6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012da:	f7ff fa59 	bl	8000790 <HAL_GetTick>
 80012de:	0002      	movs	r2, r0
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e0cd      	b.n	8001488 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80012ec:	4b45      	ldr	r3, [pc, #276]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 80012ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	029b      	lsls	r3, r3, #10
 80012f4:	4013      	ands	r3, r2
 80012f6:	d0f0      	beq.n	80012da <HAL_RCC_OscConfig+0x552>
 80012f8:	e01b      	b.n	8001332 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80012fa:	4b42      	ldr	r3, [pc, #264]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 80012fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012fe:	4b41      	ldr	r3, [pc, #260]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 8001300:	4943      	ldr	r1, [pc, #268]	; (8001410 <HAL_RCC_OscConfig+0x688>)
 8001302:	400a      	ands	r2, r1
 8001304:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001306:	f7ff fa43 	bl	8000790 <HAL_GetTick>
 800130a:	0003      	movs	r3, r0
 800130c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001310:	f7ff fa3e 	bl	8000790 <HAL_GetTick>
 8001314:	0002      	movs	r2, r0
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e0b2      	b.n	8001488 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001322:	4b38      	ldr	r3, [pc, #224]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 8001324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	029b      	lsls	r3, r3, #10
 800132a:	4013      	ands	r3, r2
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x588>
 800132e:	e000      	b.n	8001332 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001330:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	2b00      	cmp	r3, #0
 8001338:	d100      	bne.n	800133c <HAL_RCC_OscConfig+0x5b4>
 800133a:	e0a4      	b.n	8001486 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800133c:	4b31      	ldr	r3, [pc, #196]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	220c      	movs	r2, #12
 8001342:	4013      	ands	r3, r2
 8001344:	2b08      	cmp	r3, #8
 8001346:	d100      	bne.n	800134a <HAL_RCC_OscConfig+0x5c2>
 8001348:	e078      	b.n	800143c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134e:	2b02      	cmp	r3, #2
 8001350:	d14c      	bne.n	80013ec <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001352:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 8001358:	492e      	ldr	r1, [pc, #184]	; (8001414 <HAL_RCC_OscConfig+0x68c>)
 800135a:	400a      	ands	r2, r1
 800135c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135e:	f7ff fa17 	bl	8000790 <HAL_GetTick>
 8001362:	0003      	movs	r3, r0
 8001364:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001368:	f7ff fa12 	bl	8000790 <HAL_GetTick>
 800136c:	0002      	movs	r2, r0
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e086      	b.n	8001488 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800137a:	4b22      	ldr	r3, [pc, #136]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	049b      	lsls	r3, r3, #18
 8001382:	4013      	ands	r3, r2
 8001384:	d1f0      	bne.n	8001368 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001386:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 8001388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138a:	220f      	movs	r2, #15
 800138c:	4393      	bics	r3, r2
 800138e:	0019      	movs	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001394:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 8001396:	430a      	orrs	r2, r1
 8001398:	62da      	str	r2, [r3, #44]	; 0x2c
 800139a:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	4a1e      	ldr	r2, [pc, #120]	; (8001418 <HAL_RCC_OscConfig+0x690>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	0019      	movs	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ac:	431a      	orrs	r2, r3
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 80013b0:	430a      	orrs	r2, r1
 80013b2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 80013ba:	2180      	movs	r1, #128	; 0x80
 80013bc:	0449      	lsls	r1, r1, #17
 80013be:	430a      	orrs	r2, r1
 80013c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c2:	f7ff f9e5 	bl	8000790 <HAL_GetTick>
 80013c6:	0003      	movs	r3, r0
 80013c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013cc:	f7ff f9e0 	bl	8000790 <HAL_GetTick>
 80013d0:	0002      	movs	r2, r0
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e054      	b.n	8001488 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	049b      	lsls	r3, r3, #18
 80013e6:	4013      	ands	r3, r2
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0x644>
 80013ea:	e04c      	b.n	8001486 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <HAL_RCC_OscConfig+0x67c>)
 80013f2:	4908      	ldr	r1, [pc, #32]	; (8001414 <HAL_RCC_OscConfig+0x68c>)
 80013f4:	400a      	ands	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff f9ca 	bl	8000790 <HAL_GetTick>
 80013fc:	0003      	movs	r3, r0
 80013fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001400:	e015      	b.n	800142e <HAL_RCC_OscConfig+0x6a6>
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	40021000 	.word	0x40021000
 8001408:	00001388 	.word	0x00001388
 800140c:	efffffff 	.word	0xefffffff
 8001410:	fffeffff 	.word	0xfffeffff
 8001414:	feffffff 	.word	0xfeffffff
 8001418:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800141c:	f7ff f9b8 	bl	8000790 <HAL_GetTick>
 8001420:	0002      	movs	r2, r0
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e02c      	b.n	8001488 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <HAL_RCC_OscConfig+0x708>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	049b      	lsls	r3, r3, #18
 8001436:	4013      	ands	r3, r2
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x694>
 800143a:	e024      	b.n	8001486 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e01f      	b.n	8001488 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <HAL_RCC_OscConfig+0x708>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <HAL_RCC_OscConfig+0x708>)
 8001450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001452:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	23c0      	movs	r3, #192	; 0xc0
 8001458:	025b      	lsls	r3, r3, #9
 800145a:	401a      	ands	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001460:	429a      	cmp	r2, r3
 8001462:	d10e      	bne.n	8001482 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	220f      	movs	r2, #15
 8001468:	401a      	ands	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800146e:	429a      	cmp	r2, r3
 8001470:	d107      	bne.n	8001482 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	23f0      	movs	r3, #240	; 0xf0
 8001476:	039b      	lsls	r3, r3, #14
 8001478:	401a      	ands	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800147e:	429a      	cmp	r2, r3
 8001480:	d001      	beq.n	8001486 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	0018      	movs	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	b008      	add	sp, #32
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40021000 	.word	0x40021000

08001494 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e0bf      	b.n	8001628 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014a8:	4b61      	ldr	r3, [pc, #388]	; (8001630 <HAL_RCC_ClockConfig+0x19c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2201      	movs	r2, #1
 80014ae:	4013      	ands	r3, r2
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d911      	bls.n	80014da <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b6:	4b5e      	ldr	r3, [pc, #376]	; (8001630 <HAL_RCC_ClockConfig+0x19c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2201      	movs	r2, #1
 80014bc:	4393      	bics	r3, r2
 80014be:	0019      	movs	r1, r3
 80014c0:	4b5b      	ldr	r3, [pc, #364]	; (8001630 <HAL_RCC_ClockConfig+0x19c>)
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c8:	4b59      	ldr	r3, [pc, #356]	; (8001630 <HAL_RCC_ClockConfig+0x19c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2201      	movs	r2, #1
 80014ce:	4013      	ands	r3, r2
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d001      	beq.n	80014da <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e0a6      	b.n	8001628 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2202      	movs	r2, #2
 80014e0:	4013      	ands	r3, r2
 80014e2:	d015      	beq.n	8001510 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2204      	movs	r2, #4
 80014ea:	4013      	ands	r3, r2
 80014ec:	d006      	beq.n	80014fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80014ee:	4b51      	ldr	r3, [pc, #324]	; (8001634 <HAL_RCC_ClockConfig+0x1a0>)
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	4b50      	ldr	r3, [pc, #320]	; (8001634 <HAL_RCC_ClockConfig+0x1a0>)
 80014f4:	21e0      	movs	r1, #224	; 0xe0
 80014f6:	00c9      	lsls	r1, r1, #3
 80014f8:	430a      	orrs	r2, r1
 80014fa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014fc:	4b4d      	ldr	r3, [pc, #308]	; (8001634 <HAL_RCC_ClockConfig+0x1a0>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	22f0      	movs	r2, #240	; 0xf0
 8001502:	4393      	bics	r3, r2
 8001504:	0019      	movs	r1, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	4b4a      	ldr	r3, [pc, #296]	; (8001634 <HAL_RCC_ClockConfig+0x1a0>)
 800150c:	430a      	orrs	r2, r1
 800150e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2201      	movs	r2, #1
 8001516:	4013      	ands	r3, r2
 8001518:	d04c      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d107      	bne.n	8001532 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	4b44      	ldr	r3, [pc, #272]	; (8001634 <HAL_RCC_ClockConfig+0x1a0>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	029b      	lsls	r3, r3, #10
 800152a:	4013      	ands	r3, r2
 800152c:	d120      	bne.n	8001570 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e07a      	b.n	8001628 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d107      	bne.n	800154a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153a:	4b3e      	ldr	r3, [pc, #248]	; (8001634 <HAL_RCC_ClockConfig+0x1a0>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	2380      	movs	r3, #128	; 0x80
 8001540:	049b      	lsls	r3, r3, #18
 8001542:	4013      	ands	r3, r2
 8001544:	d114      	bne.n	8001570 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e06e      	b.n	8001628 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b03      	cmp	r3, #3
 8001550:	d107      	bne.n	8001562 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001552:	4b38      	ldr	r3, [pc, #224]	; (8001634 <HAL_RCC_ClockConfig+0x1a0>)
 8001554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	029b      	lsls	r3, r3, #10
 800155a:	4013      	ands	r3, r2
 800155c:	d108      	bne.n	8001570 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e062      	b.n	8001628 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001562:	4b34      	ldr	r3, [pc, #208]	; (8001634 <HAL_RCC_ClockConfig+0x1a0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2202      	movs	r2, #2
 8001568:	4013      	ands	r3, r2
 800156a:	d101      	bne.n	8001570 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e05b      	b.n	8001628 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001570:	4b30      	ldr	r3, [pc, #192]	; (8001634 <HAL_RCC_ClockConfig+0x1a0>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2203      	movs	r2, #3
 8001576:	4393      	bics	r3, r2
 8001578:	0019      	movs	r1, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <HAL_RCC_ClockConfig+0x1a0>)
 8001580:	430a      	orrs	r2, r1
 8001582:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001584:	f7ff f904 	bl	8000790 <HAL_GetTick>
 8001588:	0003      	movs	r3, r0
 800158a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158c:	e009      	b.n	80015a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800158e:	f7ff f8ff 	bl	8000790 <HAL_GetTick>
 8001592:	0002      	movs	r2, r0
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	4a27      	ldr	r2, [pc, #156]	; (8001638 <HAL_RCC_ClockConfig+0x1a4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e042      	b.n	8001628 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a2:	4b24      	ldr	r3, [pc, #144]	; (8001634 <HAL_RCC_ClockConfig+0x1a0>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	220c      	movs	r2, #12
 80015a8:	401a      	ands	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d1ec      	bne.n	800158e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015b4:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <HAL_RCC_ClockConfig+0x19c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2201      	movs	r2, #1
 80015ba:	4013      	ands	r3, r2
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d211      	bcs.n	80015e6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c2:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <HAL_RCC_ClockConfig+0x19c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2201      	movs	r2, #1
 80015c8:	4393      	bics	r3, r2
 80015ca:	0019      	movs	r1, r3
 80015cc:	4b18      	ldr	r3, [pc, #96]	; (8001630 <HAL_RCC_ClockConfig+0x19c>)
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_RCC_ClockConfig+0x19c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2201      	movs	r2, #1
 80015da:	4013      	ands	r3, r2
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d001      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e020      	b.n	8001628 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2204      	movs	r2, #4
 80015ec:	4013      	ands	r3, r2
 80015ee:	d009      	beq.n	8001604 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80015f0:	4b10      	ldr	r3, [pc, #64]	; (8001634 <HAL_RCC_ClockConfig+0x1a0>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	4a11      	ldr	r2, [pc, #68]	; (800163c <HAL_RCC_ClockConfig+0x1a8>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	0019      	movs	r1, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <HAL_RCC_ClockConfig+0x1a0>)
 8001600:	430a      	orrs	r2, r1
 8001602:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001604:	f000 f820 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 8001608:	0001      	movs	r1, r0
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <HAL_RCC_ClockConfig+0x1a0>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	091b      	lsrs	r3, r3, #4
 8001610:	220f      	movs	r2, #15
 8001612:	4013      	ands	r3, r2
 8001614:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <HAL_RCC_ClockConfig+0x1ac>)
 8001616:	5cd3      	ldrb	r3, [r2, r3]
 8001618:	000a      	movs	r2, r1
 800161a:	40da      	lsrs	r2, r3
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_RCC_ClockConfig+0x1b0>)
 800161e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001620:	2000      	movs	r0, #0
 8001622:	f7ff f86f 	bl	8000704 <HAL_InitTick>
  
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	0018      	movs	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	b004      	add	sp, #16
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40022000 	.word	0x40022000
 8001634:	40021000 	.word	0x40021000
 8001638:	00001388 	.word	0x00001388
 800163c:	fffff8ff 	.word	0xfffff8ff
 8001640:	08002cc4 	.word	0x08002cc4
 8001644:	2000000c 	.word	0x2000000c

08001648 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001662:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	220c      	movs	r2, #12
 800166c:	4013      	ands	r3, r2
 800166e:	2b0c      	cmp	r3, #12
 8001670:	d046      	beq.n	8001700 <HAL_RCC_GetSysClockFreq+0xb8>
 8001672:	d848      	bhi.n	8001706 <HAL_RCC_GetSysClockFreq+0xbe>
 8001674:	2b04      	cmp	r3, #4
 8001676:	d002      	beq.n	800167e <HAL_RCC_GetSysClockFreq+0x36>
 8001678:	2b08      	cmp	r3, #8
 800167a:	d003      	beq.n	8001684 <HAL_RCC_GetSysClockFreq+0x3c>
 800167c:	e043      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800167e:	4b27      	ldr	r3, [pc, #156]	; (800171c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001680:	613b      	str	r3, [r7, #16]
      break;
 8001682:	e043      	b.n	800170c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	0c9b      	lsrs	r3, r3, #18
 8001688:	220f      	movs	r2, #15
 800168a:	4013      	ands	r3, r2
 800168c:	4a24      	ldr	r2, [pc, #144]	; (8001720 <HAL_RCC_GetSysClockFreq+0xd8>)
 800168e:	5cd3      	ldrb	r3, [r2, r3]
 8001690:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001692:	4b21      	ldr	r3, [pc, #132]	; (8001718 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	220f      	movs	r2, #15
 8001698:	4013      	ands	r3, r2
 800169a:	4a22      	ldr	r2, [pc, #136]	; (8001724 <HAL_RCC_GetSysClockFreq+0xdc>)
 800169c:	5cd3      	ldrb	r3, [r2, r3]
 800169e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	23c0      	movs	r3, #192	; 0xc0
 80016a4:	025b      	lsls	r3, r3, #9
 80016a6:	401a      	ands	r2, r3
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	025b      	lsls	r3, r3, #9
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d109      	bne.n	80016c4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	481a      	ldr	r0, [pc, #104]	; (800171c <HAL_RCC_GetSysClockFreq+0xd4>)
 80016b4:	f7fe fd26 	bl	8000104 <__udivsi3>
 80016b8:	0003      	movs	r3, r0
 80016ba:	001a      	movs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4353      	muls	r3, r2
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	e01a      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	23c0      	movs	r3, #192	; 0xc0
 80016c8:	025b      	lsls	r3, r3, #9
 80016ca:	401a      	ands	r2, r3
 80016cc:	23c0      	movs	r3, #192	; 0xc0
 80016ce:	025b      	lsls	r3, r3, #9
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d109      	bne.n	80016e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	4814      	ldr	r0, [pc, #80]	; (8001728 <HAL_RCC_GetSysClockFreq+0xe0>)
 80016d8:	f7fe fd14 	bl	8000104 <__udivsi3>
 80016dc:	0003      	movs	r3, r0
 80016de:	001a      	movs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4353      	muls	r3, r2
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	e008      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	480c      	ldr	r0, [pc, #48]	; (800171c <HAL_RCC_GetSysClockFreq+0xd4>)
 80016ec:	f7fe fd0a 	bl	8000104 <__udivsi3>
 80016f0:	0003      	movs	r3, r0
 80016f2:	001a      	movs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4353      	muls	r3, r2
 80016f8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	613b      	str	r3, [r7, #16]
      break;
 80016fe:	e005      	b.n	800170c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001702:	613b      	str	r3, [r7, #16]
      break;
 8001704:	e002      	b.n	800170c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001706:	4b05      	ldr	r3, [pc, #20]	; (800171c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001708:	613b      	str	r3, [r7, #16]
      break;
 800170a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800170c:	693b      	ldr	r3, [r7, #16]
}
 800170e:	0018      	movs	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	b006      	add	sp, #24
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	40021000 	.word	0x40021000
 800171c:	007a1200 	.word	0x007a1200
 8001720:	08002cdc 	.word	0x08002cdc
 8001724:	08002cec 	.word	0x08002cec
 8001728:	02dc6c00 	.word	0x02dc6c00

0800172c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001730:	4b02      	ldr	r3, [pc, #8]	; (800173c <HAL_RCC_GetHCLKFreq+0x10>)
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	0018      	movs	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	2000000c 	.word	0x2000000c

08001740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001744:	f7ff fff2 	bl	800172c <HAL_RCC_GetHCLKFreq>
 8001748:	0001      	movs	r1, r0
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_RCC_GetPCLK1Freq+0x24>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	0a1b      	lsrs	r3, r3, #8
 8001750:	2207      	movs	r2, #7
 8001752:	4013      	ands	r3, r2
 8001754:	4a04      	ldr	r2, [pc, #16]	; (8001768 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001756:	5cd3      	ldrb	r3, [r2, r3]
 8001758:	40d9      	lsrs	r1, r3
 800175a:	000b      	movs	r3, r1
}    
 800175c:	0018      	movs	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	40021000 	.word	0x40021000
 8001768:	08002cd4 	.word	0x08002cd4

0800176c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	025b      	lsls	r3, r3, #9
 8001784:	4013      	ands	r3, r2
 8001786:	d100      	bne.n	800178a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001788:	e08e      	b.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800178a:	2017      	movs	r0, #23
 800178c:	183b      	adds	r3, r7, r0
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001792:	4b6e      	ldr	r3, [pc, #440]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001794:	69da      	ldr	r2, [r3, #28]
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	055b      	lsls	r3, r3, #21
 800179a:	4013      	ands	r3, r2
 800179c:	d110      	bne.n	80017c0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	4b6b      	ldr	r3, [pc, #428]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017a0:	69da      	ldr	r2, [r3, #28]
 80017a2:	4b6a      	ldr	r3, [pc, #424]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017a4:	2180      	movs	r1, #128	; 0x80
 80017a6:	0549      	lsls	r1, r1, #21
 80017a8:	430a      	orrs	r2, r1
 80017aa:	61da      	str	r2, [r3, #28]
 80017ac:	4b67      	ldr	r3, [pc, #412]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017ae:	69da      	ldr	r2, [r3, #28]
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	055b      	lsls	r3, r3, #21
 80017b4:	4013      	ands	r3, r2
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ba:	183b      	adds	r3, r7, r0
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c0:	4b63      	ldr	r3, [pc, #396]	; (8001950 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	4013      	ands	r3, r2
 80017ca:	d11a      	bne.n	8001802 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017cc:	4b60      	ldr	r3, [pc, #384]	; (8001950 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b5f      	ldr	r3, [pc, #380]	; (8001950 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80017d2:	2180      	movs	r1, #128	; 0x80
 80017d4:	0049      	lsls	r1, r1, #1
 80017d6:	430a      	orrs	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017da:	f7fe ffd9 	bl	8000790 <HAL_GetTick>
 80017de:	0003      	movs	r3, r0
 80017e0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e2:	e008      	b.n	80017f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e4:	f7fe ffd4 	bl	8000790 <HAL_GetTick>
 80017e8:	0002      	movs	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b64      	cmp	r3, #100	; 0x64
 80017f0:	d901      	bls.n	80017f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e0a6      	b.n	8001944 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f6:	4b56      	ldr	r3, [pc, #344]	; (8001950 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4013      	ands	r3, r2
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001802:	4b52      	ldr	r3, [pc, #328]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001804:	6a1a      	ldr	r2, [r3, #32]
 8001806:	23c0      	movs	r3, #192	; 0xc0
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4013      	ands	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d034      	beq.n	800187e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	23c0      	movs	r3, #192	; 0xc0
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4013      	ands	r3, r2
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	429a      	cmp	r2, r3
 8001822:	d02c      	beq.n	800187e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001824:	4b49      	ldr	r3, [pc, #292]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	4a4a      	ldr	r2, [pc, #296]	; (8001954 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800182a:	4013      	ands	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800182e:	4b47      	ldr	r3, [pc, #284]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001830:	6a1a      	ldr	r2, [r3, #32]
 8001832:	4b46      	ldr	r3, [pc, #280]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	0249      	lsls	r1, r1, #9
 8001838:	430a      	orrs	r2, r1
 800183a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800183c:	4b43      	ldr	r3, [pc, #268]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800183e:	6a1a      	ldr	r2, [r3, #32]
 8001840:	4b42      	ldr	r3, [pc, #264]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001842:	4945      	ldr	r1, [pc, #276]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001844:	400a      	ands	r2, r1
 8001846:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001848:	4b40      	ldr	r3, [pc, #256]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2201      	movs	r2, #1
 8001852:	4013      	ands	r3, r2
 8001854:	d013      	beq.n	800187e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001856:	f7fe ff9b 	bl	8000790 <HAL_GetTick>
 800185a:	0003      	movs	r3, r0
 800185c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185e:	e009      	b.n	8001874 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001860:	f7fe ff96 	bl	8000790 <HAL_GetTick>
 8001864:	0002      	movs	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	4a3c      	ldr	r2, [pc, #240]	; (800195c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d901      	bls.n	8001874 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e067      	b.n	8001944 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001874:	4b35      	ldr	r3, [pc, #212]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	2202      	movs	r2, #2
 800187a:	4013      	ands	r3, r2
 800187c:	d0f0      	beq.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800187e:	4b33      	ldr	r3, [pc, #204]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	4a34      	ldr	r2, [pc, #208]	; (8001954 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001884:	4013      	ands	r3, r2
 8001886:	0019      	movs	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	4b2f      	ldr	r3, [pc, #188]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800188e:	430a      	orrs	r2, r1
 8001890:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001892:	2317      	movs	r3, #23
 8001894:	18fb      	adds	r3, r7, r3
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d105      	bne.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800189c:	4b2b      	ldr	r3, [pc, #172]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800189e:	69da      	ldr	r2, [r3, #28]
 80018a0:	4b2a      	ldr	r3, [pc, #168]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018a2:	492f      	ldr	r1, [pc, #188]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80018a4:	400a      	ands	r2, r1
 80018a6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2201      	movs	r2, #1
 80018ae:	4013      	ands	r3, r2
 80018b0:	d009      	beq.n	80018c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80018b2:	4b26      	ldr	r3, [pc, #152]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	2203      	movs	r2, #3
 80018b8:	4393      	bics	r3, r2
 80018ba:	0019      	movs	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	4b22      	ldr	r3, [pc, #136]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018c2:	430a      	orrs	r2, r1
 80018c4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2202      	movs	r2, #2
 80018cc:	4013      	ands	r3, r2
 80018ce:	d009      	beq.n	80018e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80018d0:	4b1e      	ldr	r3, [pc, #120]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	4a23      	ldr	r2, [pc, #140]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018d6:	4013      	ands	r3, r2
 80018d8:	0019      	movs	r1, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018e0:	430a      	orrs	r2, r1
 80018e2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	02db      	lsls	r3, r3, #11
 80018ec:	4013      	ands	r3, r2
 80018ee:	d009      	beq.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80018f0:	4b16      	ldr	r3, [pc, #88]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	4a1c      	ldr	r2, [pc, #112]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	0019      	movs	r1, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691a      	ldr	r2, [r3, #16]
 80018fe:	4b13      	ldr	r3, [pc, #76]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001900:	430a      	orrs	r2, r1
 8001902:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2220      	movs	r2, #32
 800190a:	4013      	ands	r3, r2
 800190c:	d009      	beq.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	2210      	movs	r2, #16
 8001914:	4393      	bics	r3, r2
 8001916:	0019      	movs	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	695a      	ldr	r2, [r3, #20]
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800191e:	430a      	orrs	r2, r1
 8001920:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	4013      	ands	r3, r2
 800192c:	d009      	beq.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800192e:	4b07      	ldr	r3, [pc, #28]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	2240      	movs	r2, #64	; 0x40
 8001934:	4393      	bics	r3, r2
 8001936:	0019      	movs	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699a      	ldr	r2, [r3, #24]
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800193e:	430a      	orrs	r2, r1
 8001940:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	0018      	movs	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	b006      	add	sp, #24
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40021000 	.word	0x40021000
 8001950:	40007000 	.word	0x40007000
 8001954:	fffffcff 	.word	0xfffffcff
 8001958:	fffeffff 	.word	0xfffeffff
 800195c:	00001388 	.word	0x00001388
 8001960:	efffffff 	.word	0xefffffff
 8001964:	fffcffff 	.word	0xfffcffff
 8001968:	fff3ffff 	.word	0xfff3ffff

0800196c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e044      	b.n	8001a08 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001982:	2b00      	cmp	r3, #0
 8001984:	d107      	bne.n	8001996 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2278      	movs	r2, #120	; 0x78
 800198a:	2100      	movs	r1, #0
 800198c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	0018      	movs	r0, r3
 8001992:	f7fe fde3 	bl	800055c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2224      	movs	r2, #36	; 0x24
 800199a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2101      	movs	r1, #1
 80019a8:	438a      	bics	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	0018      	movs	r0, r3
 80019b0:	f000 fc3c 	bl	800222c <UART_SetConfig>
 80019b4:	0003      	movs	r3, r0
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d101      	bne.n	80019be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e024      	b.n	8001a08 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	0018      	movs	r0, r3
 80019ca:	f000 fe17 	bl	80025fc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	490d      	ldr	r1, [pc, #52]	; (8001a10 <HAL_UART_Init+0xa4>)
 80019da:	400a      	ands	r2, r1
 80019dc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	212a      	movs	r1, #42	; 0x2a
 80019ea:	438a      	bics	r2, r1
 80019ec:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2101      	movs	r1, #1
 80019fa:	430a      	orrs	r2, r1
 80019fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	0018      	movs	r0, r3
 8001a02:	f000 feaf 	bl	8002764 <UART_CheckIdleState>
 8001a06:	0003      	movs	r3, r0
}
 8001a08:	0018      	movs	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	b002      	add	sp, #8
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	ffffb7ff 	.word	0xffffb7ff

08001a14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af02      	add	r7, sp, #8
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	1dbb      	adds	r3, r7, #6
 8001a22:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a28:	2b20      	cmp	r3, #32
 8001a2a:	d000      	beq.n	8001a2e <HAL_UART_Transmit+0x1a>
 8001a2c:	e08d      	b.n	8001b4a <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_UART_Transmit+0x28>
 8001a34:	1dbb      	adds	r3, r7, #6
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e085      	b.n	8001b4c <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	015b      	lsls	r3, r3, #5
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d109      	bne.n	8001a60 <HAL_UART_Transmit+0x4c>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d105      	bne.n	8001a60 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2201      	movs	r2, #1
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d001      	beq.n	8001a60 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e075      	b.n	8001b4c <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2284      	movs	r2, #132	; 0x84
 8001a64:	2100      	movs	r1, #0
 8001a66:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2221      	movs	r2, #33	; 0x21
 8001a6c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a6e:	f7fe fe8f 	bl	8000790 <HAL_GetTick>
 8001a72:	0003      	movs	r3, r0
 8001a74:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1dba      	adds	r2, r7, #6
 8001a7a:	2150      	movs	r1, #80	; 0x50
 8001a7c:	8812      	ldrh	r2, [r2, #0]
 8001a7e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	1dba      	adds	r2, r7, #6
 8001a84:	2152      	movs	r1, #82	; 0x52
 8001a86:	8812      	ldrh	r2, [r2, #0]
 8001a88:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	015b      	lsls	r3, r3, #5
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d108      	bne.n	8001aa8 <HAL_UART_Transmit+0x94>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d104      	bne.n	8001aa8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	61bb      	str	r3, [r7, #24]
 8001aa6:	e003      	b.n	8001ab0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ab0:	e030      	b.n	8001b14 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	0013      	movs	r3, r2
 8001abc:	2200      	movs	r2, #0
 8001abe:	2180      	movs	r1, #128	; 0x80
 8001ac0:	f000 fef8 	bl	80028b4 <UART_WaitOnFlagUntilTimeout>
 8001ac4:	1e03      	subs	r3, r0, #0
 8001ac6:	d004      	beq.n	8001ad2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2220      	movs	r2, #32
 8001acc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e03c      	b.n	8001b4c <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10b      	bne.n	8001af0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	881a      	ldrh	r2, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	05d2      	lsls	r2, r2, #23
 8001ae2:	0dd2      	lsrs	r2, r2, #23
 8001ae4:	b292      	uxth	r2, r2
 8001ae6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	3302      	adds	r3, #2
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	e008      	b.n	8001b02 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	781a      	ldrb	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	b292      	uxth	r2, r2
 8001afa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	3301      	adds	r3, #1
 8001b00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2252      	movs	r2, #82	; 0x52
 8001b06:	5a9b      	ldrh	r3, [r3, r2]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	b299      	uxth	r1, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2252      	movs	r2, #82	; 0x52
 8001b12:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2252      	movs	r2, #82	; 0x52
 8001b18:	5a9b      	ldrh	r3, [r3, r2]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1c8      	bne.n	8001ab2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	0013      	movs	r3, r2
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2140      	movs	r1, #64	; 0x40
 8001b2e:	f000 fec1 	bl	80028b4 <UART_WaitOnFlagUntilTimeout>
 8001b32:	1e03      	subs	r3, r0, #0
 8001b34:	d004      	beq.n	8001b40 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2220      	movs	r2, #32
 8001b3a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e005      	b.n	8001b4c <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2220      	movs	r2, #32
 8001b44:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e000      	b.n	8001b4c <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8001b4a:	2302      	movs	r3, #2
  }
}
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b008      	add	sp, #32
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	1dbb      	adds	r3, r7, #6
 8001b60:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b66:	2b20      	cmp	r3, #32
 8001b68:	d15b      	bne.n	8001c22 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_UART_Transmit_IT+0x24>
 8001b70:	1dbb      	adds	r3, r7, #6
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e053      	b.n	8001c24 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	015b      	lsls	r3, r3, #5
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d109      	bne.n	8001b9c <HAL_UART_Transmit_IT+0x48>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d105      	bne.n	8001b9c <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2201      	movs	r2, #1
 8001b94:	4013      	ands	r3, r2
 8001b96:	d001      	beq.n	8001b9c <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e043      	b.n	8001c24 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1dba      	adds	r2, r7, #6
 8001ba6:	2150      	movs	r1, #80	; 0x50
 8001ba8:	8812      	ldrh	r2, [r2, #0]
 8001baa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1dba      	adds	r2, r7, #6
 8001bb0:	2152      	movs	r1, #82	; 0x52
 8001bb2:	8812      	ldrh	r2, [r2, #0]
 8001bb4:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2284      	movs	r2, #132	; 0x84
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2221      	movs	r2, #33	; 0x21
 8001bc8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	015b      	lsls	r3, r3, #5
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d107      	bne.n	8001be6 <HAL_UART_Transmit_IT+0x92>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d103      	bne.n	8001be6 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <HAL_UART_Transmit_IT+0xd8>)
 8001be2:	66da      	str	r2, [r3, #108]	; 0x6c
 8001be4:	e002      	b.n	8001bec <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4a11      	ldr	r2, [pc, #68]	; (8001c30 <HAL_UART_Transmit_IT+0xdc>)
 8001bea:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bec:	f3ef 8310 	mrs	r3, PRIMASK
 8001bf0:	613b      	str	r3, [r7, #16]
  return(result);
 8001bf2:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f383 8810 	msr	PRIMASK, r3
}
 8001c00:	46c0      	nop			; (mov r8, r8)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2180      	movs	r1, #128	; 0x80
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	f383 8810 	msr	PRIMASK, r3
}
 8001c1c:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e000      	b.n	8001c24 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8001c22:	2302      	movs	r3, #2
  }
}
 8001c24:	0018      	movs	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b008      	add	sp, #32
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	08002b33 	.word	0x08002b33
 8001c30:	08002a7f 	.word	0x08002a7f

08001c34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b0ab      	sub	sp, #172	; 0xac
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	22a4      	movs	r2, #164	; 0xa4
 8001c44:	18b9      	adds	r1, r7, r2
 8001c46:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	20a0      	movs	r0, #160	; 0xa0
 8001c50:	1839      	adds	r1, r7, r0
 8001c52:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	219c      	movs	r1, #156	; 0x9c
 8001c5c:	1879      	adds	r1, r7, r1
 8001c5e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001c60:	0011      	movs	r1, r2
 8001c62:	18bb      	adds	r3, r7, r2
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a99      	ldr	r2, [pc, #612]	; (8001ecc <HAL_UART_IRQHandler+0x298>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2298      	movs	r2, #152	; 0x98
 8001c6c:	18bc      	adds	r4, r7, r2
 8001c6e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001c70:	18bb      	adds	r3, r7, r2
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d114      	bne.n	8001ca2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001c78:	187b      	adds	r3, r7, r1
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d00f      	beq.n	8001ca2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001c82:	183b      	adds	r3, r7, r0
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2220      	movs	r2, #32
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d00a      	beq.n	8001ca2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d100      	bne.n	8001c96 <HAL_UART_IRQHandler+0x62>
 8001c94:	e29e      	b.n	80021d4 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	0010      	movs	r0, r2
 8001c9e:	4798      	blx	r3
      }
      return;
 8001ca0:	e298      	b.n	80021d4 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001ca2:	2398      	movs	r3, #152	; 0x98
 8001ca4:	18fb      	adds	r3, r7, r3
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d100      	bne.n	8001cae <HAL_UART_IRQHandler+0x7a>
 8001cac:	e114      	b.n	8001ed8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001cae:	239c      	movs	r3, #156	; 0x9c
 8001cb0:	18fb      	adds	r3, r7, r3
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d106      	bne.n	8001cc8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001cba:	23a0      	movs	r3, #160	; 0xa0
 8001cbc:	18fb      	adds	r3, r7, r3
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a83      	ldr	r2, [pc, #524]	; (8001ed0 <HAL_UART_IRQHandler+0x29c>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d100      	bne.n	8001cc8 <HAL_UART_IRQHandler+0x94>
 8001cc6:	e107      	b.n	8001ed8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001cc8:	23a4      	movs	r3, #164	; 0xa4
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d012      	beq.n	8001cfa <HAL_UART_IRQHandler+0xc6>
 8001cd4:	23a0      	movs	r3, #160	; 0xa0
 8001cd6:	18fb      	adds	r3, r7, r3
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d00b      	beq.n	8001cfa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2284      	movs	r2, #132	; 0x84
 8001cee:	589b      	ldr	r3, [r3, r2]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2184      	movs	r1, #132	; 0x84
 8001cf8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001cfa:	23a4      	movs	r3, #164	; 0xa4
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2202      	movs	r2, #2
 8001d02:	4013      	ands	r3, r2
 8001d04:	d011      	beq.n	8001d2a <HAL_UART_IRQHandler+0xf6>
 8001d06:	239c      	movs	r3, #156	; 0x9c
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d00b      	beq.n	8001d2a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2202      	movs	r2, #2
 8001d18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2284      	movs	r2, #132	; 0x84
 8001d1e:	589b      	ldr	r3, [r3, r2]
 8001d20:	2204      	movs	r2, #4
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2184      	movs	r1, #132	; 0x84
 8001d28:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001d2a:	23a4      	movs	r3, #164	; 0xa4
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2204      	movs	r2, #4
 8001d32:	4013      	ands	r3, r2
 8001d34:	d011      	beq.n	8001d5a <HAL_UART_IRQHandler+0x126>
 8001d36:	239c      	movs	r3, #156	; 0x9c
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d00b      	beq.n	8001d5a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2204      	movs	r2, #4
 8001d48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2284      	movs	r2, #132	; 0x84
 8001d4e:	589b      	ldr	r3, [r3, r2]
 8001d50:	2202      	movs	r2, #2
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2184      	movs	r1, #132	; 0x84
 8001d58:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001d5a:	23a4      	movs	r3, #164	; 0xa4
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2208      	movs	r2, #8
 8001d62:	4013      	ands	r3, r2
 8001d64:	d017      	beq.n	8001d96 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001d66:	23a0      	movs	r3, #160	; 0xa0
 8001d68:	18fb      	adds	r3, r7, r3
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d105      	bne.n	8001d7e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001d72:	239c      	movs	r3, #156	; 0x9c
 8001d74:	18fb      	adds	r3, r7, r3
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001d7c:	d00b      	beq.n	8001d96 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2208      	movs	r2, #8
 8001d84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2284      	movs	r2, #132	; 0x84
 8001d8a:	589b      	ldr	r3, [r3, r2]
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2184      	movs	r1, #132	; 0x84
 8001d94:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001d96:	23a4      	movs	r3, #164	; 0xa4
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	4013      	ands	r3, r2
 8001da2:	d013      	beq.n	8001dcc <HAL_UART_IRQHandler+0x198>
 8001da4:	23a0      	movs	r3, #160	; 0xa0
 8001da6:	18fb      	adds	r3, r7, r3
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	04db      	lsls	r3, r3, #19
 8001dae:	4013      	ands	r3, r2
 8001db0:	d00c      	beq.n	8001dcc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2280      	movs	r2, #128	; 0x80
 8001db8:	0112      	lsls	r2, r2, #4
 8001dba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2284      	movs	r2, #132	; 0x84
 8001dc0:	589b      	ldr	r3, [r3, r2]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2184      	movs	r1, #132	; 0x84
 8001dca:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2284      	movs	r2, #132	; 0x84
 8001dd0:	589b      	ldr	r3, [r3, r2]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d100      	bne.n	8001dd8 <HAL_UART_IRQHandler+0x1a4>
 8001dd6:	e1ff      	b.n	80021d8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001dd8:	23a4      	movs	r3, #164	; 0xa4
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2220      	movs	r2, #32
 8001de0:	4013      	ands	r3, r2
 8001de2:	d00e      	beq.n	8001e02 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001de4:	23a0      	movs	r3, #160	; 0xa0
 8001de6:	18fb      	adds	r3, r7, r3
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2220      	movs	r2, #32
 8001dec:	4013      	ands	r3, r2
 8001dee:	d008      	beq.n	8001e02 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d004      	beq.n	8001e02 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	0010      	movs	r0, r2
 8001e00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2284      	movs	r2, #132	; 0x84
 8001e06:	589b      	ldr	r3, [r3, r2]
 8001e08:	2194      	movs	r1, #148	; 0x94
 8001e0a:	187a      	adds	r2, r7, r1
 8001e0c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2240      	movs	r2, #64	; 0x40
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b40      	cmp	r3, #64	; 0x40
 8001e1a:	d004      	beq.n	8001e26 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001e1c:	187b      	adds	r3, r7, r1
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2228      	movs	r2, #40	; 0x28
 8001e22:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001e24:	d047      	beq.n	8001eb6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f000 fdad 	bl	8002988 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2240      	movs	r2, #64	; 0x40
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b40      	cmp	r3, #64	; 0x40
 8001e3a:	d137      	bne.n	8001eac <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8001e40:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8001e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e44:	2090      	movs	r0, #144	; 0x90
 8001e46:	183a      	adds	r2, r7, r0
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e50:	f383 8810 	msr	PRIMASK, r3
}
 8001e54:	46c0      	nop			; (mov r8, r8)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2140      	movs	r1, #64	; 0x40
 8001e62:	438a      	bics	r2, r1
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	183b      	adds	r3, r7, r0
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e6e:	f383 8810 	msr	PRIMASK, r3
}
 8001e72:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d012      	beq.n	8001ea2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e80:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <HAL_UART_IRQHandler+0x2a0>)
 8001e82:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f7fe fda1 	bl	80009d0 <HAL_DMA_Abort_IT>
 8001e8e:	1e03      	subs	r3, r0, #0
 8001e90:	d01a      	beq.n	8001ec8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ea0:	e012      	b.n	8001ec8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f000 f9ad 	bl	8002204 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eaa:	e00d      	b.n	8001ec8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f000 f9a8 	bl	8002204 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eb4:	e008      	b.n	8001ec8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f000 f9a3 	bl	8002204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2284      	movs	r2, #132	; 0x84
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001ec6:	e187      	b.n	80021d8 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ec8:	46c0      	nop			; (mov r8, r8)
    return;
 8001eca:	e185      	b.n	80021d8 <HAL_UART_IRQHandler+0x5a4>
 8001ecc:	0000080f 	.word	0x0000080f
 8001ed0:	04000120 	.word	0x04000120
 8001ed4:	08002a51 	.word	0x08002a51

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d000      	beq.n	8001ee2 <HAL_UART_IRQHandler+0x2ae>
 8001ee0:	e139      	b.n	8002156 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001ee2:	23a4      	movs	r3, #164	; 0xa4
 8001ee4:	18fb      	adds	r3, r7, r3
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2210      	movs	r2, #16
 8001eea:	4013      	ands	r3, r2
 8001eec:	d100      	bne.n	8001ef0 <HAL_UART_IRQHandler+0x2bc>
 8001eee:	e132      	b.n	8002156 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001ef0:	23a0      	movs	r3, #160	; 0xa0
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2210      	movs	r2, #16
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d100      	bne.n	8001efe <HAL_UART_IRQHandler+0x2ca>
 8001efc:	e12b      	b.n	8002156 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2210      	movs	r2, #16
 8001f04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2240      	movs	r2, #64	; 0x40
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b40      	cmp	r3, #64	; 0x40
 8001f12:	d000      	beq.n	8001f16 <HAL_UART_IRQHandler+0x2e2>
 8001f14:	e09f      	b.n	8002056 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	217e      	movs	r1, #126	; 0x7e
 8001f20:	187b      	adds	r3, r7, r1
 8001f22:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8001f24:	187b      	adds	r3, r7, r1
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d100      	bne.n	8001f2e <HAL_UART_IRQHandler+0x2fa>
 8001f2c:	e156      	b.n	80021dc <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2258      	movs	r2, #88	; 0x58
 8001f32:	5a9b      	ldrh	r3, [r3, r2]
 8001f34:	187a      	adds	r2, r7, r1
 8001f36:	8812      	ldrh	r2, [r2, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d300      	bcc.n	8001f3e <HAL_UART_IRQHandler+0x30a>
 8001f3c:	e14e      	b.n	80021dc <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	187a      	adds	r2, r7, r1
 8001f42:	215a      	movs	r1, #90	; 0x5a
 8001f44:	8812      	ldrh	r2, [r2, #0]
 8001f46:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	2b20      	cmp	r3, #32
 8001f50:	d06f      	beq.n	8002032 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f52:	f3ef 8310 	mrs	r3, PRIMASK
 8001f56:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8001f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f62:	f383 8810 	msr	PRIMASK, r3
}
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	499e      	ldr	r1, [pc, #632]	; (80021ec <HAL_UART_IRQHandler+0x5b8>)
 8001f74:	400a      	ands	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f7a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f7e:	f383 8810 	msr	PRIMASK, r3
}
 8001f82:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f84:	f3ef 8310 	mrs	r3, PRIMASK
 8001f88:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8001f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f8c:	677b      	str	r3, [r7, #116]	; 0x74
 8001f8e:	2301      	movs	r3, #1
 8001f90:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f94:	f383 8810 	msr	PRIMASK, r3
}
 8001f98:	46c0      	nop			; (mov r8, r8)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	438a      	bics	r2, r1
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fac:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fb0:	f383 8810 	msr	PRIMASK, r3
}
 8001fb4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8001fba:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8001fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fbe:	673b      	str	r3, [r7, #112]	; 0x70
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fc6:	f383 8810 	msr	PRIMASK, r3
}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2140      	movs	r1, #64	; 0x40
 8001fd8:	438a      	bics	r2, r1
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fde:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fe2:	f383 8810 	msr	PRIMASK, r3
}
 8001fe6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2280      	movs	r2, #128	; 0x80
 8001fec:	2120      	movs	r1, #32
 8001fee:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8001ffa:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8001ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ffe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002000:	2301      	movs	r3, #1
 8002002:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002004:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002006:	f383 8810 	msr	PRIMASK, r3
}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2110      	movs	r1, #16
 8002018:	438a      	bics	r2, r1
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800201e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002022:	f383 8810 	msr	PRIMASK, r3
}
 8002026:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800202c:	0018      	movs	r0, r3
 800202e:	f7fe fc97 	bl	8000960 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2202      	movs	r2, #2
 8002036:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2258      	movs	r2, #88	; 0x58
 800203c:	5a9a      	ldrh	r2, [r3, r2]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	215a      	movs	r1, #90	; 0x5a
 8002042:	5a5b      	ldrh	r3, [r3, r1]
 8002044:	b29b      	uxth	r3, r3
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	b29a      	uxth	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	0011      	movs	r1, r2
 800204e:	0018      	movs	r0, r3
 8002050:	f000 f8e0 	bl	8002214 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002054:	e0c2      	b.n	80021dc <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2258      	movs	r2, #88	; 0x58
 800205a:	5a99      	ldrh	r1, [r3, r2]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	225a      	movs	r2, #90	; 0x5a
 8002060:	5a9b      	ldrh	r3, [r3, r2]
 8002062:	b29a      	uxth	r2, r3
 8002064:	208e      	movs	r0, #142	; 0x8e
 8002066:	183b      	adds	r3, r7, r0
 8002068:	1a8a      	subs	r2, r1, r2
 800206a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	225a      	movs	r2, #90	; 0x5a
 8002070:	5a9b      	ldrh	r3, [r3, r2]
 8002072:	b29b      	uxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d100      	bne.n	800207a <HAL_UART_IRQHandler+0x446>
 8002078:	e0b2      	b.n	80021e0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800207a:	183b      	adds	r3, r7, r0
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d100      	bne.n	8002084 <HAL_UART_IRQHandler+0x450>
 8002082:	e0ad      	b.n	80021e0 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002084:	f3ef 8310 	mrs	r3, PRIMASK
 8002088:	60fb      	str	r3, [r7, #12]
  return(result);
 800208a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800208c:	2488      	movs	r4, #136	; 0x88
 800208e:	193a      	adds	r2, r7, r4
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	2301      	movs	r3, #1
 8002094:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	f383 8810 	msr	PRIMASK, r3
}
 800209c:	46c0      	nop			; (mov r8, r8)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4951      	ldr	r1, [pc, #324]	; (80021f0 <HAL_UART_IRQHandler+0x5bc>)
 80020aa:	400a      	ands	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	193b      	adds	r3, r7, r4
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f383 8810 	msr	PRIMASK, r3
}
 80020ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020bc:	f3ef 8310 	mrs	r3, PRIMASK
 80020c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80020c2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020c4:	2484      	movs	r4, #132	; 0x84
 80020c6:	193a      	adds	r2, r7, r4
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	2301      	movs	r3, #1
 80020cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	f383 8810 	msr	PRIMASK, r3
}
 80020d4:	46c0      	nop			; (mov r8, r8)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2101      	movs	r1, #1
 80020e2:	438a      	bics	r2, r1
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	193b      	adds	r3, r7, r4
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	f383 8810 	msr	PRIMASK, r3
}
 80020f2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2280      	movs	r2, #128	; 0x80
 80020f8:	2120      	movs	r1, #32
 80020fa:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002108:	f3ef 8310 	mrs	r3, PRIMASK
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002110:	2480      	movs	r4, #128	; 0x80
 8002112:	193a      	adds	r2, r7, r4
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	2301      	movs	r3, #1
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800211a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211c:	f383 8810 	msr	PRIMASK, r3
}
 8002120:	46c0      	nop			; (mov r8, r8)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2110      	movs	r1, #16
 800212e:	438a      	bics	r2, r1
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	193b      	adds	r3, r7, r4
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213a:	f383 8810 	msr	PRIMASK, r3
}
 800213e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002146:	183b      	adds	r3, r7, r0
 8002148:	881a      	ldrh	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	0011      	movs	r1, r2
 800214e:	0018      	movs	r0, r3
 8002150:	f000 f860 	bl	8002214 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002154:	e044      	b.n	80021e0 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002156:	23a4      	movs	r3, #164	; 0xa4
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	035b      	lsls	r3, r3, #13
 8002160:	4013      	ands	r3, r2
 8002162:	d010      	beq.n	8002186 <HAL_UART_IRQHandler+0x552>
 8002164:	239c      	movs	r3, #156	; 0x9c
 8002166:	18fb      	adds	r3, r7, r3
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	03db      	lsls	r3, r3, #15
 800216e:	4013      	ands	r3, r2
 8002170:	d009      	beq.n	8002186 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2280      	movs	r2, #128	; 0x80
 8002178:	0352      	lsls	r2, r2, #13
 800217a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	0018      	movs	r0, r3
 8002180:	f000 fd60 	bl	8002c44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002184:	e02f      	b.n	80021e6 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002186:	23a4      	movs	r3, #164	; 0xa4
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2280      	movs	r2, #128	; 0x80
 800218e:	4013      	ands	r3, r2
 8002190:	d00f      	beq.n	80021b2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002192:	23a0      	movs	r3, #160	; 0xa0
 8002194:	18fb      	adds	r3, r7, r3
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2280      	movs	r2, #128	; 0x80
 800219a:	4013      	ands	r3, r2
 800219c:	d009      	beq.n	80021b2 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d01e      	beq.n	80021e4 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	0010      	movs	r0, r2
 80021ae:	4798      	blx	r3
    }
    return;
 80021b0:	e018      	b.n	80021e4 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80021b2:	23a4      	movs	r3, #164	; 0xa4
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2240      	movs	r2, #64	; 0x40
 80021ba:	4013      	ands	r3, r2
 80021bc:	d013      	beq.n	80021e6 <HAL_UART_IRQHandler+0x5b2>
 80021be:	23a0      	movs	r3, #160	; 0xa0
 80021c0:	18fb      	adds	r3, r7, r3
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2240      	movs	r2, #64	; 0x40
 80021c6:	4013      	ands	r3, r2
 80021c8:	d00d      	beq.n	80021e6 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	0018      	movs	r0, r3
 80021ce:	f000 fd0e 	bl	8002bee <UART_EndTransmit_IT>
    return;
 80021d2:	e008      	b.n	80021e6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80021d4:	46c0      	nop			; (mov r8, r8)
 80021d6:	e006      	b.n	80021e6 <HAL_UART_IRQHandler+0x5b2>
    return;
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	e004      	b.n	80021e6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80021dc:	46c0      	nop			; (mov r8, r8)
 80021de:	e002      	b.n	80021e6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80021e0:	46c0      	nop			; (mov r8, r8)
 80021e2:	e000      	b.n	80021e6 <HAL_UART_IRQHandler+0x5b2>
    return;
 80021e4:	46c0      	nop			; (mov r8, r8)
  }

}
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b02b      	add	sp, #172	; 0xac
 80021ea:	bd90      	pop	{r4, r7, pc}
 80021ec:	fffffeff 	.word	0xfffffeff
 80021f0:	fffffedf 	.word	0xfffffedf

080021f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80021fc:	46c0      	nop			; (mov r8, r8)
 80021fe:	46bd      	mov	sp, r7
 8002200:	b002      	add	sp, #8
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800220c:	46c0      	nop			; (mov r8, r8)
 800220e:	46bd      	mov	sp, r7
 8002210:	b002      	add	sp, #8
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	000a      	movs	r2, r1
 800221e:	1cbb      	adds	r3, r7, #2
 8002220:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	46bd      	mov	sp, r7
 8002226:	b002      	add	sp, #8
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002234:	231e      	movs	r3, #30
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	431a      	orrs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	4313      	orrs	r3, r2
 8002252:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4abe      	ldr	r2, [pc, #760]	; (8002554 <UART_SetConfig+0x328>)
 800225c:	4013      	ands	r3, r2
 800225e:	0019      	movs	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	430a      	orrs	r2, r1
 8002268:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	4ab9      	ldr	r2, [pc, #740]	; (8002558 <UART_SetConfig+0x32c>)
 8002272:	4013      	ands	r3, r2
 8002274:	0019      	movs	r1, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	4313      	orrs	r3, r2
 8002290:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	4ab0      	ldr	r2, [pc, #704]	; (800255c <UART_SetConfig+0x330>)
 800229a:	4013      	ands	r3, r2
 800229c:	0019      	movs	r1, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4aac      	ldr	r2, [pc, #688]	; (8002560 <UART_SetConfig+0x334>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d127      	bne.n	8002302 <UART_SetConfig+0xd6>
 80022b2:	4bac      	ldr	r3, [pc, #688]	; (8002564 <UART_SetConfig+0x338>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	2203      	movs	r2, #3
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d00d      	beq.n	80022da <UART_SetConfig+0xae>
 80022be:	d81b      	bhi.n	80022f8 <UART_SetConfig+0xcc>
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d014      	beq.n	80022ee <UART_SetConfig+0xc2>
 80022c4:	d818      	bhi.n	80022f8 <UART_SetConfig+0xcc>
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <UART_SetConfig+0xa4>
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d00a      	beq.n	80022e4 <UART_SetConfig+0xb8>
 80022ce:	e013      	b.n	80022f8 <UART_SetConfig+0xcc>
 80022d0:	231f      	movs	r3, #31
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
 80022d8:	e0bd      	b.n	8002456 <UART_SetConfig+0x22a>
 80022da:	231f      	movs	r3, #31
 80022dc:	18fb      	adds	r3, r7, r3
 80022de:	2202      	movs	r2, #2
 80022e0:	701a      	strb	r2, [r3, #0]
 80022e2:	e0b8      	b.n	8002456 <UART_SetConfig+0x22a>
 80022e4:	231f      	movs	r3, #31
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	2204      	movs	r2, #4
 80022ea:	701a      	strb	r2, [r3, #0]
 80022ec:	e0b3      	b.n	8002456 <UART_SetConfig+0x22a>
 80022ee:	231f      	movs	r3, #31
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	2208      	movs	r2, #8
 80022f4:	701a      	strb	r2, [r3, #0]
 80022f6:	e0ae      	b.n	8002456 <UART_SetConfig+0x22a>
 80022f8:	231f      	movs	r3, #31
 80022fa:	18fb      	adds	r3, r7, r3
 80022fc:	2210      	movs	r2, #16
 80022fe:	701a      	strb	r2, [r3, #0]
 8002300:	e0a9      	b.n	8002456 <UART_SetConfig+0x22a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a98      	ldr	r2, [pc, #608]	; (8002568 <UART_SetConfig+0x33c>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d134      	bne.n	8002376 <UART_SetConfig+0x14a>
 800230c:	4b95      	ldr	r3, [pc, #596]	; (8002564 <UART_SetConfig+0x338>)
 800230e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002310:	23c0      	movs	r3, #192	; 0xc0
 8002312:	029b      	lsls	r3, r3, #10
 8002314:	4013      	ands	r3, r2
 8002316:	22c0      	movs	r2, #192	; 0xc0
 8002318:	0292      	lsls	r2, r2, #10
 800231a:	4293      	cmp	r3, r2
 800231c:	d017      	beq.n	800234e <UART_SetConfig+0x122>
 800231e:	22c0      	movs	r2, #192	; 0xc0
 8002320:	0292      	lsls	r2, r2, #10
 8002322:	4293      	cmp	r3, r2
 8002324:	d822      	bhi.n	800236c <UART_SetConfig+0x140>
 8002326:	2280      	movs	r2, #128	; 0x80
 8002328:	0292      	lsls	r2, r2, #10
 800232a:	4293      	cmp	r3, r2
 800232c:	d019      	beq.n	8002362 <UART_SetConfig+0x136>
 800232e:	2280      	movs	r2, #128	; 0x80
 8002330:	0292      	lsls	r2, r2, #10
 8002332:	4293      	cmp	r3, r2
 8002334:	d81a      	bhi.n	800236c <UART_SetConfig+0x140>
 8002336:	2b00      	cmp	r3, #0
 8002338:	d004      	beq.n	8002344 <UART_SetConfig+0x118>
 800233a:	2280      	movs	r2, #128	; 0x80
 800233c:	0252      	lsls	r2, r2, #9
 800233e:	4293      	cmp	r3, r2
 8002340:	d00a      	beq.n	8002358 <UART_SetConfig+0x12c>
 8002342:	e013      	b.n	800236c <UART_SetConfig+0x140>
 8002344:	231f      	movs	r3, #31
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
 800234c:	e083      	b.n	8002456 <UART_SetConfig+0x22a>
 800234e:	231f      	movs	r3, #31
 8002350:	18fb      	adds	r3, r7, r3
 8002352:	2202      	movs	r2, #2
 8002354:	701a      	strb	r2, [r3, #0]
 8002356:	e07e      	b.n	8002456 <UART_SetConfig+0x22a>
 8002358:	231f      	movs	r3, #31
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	2204      	movs	r2, #4
 800235e:	701a      	strb	r2, [r3, #0]
 8002360:	e079      	b.n	8002456 <UART_SetConfig+0x22a>
 8002362:	231f      	movs	r3, #31
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	2208      	movs	r2, #8
 8002368:	701a      	strb	r2, [r3, #0]
 800236a:	e074      	b.n	8002456 <UART_SetConfig+0x22a>
 800236c:	231f      	movs	r3, #31
 800236e:	18fb      	adds	r3, r7, r3
 8002370:	2210      	movs	r2, #16
 8002372:	701a      	strb	r2, [r3, #0]
 8002374:	e06f      	b.n	8002456 <UART_SetConfig+0x22a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a7c      	ldr	r2, [pc, #496]	; (800256c <UART_SetConfig+0x340>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d134      	bne.n	80023ea <UART_SetConfig+0x1be>
 8002380:	4b78      	ldr	r3, [pc, #480]	; (8002564 <UART_SetConfig+0x338>)
 8002382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002384:	23c0      	movs	r3, #192	; 0xc0
 8002386:	031b      	lsls	r3, r3, #12
 8002388:	4013      	ands	r3, r2
 800238a:	22c0      	movs	r2, #192	; 0xc0
 800238c:	0312      	lsls	r2, r2, #12
 800238e:	4293      	cmp	r3, r2
 8002390:	d017      	beq.n	80023c2 <UART_SetConfig+0x196>
 8002392:	22c0      	movs	r2, #192	; 0xc0
 8002394:	0312      	lsls	r2, r2, #12
 8002396:	4293      	cmp	r3, r2
 8002398:	d822      	bhi.n	80023e0 <UART_SetConfig+0x1b4>
 800239a:	2280      	movs	r2, #128	; 0x80
 800239c:	0312      	lsls	r2, r2, #12
 800239e:	4293      	cmp	r3, r2
 80023a0:	d019      	beq.n	80023d6 <UART_SetConfig+0x1aa>
 80023a2:	2280      	movs	r2, #128	; 0x80
 80023a4:	0312      	lsls	r2, r2, #12
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d81a      	bhi.n	80023e0 <UART_SetConfig+0x1b4>
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d004      	beq.n	80023b8 <UART_SetConfig+0x18c>
 80023ae:	2280      	movs	r2, #128	; 0x80
 80023b0:	02d2      	lsls	r2, r2, #11
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00a      	beq.n	80023cc <UART_SetConfig+0x1a0>
 80023b6:	e013      	b.n	80023e0 <UART_SetConfig+0x1b4>
 80023b8:	231f      	movs	r3, #31
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]
 80023c0:	e049      	b.n	8002456 <UART_SetConfig+0x22a>
 80023c2:	231f      	movs	r3, #31
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	2202      	movs	r2, #2
 80023c8:	701a      	strb	r2, [r3, #0]
 80023ca:	e044      	b.n	8002456 <UART_SetConfig+0x22a>
 80023cc:	231f      	movs	r3, #31
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	2204      	movs	r2, #4
 80023d2:	701a      	strb	r2, [r3, #0]
 80023d4:	e03f      	b.n	8002456 <UART_SetConfig+0x22a>
 80023d6:	231f      	movs	r3, #31
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	2208      	movs	r2, #8
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	e03a      	b.n	8002456 <UART_SetConfig+0x22a>
 80023e0:	231f      	movs	r3, #31
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	2210      	movs	r2, #16
 80023e6:	701a      	strb	r2, [r3, #0]
 80023e8:	e035      	b.n	8002456 <UART_SetConfig+0x22a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a60      	ldr	r2, [pc, #384]	; (8002570 <UART_SetConfig+0x344>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d104      	bne.n	80023fe <UART_SetConfig+0x1d2>
 80023f4:	231f      	movs	r3, #31
 80023f6:	18fb      	adds	r3, r7, r3
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]
 80023fc:	e02b      	b.n	8002456 <UART_SetConfig+0x22a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a5c      	ldr	r2, [pc, #368]	; (8002574 <UART_SetConfig+0x348>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d104      	bne.n	8002412 <UART_SetConfig+0x1e6>
 8002408:	231f      	movs	r3, #31
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
 8002410:	e021      	b.n	8002456 <UART_SetConfig+0x22a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a58      	ldr	r2, [pc, #352]	; (8002578 <UART_SetConfig+0x34c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d104      	bne.n	8002426 <UART_SetConfig+0x1fa>
 800241c:	231f      	movs	r3, #31
 800241e:	18fb      	adds	r3, r7, r3
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
 8002424:	e017      	b.n	8002456 <UART_SetConfig+0x22a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a54      	ldr	r2, [pc, #336]	; (800257c <UART_SetConfig+0x350>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d104      	bne.n	800243a <UART_SetConfig+0x20e>
 8002430:	231f      	movs	r3, #31
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]
 8002438:	e00d      	b.n	8002456 <UART_SetConfig+0x22a>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a50      	ldr	r2, [pc, #320]	; (8002580 <UART_SetConfig+0x354>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d104      	bne.n	800244e <UART_SetConfig+0x222>
 8002444:	231f      	movs	r3, #31
 8002446:	18fb      	adds	r3, r7, r3
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
 800244c:	e003      	b.n	8002456 <UART_SetConfig+0x22a>
 800244e:	231f      	movs	r3, #31
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	2210      	movs	r2, #16
 8002454:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69da      	ldr	r2, [r3, #28]
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	429a      	cmp	r2, r3
 8002460:	d15c      	bne.n	800251c <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8002462:	231f      	movs	r3, #31
 8002464:	18fb      	adds	r3, r7, r3
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b08      	cmp	r3, #8
 800246a:	d015      	beq.n	8002498 <UART_SetConfig+0x26c>
 800246c:	dc18      	bgt.n	80024a0 <UART_SetConfig+0x274>
 800246e:	2b04      	cmp	r3, #4
 8002470:	d00d      	beq.n	800248e <UART_SetConfig+0x262>
 8002472:	dc15      	bgt.n	80024a0 <UART_SetConfig+0x274>
 8002474:	2b00      	cmp	r3, #0
 8002476:	d002      	beq.n	800247e <UART_SetConfig+0x252>
 8002478:	2b02      	cmp	r3, #2
 800247a:	d005      	beq.n	8002488 <UART_SetConfig+0x25c>
 800247c:	e010      	b.n	80024a0 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800247e:	f7ff f95f 	bl	8001740 <HAL_RCC_GetPCLK1Freq>
 8002482:	0003      	movs	r3, r0
 8002484:	61bb      	str	r3, [r7, #24]
        break;
 8002486:	e012      	b.n	80024ae <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002488:	4b3e      	ldr	r3, [pc, #248]	; (8002584 <UART_SetConfig+0x358>)
 800248a:	61bb      	str	r3, [r7, #24]
        break;
 800248c:	e00f      	b.n	80024ae <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800248e:	f7ff f8db 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 8002492:	0003      	movs	r3, r0
 8002494:	61bb      	str	r3, [r7, #24]
        break;
 8002496:	e00a      	b.n	80024ae <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	021b      	lsls	r3, r3, #8
 800249c:	61bb      	str	r3, [r7, #24]
        break;
 800249e:	e006      	b.n	80024ae <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80024a4:	231e      	movs	r3, #30
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	2201      	movs	r2, #1
 80024aa:	701a      	strb	r2, [r3, #0]
        break;
 80024ac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d100      	bne.n	80024b6 <UART_SetConfig+0x28a>
 80024b4:	e095      	b.n	80025e2 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	005a      	lsls	r2, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	085b      	lsrs	r3, r3, #1
 80024c0:	18d2      	adds	r2, r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	0019      	movs	r1, r3
 80024c8:	0010      	movs	r0, r2
 80024ca:	f7fd fe1b 	bl	8000104 <__udivsi3>
 80024ce:	0003      	movs	r3, r0
 80024d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	2b0f      	cmp	r3, #15
 80024d6:	d91c      	bls.n	8002512 <UART_SetConfig+0x2e6>
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	2380      	movs	r3, #128	; 0x80
 80024dc:	025b      	lsls	r3, r3, #9
 80024de:	429a      	cmp	r2, r3
 80024e0:	d217      	bcs.n	8002512 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	200e      	movs	r0, #14
 80024e8:	183b      	adds	r3, r7, r0
 80024ea:	210f      	movs	r1, #15
 80024ec:	438a      	bics	r2, r1
 80024ee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	085b      	lsrs	r3, r3, #1
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2207      	movs	r2, #7
 80024f8:	4013      	ands	r3, r2
 80024fa:	b299      	uxth	r1, r3
 80024fc:	183b      	adds	r3, r7, r0
 80024fe:	183a      	adds	r2, r7, r0
 8002500:	8812      	ldrh	r2, [r2, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	183a      	adds	r2, r7, r0
 800250c:	8812      	ldrh	r2, [r2, #0]
 800250e:	60da      	str	r2, [r3, #12]
 8002510:	e067      	b.n	80025e2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002512:	231e      	movs	r3, #30
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
 800251a:	e062      	b.n	80025e2 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800251c:	231f      	movs	r3, #31
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b08      	cmp	r3, #8
 8002524:	d030      	beq.n	8002588 <UART_SetConfig+0x35c>
 8002526:	dc33      	bgt.n	8002590 <UART_SetConfig+0x364>
 8002528:	2b04      	cmp	r3, #4
 800252a:	d00d      	beq.n	8002548 <UART_SetConfig+0x31c>
 800252c:	dc30      	bgt.n	8002590 <UART_SetConfig+0x364>
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <UART_SetConfig+0x30c>
 8002532:	2b02      	cmp	r3, #2
 8002534:	d005      	beq.n	8002542 <UART_SetConfig+0x316>
 8002536:	e02b      	b.n	8002590 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002538:	f7ff f902 	bl	8001740 <HAL_RCC_GetPCLK1Freq>
 800253c:	0003      	movs	r3, r0
 800253e:	61bb      	str	r3, [r7, #24]
        break;
 8002540:	e02d      	b.n	800259e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002542:	4b10      	ldr	r3, [pc, #64]	; (8002584 <UART_SetConfig+0x358>)
 8002544:	61bb      	str	r3, [r7, #24]
        break;
 8002546:	e02a      	b.n	800259e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002548:	f7ff f87e 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 800254c:	0003      	movs	r3, r0
 800254e:	61bb      	str	r3, [r7, #24]
        break;
 8002550:	e025      	b.n	800259e <UART_SetConfig+0x372>
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	efff69f3 	.word	0xefff69f3
 8002558:	ffffcfff 	.word	0xffffcfff
 800255c:	fffff4ff 	.word	0xfffff4ff
 8002560:	40013800 	.word	0x40013800
 8002564:	40021000 	.word	0x40021000
 8002568:	40004400 	.word	0x40004400
 800256c:	40004800 	.word	0x40004800
 8002570:	40004c00 	.word	0x40004c00
 8002574:	40005000 	.word	0x40005000
 8002578:	40011400 	.word	0x40011400
 800257c:	40011800 	.word	0x40011800
 8002580:	40011c00 	.word	0x40011c00
 8002584:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	021b      	lsls	r3, r3, #8
 800258c:	61bb      	str	r3, [r7, #24]
        break;
 800258e:	e006      	b.n	800259e <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002594:	231e      	movs	r3, #30
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	2201      	movs	r2, #1
 800259a:	701a      	strb	r2, [r3, #0]
        break;
 800259c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d01e      	beq.n	80025e2 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	085a      	lsrs	r2, r3, #1
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	18d2      	adds	r2, r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	0019      	movs	r1, r3
 80025b4:	0010      	movs	r0, r2
 80025b6:	f7fd fda5 	bl	8000104 <__udivsi3>
 80025ba:	0003      	movs	r3, r0
 80025bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	2b0f      	cmp	r3, #15
 80025c2:	d90a      	bls.n	80025da <UART_SetConfig+0x3ae>
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	025b      	lsls	r3, r3, #9
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d205      	bcs.n	80025da <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60da      	str	r2, [r3, #12]
 80025d8:	e003      	b.n	80025e2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80025da:	231e      	movs	r3, #30
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	2201      	movs	r2, #1
 80025e0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80025ee:	231e      	movs	r3, #30
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	781b      	ldrb	r3, [r3, #0]
}
 80025f4:	0018      	movs	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b008      	add	sp, #32
 80025fa:	bd80      	pop	{r7, pc}

080025fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	2201      	movs	r2, #1
 800260a:	4013      	ands	r3, r2
 800260c:	d00b      	beq.n	8002626 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4a4a      	ldr	r2, [pc, #296]	; (8002740 <UART_AdvFeatureConfig+0x144>)
 8002616:	4013      	ands	r3, r2
 8002618:	0019      	movs	r1, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	2202      	movs	r2, #2
 800262c:	4013      	ands	r3, r2
 800262e:	d00b      	beq.n	8002648 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4a43      	ldr	r2, [pc, #268]	; (8002744 <UART_AdvFeatureConfig+0x148>)
 8002638:	4013      	ands	r3, r2
 800263a:	0019      	movs	r1, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	2204      	movs	r2, #4
 800264e:	4013      	ands	r3, r2
 8002650:	d00b      	beq.n	800266a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4a3b      	ldr	r2, [pc, #236]	; (8002748 <UART_AdvFeatureConfig+0x14c>)
 800265a:	4013      	ands	r3, r2
 800265c:	0019      	movs	r1, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	2208      	movs	r2, #8
 8002670:	4013      	ands	r3, r2
 8002672:	d00b      	beq.n	800268c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	4a34      	ldr	r2, [pc, #208]	; (800274c <UART_AdvFeatureConfig+0x150>)
 800267c:	4013      	ands	r3, r2
 800267e:	0019      	movs	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	2210      	movs	r2, #16
 8002692:	4013      	ands	r3, r2
 8002694:	d00b      	beq.n	80026ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	4a2c      	ldr	r2, [pc, #176]	; (8002750 <UART_AdvFeatureConfig+0x154>)
 800269e:	4013      	ands	r3, r2
 80026a0:	0019      	movs	r1, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	2220      	movs	r2, #32
 80026b4:	4013      	ands	r3, r2
 80026b6:	d00b      	beq.n	80026d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	4a25      	ldr	r2, [pc, #148]	; (8002754 <UART_AdvFeatureConfig+0x158>)
 80026c0:	4013      	ands	r3, r2
 80026c2:	0019      	movs	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	2240      	movs	r2, #64	; 0x40
 80026d6:	4013      	ands	r3, r2
 80026d8:	d01d      	beq.n	8002716 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4a1d      	ldr	r2, [pc, #116]	; (8002758 <UART_AdvFeatureConfig+0x15c>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	0019      	movs	r1, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026f6:	2380      	movs	r3, #128	; 0x80
 80026f8:	035b      	lsls	r3, r3, #13
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d10b      	bne.n	8002716 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	4a15      	ldr	r2, [pc, #84]	; (800275c <UART_AdvFeatureConfig+0x160>)
 8002706:	4013      	ands	r3, r2
 8002708:	0019      	movs	r1, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	2280      	movs	r2, #128	; 0x80
 800271c:	4013      	ands	r3, r2
 800271e:	d00b      	beq.n	8002738 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4a0e      	ldr	r2, [pc, #56]	; (8002760 <UART_AdvFeatureConfig+0x164>)
 8002728:	4013      	ands	r3, r2
 800272a:	0019      	movs	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	605a      	str	r2, [r3, #4]
  }
}
 8002738:	46c0      	nop			; (mov r8, r8)
 800273a:	46bd      	mov	sp, r7
 800273c:	b002      	add	sp, #8
 800273e:	bd80      	pop	{r7, pc}
 8002740:	fffdffff 	.word	0xfffdffff
 8002744:	fffeffff 	.word	0xfffeffff
 8002748:	fffbffff 	.word	0xfffbffff
 800274c:	ffff7fff 	.word	0xffff7fff
 8002750:	ffffefff 	.word	0xffffefff
 8002754:	ffffdfff 	.word	0xffffdfff
 8002758:	ffefffff 	.word	0xffefffff
 800275c:	ff9fffff 	.word	0xff9fffff
 8002760:	fff7ffff 	.word	0xfff7ffff

08002764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b092      	sub	sp, #72	; 0x48
 8002768:	af02      	add	r7, sp, #8
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2284      	movs	r2, #132	; 0x84
 8002770:	2100      	movs	r1, #0
 8002772:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002774:	f7fe f80c 	bl	8000790 <HAL_GetTick>
 8002778:	0003      	movs	r3, r0
 800277a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2208      	movs	r2, #8
 8002784:	4013      	ands	r3, r2
 8002786:	2b08      	cmp	r3, #8
 8002788:	d12c      	bne.n	80027e4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800278a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800278c:	2280      	movs	r2, #128	; 0x80
 800278e:	0391      	lsls	r1, r2, #14
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4a46      	ldr	r2, [pc, #280]	; (80028ac <UART_CheckIdleState+0x148>)
 8002794:	9200      	str	r2, [sp, #0]
 8002796:	2200      	movs	r2, #0
 8002798:	f000 f88c 	bl	80028b4 <UART_WaitOnFlagUntilTimeout>
 800279c:	1e03      	subs	r3, r0, #0
 800279e:	d021      	beq.n	80027e4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027a0:	f3ef 8310 	mrs	r3, PRIMASK
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80027a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80027aa:	2301      	movs	r3, #1
 80027ac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b0:	f383 8810 	msr	PRIMASK, r3
}
 80027b4:	46c0      	nop			; (mov r8, r8)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2180      	movs	r1, #128	; 0x80
 80027c2:	438a      	bics	r2, r1
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027cc:	f383 8810 	msr	PRIMASK, r3
}
 80027d0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2220      	movs	r2, #32
 80027d6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2278      	movs	r2, #120	; 0x78
 80027dc:	2100      	movs	r1, #0
 80027de:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e05f      	b.n	80028a4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2204      	movs	r2, #4
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d146      	bne.n	8002880 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027f4:	2280      	movs	r2, #128	; 0x80
 80027f6:	03d1      	lsls	r1, r2, #15
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	4a2c      	ldr	r2, [pc, #176]	; (80028ac <UART_CheckIdleState+0x148>)
 80027fc:	9200      	str	r2, [sp, #0]
 80027fe:	2200      	movs	r2, #0
 8002800:	f000 f858 	bl	80028b4 <UART_WaitOnFlagUntilTimeout>
 8002804:	1e03      	subs	r3, r0, #0
 8002806:	d03b      	beq.n	8002880 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002808:	f3ef 8310 	mrs	r3, PRIMASK
 800280c:	60fb      	str	r3, [r7, #12]
  return(result);
 800280e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002810:	637b      	str	r3, [r7, #52]	; 0x34
 8002812:	2301      	movs	r3, #1
 8002814:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f383 8810 	msr	PRIMASK, r3
}
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4921      	ldr	r1, [pc, #132]	; (80028b0 <UART_CheckIdleState+0x14c>)
 800282a:	400a      	ands	r2, r1
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002830:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f383 8810 	msr	PRIMASK, r3
}
 8002838:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800283a:	f3ef 8310 	mrs	r3, PRIMASK
 800283e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002840:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002842:	633b      	str	r3, [r7, #48]	; 0x30
 8002844:	2301      	movs	r3, #1
 8002846:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f383 8810 	msr	PRIMASK, r3
}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2101      	movs	r1, #1
 800285c:	438a      	bics	r2, r1
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002862:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	f383 8810 	msr	PRIMASK, r3
}
 800286a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2280      	movs	r2, #128	; 0x80
 8002870:	2120      	movs	r1, #32
 8002872:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2278      	movs	r2, #120	; 0x78
 8002878:	2100      	movs	r1, #0
 800287a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e011      	b.n	80028a4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2220      	movs	r2, #32
 8002884:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2280      	movs	r2, #128	; 0x80
 800288a:	2120      	movs	r1, #32
 800288c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2278      	movs	r2, #120	; 0x78
 800289e:	2100      	movs	r1, #0
 80028a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	0018      	movs	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b010      	add	sp, #64	; 0x40
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	01ffffff 	.word	0x01ffffff
 80028b0:	fffffedf 	.word	0xfffffedf

080028b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	1dfb      	adds	r3, r7, #7
 80028c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028c4:	e04b      	b.n	800295e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	3301      	adds	r3, #1
 80028ca:	d048      	beq.n	800295e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028cc:	f7fd ff60 	bl	8000790 <HAL_GetTick>
 80028d0:	0002      	movs	r2, r0
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d302      	bcc.n	80028e2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e04b      	b.n	800297e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2204      	movs	r2, #4
 80028ee:	4013      	ands	r3, r2
 80028f0:	d035      	beq.n	800295e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	2208      	movs	r2, #8
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d111      	bne.n	8002924 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2208      	movs	r2, #8
 8002906:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	0018      	movs	r0, r3
 800290c:	f000 f83c 	bl	8002988 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2284      	movs	r2, #132	; 0x84
 8002914:	2108      	movs	r1, #8
 8002916:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2278      	movs	r2, #120	; 0x78
 800291c:	2100      	movs	r1, #0
 800291e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e02c      	b.n	800297e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	69da      	ldr	r2, [r3, #28]
 800292a:	2380      	movs	r3, #128	; 0x80
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	401a      	ands	r2, r3
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	429a      	cmp	r2, r3
 8002936:	d112      	bne.n	800295e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2280      	movs	r2, #128	; 0x80
 800293e:	0112      	lsls	r2, r2, #4
 8002940:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	0018      	movs	r0, r3
 8002946:	f000 f81f 	bl	8002988 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2284      	movs	r2, #132	; 0x84
 800294e:	2120      	movs	r1, #32
 8002950:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2278      	movs	r2, #120	; 0x78
 8002956:	2100      	movs	r1, #0
 8002958:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e00f      	b.n	800297e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	4013      	ands	r3, r2
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	425a      	negs	r2, r3
 800296e:	4153      	adcs	r3, r2
 8002970:	b2db      	uxtb	r3, r3
 8002972:	001a      	movs	r2, r3
 8002974:	1dfb      	adds	r3, r7, #7
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d0a4      	beq.n	80028c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	0018      	movs	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	b004      	add	sp, #16
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08e      	sub	sp, #56	; 0x38
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002990:	f3ef 8310 	mrs	r3, PRIMASK
 8002994:	617b      	str	r3, [r7, #20]
  return(result);
 8002996:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002998:	637b      	str	r3, [r7, #52]	; 0x34
 800299a:	2301      	movs	r3, #1
 800299c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	f383 8810 	msr	PRIMASK, r3
}
 80029a4:	46c0      	nop			; (mov r8, r8)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4926      	ldr	r1, [pc, #152]	; (8002a4c <UART_EndRxTransfer+0xc4>)
 80029b2:	400a      	ands	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f383 8810 	msr	PRIMASK, r3
}
 80029c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029c2:	f3ef 8310 	mrs	r3, PRIMASK
 80029c6:	623b      	str	r3, [r7, #32]
  return(result);
 80029c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ca:	633b      	str	r3, [r7, #48]	; 0x30
 80029cc:	2301      	movs	r3, #1
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	f383 8810 	msr	PRIMASK, r3
}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2101      	movs	r1, #1
 80029e4:	438a      	bics	r2, r1
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ee:	f383 8810 	msr	PRIMASK, r3
}
 80029f2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d118      	bne.n	8002a2e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002a00:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a02:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a06:	2301      	movs	r3, #1
 8002a08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f383 8810 	msr	PRIMASK, r3
}
 8002a10:	46c0      	nop			; (mov r8, r8)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2110      	movs	r1, #16
 8002a1e:	438a      	bics	r2, r1
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f383 8810 	msr	PRIMASK, r3
}
 8002a2c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2280      	movs	r2, #128	; 0x80
 8002a32:	2120      	movs	r1, #32
 8002a34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	46bd      	mov	sp, r7
 8002a46:	b00e      	add	sp, #56	; 0x38
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	fffffedf 	.word	0xfffffedf

08002a50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	225a      	movs	r2, #90	; 0x5a
 8002a62:	2100      	movs	r1, #0
 8002a64:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2252      	movs	r2, #82	; 0x52
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	0018      	movs	r0, r3
 8002a72:	f7ff fbc7 	bl	8002204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b004      	add	sp, #16
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b08a      	sub	sp, #40	; 0x28
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a8a:	2b21      	cmp	r3, #33	; 0x21
 8002a8c:	d14d      	bne.n	8002b2a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2252      	movs	r2, #82	; 0x52
 8002a92:	5a9b      	ldrh	r3, [r3, r2]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d132      	bne.n	8002b00 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002aa0:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f383 8810 	msr	PRIMASK, r3
}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2180      	movs	r1, #128	; 0x80
 8002abc:	438a      	bics	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	f383 8810 	msr	PRIMASK, r3
}
 8002aca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002acc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ad0:	617b      	str	r3, [r7, #20]
  return(result);
 8002ad2:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002ad4:	623b      	str	r3, [r7, #32]
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	f383 8810 	msr	PRIMASK, r3
}
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2140      	movs	r1, #64	; 0x40
 8002aee:	430a      	orrs	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f383 8810 	msr	PRIMASK, r3
}
 8002afc:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8002afe:	e014      	b.n	8002b2a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b04:	781a      	ldrb	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	b292      	uxth	r2, r2
 8002b0c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2252      	movs	r2, #82	; 0x52
 8002b1c:	5a9b      	ldrh	r3, [r3, r2]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b299      	uxth	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2252      	movs	r2, #82	; 0x52
 8002b28:	5299      	strh	r1, [r3, r2]
}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b00a      	add	sp, #40	; 0x28
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b08c      	sub	sp, #48	; 0x30
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b3e:	2b21      	cmp	r3, #33	; 0x21
 8002b40:	d151      	bne.n	8002be6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2252      	movs	r2, #82	; 0x52
 8002b46:	5a9b      	ldrh	r3, [r3, r2]
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d132      	bne.n	8002bb4 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b52:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b54:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b58:	2301      	movs	r3, #1
 8002b5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	f383 8810 	msr	PRIMASK, r3
}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2180      	movs	r1, #128	; 0x80
 8002b70:	438a      	bics	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f383 8810 	msr	PRIMASK, r3
}
 8002b7e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b80:	f3ef 8310 	mrs	r3, PRIMASK
 8002b84:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b86:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f383 8810 	msr	PRIMASK, r3
}
 8002b94:	46c0      	nop			; (mov r8, r8)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2140      	movs	r1, #64	; 0x40
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	f383 8810 	msr	PRIMASK, r3
}
 8002bb0:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8002bb2:	e018      	b.n	8002be6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbc:	881a      	ldrh	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	05d2      	lsls	r2, r2, #23
 8002bc4:	0dd2      	lsrs	r2, r2, #23
 8002bc6:	b292      	uxth	r2, r2
 8002bc8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bce:	1c9a      	adds	r2, r3, #2
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2252      	movs	r2, #82	; 0x52
 8002bd8:	5a9b      	ldrh	r3, [r3, r2]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b299      	uxth	r1, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2252      	movs	r2, #82	; 0x52
 8002be4:	5299      	strh	r1, [r3, r2]
}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b00c      	add	sp, #48	; 0x30
 8002bec:	bd80      	pop	{r7, pc}

08002bee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b086      	sub	sp, #24
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8002bfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	2301      	movs	r3, #1
 8002c02:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f383 8810 	msr	PRIMASK, r3
}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2140      	movs	r1, #64	; 0x40
 8002c18:	438a      	bics	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f383 8810 	msr	PRIMASK, r3
}
 8002c26:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	0018      	movs	r0, r3
 8002c38:	f7ff fadc 	bl	80021f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c3c:	46c0      	nop			; (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b006      	add	sp, #24
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002c4c:	46c0      	nop			; (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b002      	add	sp, #8
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <__libc_init_array>:
 8002c54:	b570      	push	{r4, r5, r6, lr}
 8002c56:	2600      	movs	r6, #0
 8002c58:	4d0c      	ldr	r5, [pc, #48]	; (8002c8c <__libc_init_array+0x38>)
 8002c5a:	4c0d      	ldr	r4, [pc, #52]	; (8002c90 <__libc_init_array+0x3c>)
 8002c5c:	1b64      	subs	r4, r4, r5
 8002c5e:	10a4      	asrs	r4, r4, #2
 8002c60:	42a6      	cmp	r6, r4
 8002c62:	d109      	bne.n	8002c78 <__libc_init_array+0x24>
 8002c64:	2600      	movs	r6, #0
 8002c66:	f000 f821 	bl	8002cac <_init>
 8002c6a:	4d0a      	ldr	r5, [pc, #40]	; (8002c94 <__libc_init_array+0x40>)
 8002c6c:	4c0a      	ldr	r4, [pc, #40]	; (8002c98 <__libc_init_array+0x44>)
 8002c6e:	1b64      	subs	r4, r4, r5
 8002c70:	10a4      	asrs	r4, r4, #2
 8002c72:	42a6      	cmp	r6, r4
 8002c74:	d105      	bne.n	8002c82 <__libc_init_array+0x2e>
 8002c76:	bd70      	pop	{r4, r5, r6, pc}
 8002c78:	00b3      	lsls	r3, r6, #2
 8002c7a:	58eb      	ldr	r3, [r5, r3]
 8002c7c:	4798      	blx	r3
 8002c7e:	3601      	adds	r6, #1
 8002c80:	e7ee      	b.n	8002c60 <__libc_init_array+0xc>
 8002c82:	00b3      	lsls	r3, r6, #2
 8002c84:	58eb      	ldr	r3, [r5, r3]
 8002c86:	4798      	blx	r3
 8002c88:	3601      	adds	r6, #1
 8002c8a:	e7f2      	b.n	8002c72 <__libc_init_array+0x1e>
 8002c8c:	08002cfc 	.word	0x08002cfc
 8002c90:	08002cfc 	.word	0x08002cfc
 8002c94:	08002cfc 	.word	0x08002cfc
 8002c98:	08002d00 	.word	0x08002d00

08002c9c <memset>:
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	1882      	adds	r2, r0, r2
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d100      	bne.n	8002ca6 <memset+0xa>
 8002ca4:	4770      	bx	lr
 8002ca6:	7019      	strb	r1, [r3, #0]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	e7f9      	b.n	8002ca0 <memset+0x4>

08002cac <_init>:
 8002cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cb2:	bc08      	pop	{r3}
 8002cb4:	469e      	mov	lr, r3
 8002cb6:	4770      	bx	lr

08002cb8 <_fini>:
 8002cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cbe:	bc08      	pop	{r3}
 8002cc0:	469e      	mov	lr, r3
 8002cc2:	4770      	bx	lr
